
Piano.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dec8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  0800e168  0800e168  0001e168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800e378  0800e378  0001e378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800e37c  0800e37c  0001e37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b4  24000000  0800e380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000014d8  240000b4  0800e434  000200b4  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400158c  0800e434  0002158c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
  9 .debug_info   000350b9  00000000  00000000  000200e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005d6f  00000000  00000000  0005519b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002668  00000000  00000000  0005af10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00002440  00000000  00000000  0005d578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000a3dc  00000000  00000000  0005f9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00033b14  00000000  00000000  00069d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001a93db  00000000  00000000  0009d8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00246c83  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000ad78  00000000  00000000  00246cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .stab         00000024  00000000  00000000  00251a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000004e  00000000  00000000  00251a70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000b4 	.word	0x240000b4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e150 	.word	0x0800e150

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000b8 	.word	0x240000b8
 80002dc:	0800e150 	.word	0x0800e150

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	  /* Enable the CPU Cache */
	  CPU_CACHE_Enable();
 8000386:	f000 f8dd 	bl	8000544 <CPU_CACHE_Enable>
	  /* STM32H7xx HAL library initialization:
	       - Configure the Systick to generate an interrupt each 1 msec
	       - Set NVIC Group Priority to 4
	       - Low Level Initialization
	     */
	  HAL_Init();
 800038a:	f003 f98d 	bl	80036a8 <HAL_Init>

	  /* Configure the system clock to 400 MHz */
	  SystemClock_Config();
 800038e:	f000 f843 	bl	8000418 <SystemClock_Config>

	  /* Configure LED1 */
	  BSP_LED_Init(LED1);
 8000392:	2000      	movs	r0, #0
 8000394:	f001 f9c2 	bl	800171c <BSP_LED_Init>

	  /*##-1- LCD Initialization #################################################*/
	  /* Initialize the LCD */
	  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8000398:	2101      	movs	r1, #1
 800039a:	2000      	movs	r0, #0
 800039c:	f001 fece 	bl	800213c <BSP_LCD_Init>
	  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 80003a0:	481b      	ldr	r0, [pc, #108]	; (8000410 <main+0x90>)
 80003a2:	f000 f9f3 	bl	800078c <UTIL_LCD_SetFuncDriver>

	  /* Set Foreground Layer */
	  UTIL_LCD_SetLayer(0);
 80003a6:	2000      	movs	r0, #0
 80003a8:	f000 fa46 	bl	8000838 <UTIL_LCD_SetLayer>

	  /* Clear the LCD Background layer */
	  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 80003ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003b0:	f000 facc 	bl	800094c <UTIL_LCD_Clear>
	  uint32_t x_sizee, y_sizee;

	  BSP_LCD_GetXSize(0, &x_sizee);
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	4619      	mov	r1, r3
 80003b8:	2000      	movs	r0, #0
 80003ba:	f002 f89b 	bl	80024f4 <BSP_LCD_GetXSize>
	  BSP_LCD_GetYSize(0, &y_sizee);
 80003be:	463b      	mov	r3, r7
 80003c0:	4619      	mov	r1, r3
 80003c2:	2000      	movs	r0, #0
 80003c4:	f002 f8b4 	bl	8002530 <BSP_LCD_GetYSize>
	  hTSs->Width = x_sizee;
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <main+0x94>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	601a      	str	r2, [r3, #0]
	  hTSs->Height = y_sizee;
 80003d0:	4b10      	ldr	r3, [pc, #64]	; (8000414 <main+0x94>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	683a      	ldr	r2, [r7, #0]
 80003d6:	605a      	str	r2, [r3, #4]
	  hTSs->Orientation = TS_SWAP_XY;
 80003d8:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <main+0x94>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2208      	movs	r2, #8
 80003de:	609a      	str	r2, [r3, #8]
	  hTSs->Accuracy = 5;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <main+0x94>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2205      	movs	r2, #5
 80003e6:	60da      	str	r2, [r3, #12]
	  /* Touchscreen initialization */
	  BSP_TS_Init(0, hTSs);
 80003e8:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <main+0x94>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4619      	mov	r1, r3
 80003ee:	2000      	movs	r0, #0
 80003f0:	f002 ff3c 	bl	800326c <BSP_TS_Init>

	  srand(time(NULL));   // Initialization, should only be called once.
 80003f4:	2000      	movs	r0, #0
 80003f6:	f00c fe7d 	bl	800d0f4 <time>
 80003fa:	4602      	mov	r2, r0
 80003fc:	460b      	mov	r3, r1
 80003fe:	4610      	mov	r0, r2
 8000400:	4619      	mov	r1, r3
 8000402:	f00c fe49 	bl	800d098 <srand>
	  HAL_IncTick();
 8000406:	f003 f9c1 	bl	800378c <HAL_IncTick>

	  /* Infinite loop */
	  while (1)
	  {
		  pianoMain();
 800040a:	f00c f9af 	bl	800c76c <pianoMain>
	  {
 800040e:	e7fc      	b.n	800040a <main+0x8a>
 8000410:	0800e204 	.word	0x0800e204
 8000414:	240001b0 	.word	0x240001b0

08000418 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b09e      	sub	sp, #120	; 0x78
 800041c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800041e:	2300      	movs	r3, #0
 8000420:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000424:	2002      	movs	r0, #2
 8000426:	f007 f913 	bl	8007650 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800042a:	2300      	movs	r3, #0
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	4b42      	ldr	r3, [pc, #264]	; (8000538 <SystemClock_Config+0x120>)
 8000430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000432:	4a41      	ldr	r2, [pc, #260]	; (8000538 <SystemClock_Config+0x120>)
 8000434:	f023 0301 	bic.w	r3, r3, #1
 8000438:	62d3      	str	r3, [r2, #44]	; 0x2c
 800043a:	4b3f      	ldr	r3, [pc, #252]	; (8000538 <SystemClock_Config+0x120>)
 800043c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	4b3d      	ldr	r3, [pc, #244]	; (800053c <SystemClock_Config+0x124>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a3c      	ldr	r2, [pc, #240]	; (800053c <SystemClock_Config+0x124>)
 800044a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b3a      	ldr	r3, [pc, #232]	; (800053c <SystemClock_Config+0x124>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000458:	607b      	str	r3, [r7, #4]
 800045a:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800045c:	bf00      	nop
 800045e:	4b37      	ldr	r3, [pc, #220]	; (800053c <SystemClock_Config+0x124>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800046a:	d1f8      	bne.n	800045e <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800046c:	2301      	movs	r3, #1
 800046e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000474:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800047a:	2300      	movs	r3, #0
 800047c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047e:	2302      	movs	r3, #2
 8000480:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000482:	2302      	movs	r3, #2
 8000484:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8000486:	2305      	movs	r3, #5
 8000488:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 800048a:	23a0      	movs	r3, #160	; 0xa0
 800048c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000492:	2302      	movs	r3, #2
 8000494:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000496:	2302      	movs	r3, #2
 8000498:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800049a:	2304      	movs	r3, #4
 800049c:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800049e:	2300      	movs	r3, #0
 80004a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80004a2:	2308      	movs	r3, #8
 80004a4:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80004a6:	f107 0308 	add.w	r3, r7, #8
 80004aa:	4618      	mov	r0, r3
 80004ac:	f007 f90a 	bl	80076c4 <HAL_RCC_OscConfig>
 80004b0:	4603      	mov	r3, r0
 80004b2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80004b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80004be:	f000 f8af 	bl	8000620 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 80004c2:	233f      	movs	r3, #63	; 0x3f
 80004c4:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c6:	2303      	movs	r3, #3
 80004c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004ce:	2308      	movs	r3, #8
 80004d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004d2:	2340      	movs	r3, #64	; 0x40
 80004d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004d6:	2340      	movs	r3, #64	; 0x40
 80004d8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004de:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004e0:	2340      	movs	r3, #64	; 0x40
 80004e2:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80004e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80004e8:	2104      	movs	r1, #4
 80004ea:	4618      	mov	r0, r3
 80004ec:	f007 fd44 	bl	8007f78 <HAL_RCC_ClockConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80004f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80004fe:	f000 f88f 	bl	8000620 <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */

  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <SystemClock_Config+0x128>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <SystemClock_Config+0x128>)
 8000508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800050c:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <SystemClock_Config+0x128>)
 8000510:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000514:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <SystemClock_Config+0x128>)
 8000516:	f043 0302 	orr.w	r3, r3, #2
 800051a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <SystemClock_Config+0x128>)
 8000520:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000524:	f003 0302 	and.w	r3, r3, #2
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	683b      	ldr	r3, [r7, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
 800052c:	f003 f95a 	bl	80037e4 <HAL_EnableCompensationCell>
}
 8000530:	bf00      	nop
 8000532:	3778      	adds	r7, #120	; 0x78
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	58000400 	.word	0x58000400
 800053c:	58024800 	.word	0x58024800
 8000540:	58024400 	.word	0x58024400

08000544 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800054a:	4b34      	ldr	r3, [pc, #208]	; (800061c <CPU_CACHE_Enable+0xd8>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000552:	2b00      	cmp	r3, #0
 8000554:	d11b      	bne.n	800058e <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000556:	f3bf 8f4f 	dsb	sy
}
 800055a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800055c:	f3bf 8f6f 	isb	sy
}
 8000560:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000562:	4b2e      	ldr	r3, [pc, #184]	; (800061c <CPU_CACHE_Enable+0xd8>)
 8000564:	2200      	movs	r2, #0
 8000566:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800056a:	f3bf 8f4f 	dsb	sy
}
 800056e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000570:	f3bf 8f6f 	isb	sy
}
 8000574:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000576:	4b29      	ldr	r3, [pc, #164]	; (800061c <CPU_CACHE_Enable+0xd8>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a28      	ldr	r2, [pc, #160]	; (800061c <CPU_CACHE_Enable+0xd8>)
 800057c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000580:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000582:	f3bf 8f4f 	dsb	sy
}
 8000586:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000588:	f3bf 8f6f 	isb	sy
}
 800058c:	e000      	b.n	8000590 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800058e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000590:	4b22      	ldr	r3, [pc, #136]	; (800061c <CPU_CACHE_Enable+0xd8>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000598:	2b00      	cmp	r3, #0
 800059a:	d138      	bne.n	800060e <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <CPU_CACHE_Enable+0xd8>)
 800059e:	2200      	movs	r2, #0
 80005a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005a4:	f3bf 8f4f 	dsb	sy
}
 80005a8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005aa:	4b1c      	ldr	r3, [pc, #112]	; (800061c <CPU_CACHE_Enable+0xd8>)
 80005ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005b0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	0b5b      	lsrs	r3, r3, #13
 80005b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005ba:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	08db      	lsrs	r3, r3, #3
 80005c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005c4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	015a      	lsls	r2, r3, #5
 80005ca:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005ce:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005d4:	4911      	ldr	r1, [pc, #68]	; (800061c <CPU_CACHE_Enable+0xd8>)
 80005d6:	4313      	orrs	r3, r2
 80005d8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	1e5a      	subs	r2, r3, #1
 80005e0:	607a      	str	r2, [r7, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d1ef      	bne.n	80005c6 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	1e5a      	subs	r2, r3, #1
 80005ea:	60ba      	str	r2, [r7, #8]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1e5      	bne.n	80005bc <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80005f0:	f3bf 8f4f 	dsb	sy
}
 80005f4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <CPU_CACHE_Enable+0xd8>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a08      	ldr	r2, [pc, #32]	; (800061c <CPU_CACHE_Enable+0xd8>)
 80005fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000600:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000602:	f3bf 8f4f 	dsb	sy
}
 8000606:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000608:	f3bf 8f6f 	isb	sy
}
 800060c:	e000      	b.n	8000610 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800060e:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  BSP_LED_On(LED_RED);
 8000628:	2001      	movs	r0, #1
 800062a:	f001 f8d5 	bl	80017d8 <BSP_LED_On>
  while (1)
 800062e:	e7fe      	b.n	800062e <Error_Handler+0xe>

08000630 <_isatty>:
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
}

int _isatty(int fd) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2b00      	cmp	r3, #0
 800063c:	db04      	blt.n	8000648 <_isatty+0x18>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b02      	cmp	r3, #2
 8000642:	dc01      	bgt.n	8000648 <_isatty+0x18>
    return 1;
 8000644:	2301      	movs	r3, #1
 8000646:	e005      	b.n	8000654 <_isatty+0x24>

  errno = EBADF;
 8000648:	f00c fcf4 	bl	800d034 <__errno>
 800064c:	4603      	mov	r3, r0
 800064e:	2209      	movs	r2, #9
 8000650:	601a      	str	r2, [r3, #0]
  return 0;
 8000652:	2300      	movs	r3, #0
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <_close>:

int _close(int fd) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db04      	blt.n	8000674 <_close+0x18>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b02      	cmp	r3, #2
 800066e:	dc01      	bgt.n	8000674 <_close+0x18>
    return 0;
 8000670:	2300      	movs	r3, #0
 8000672:	e006      	b.n	8000682 <_close+0x26>

  errno = EBADF;
 8000674:	f00c fcde 	bl	800d034 <__errno>
 8000678:	4603      	mov	r3, r0
 800067a:	2209      	movs	r2, #9
 800067c:	601a      	str	r2, [r3, #0]
  return -1;
 800067e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800068a:	b580      	push	{r7, lr}
 800068c:	b084      	sub	sp, #16
 800068e:	af00      	add	r7, sp, #0
 8000690:	60f8      	str	r0, [r7, #12]
 8000692:	60b9      	str	r1, [r7, #8]
 8000694:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000696:	f00c fccd 	bl	800d034 <__errno>
 800069a:	4603      	mov	r3, r0
 800069c:	2209      	movs	r2, #9
 800069e:	601a      	str	r2, [r3, #0]
  return -1;
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <_fstat>:



int _fstat(int fd, struct stat* st) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db08      	blt.n	80006ce <_fstat+0x22>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b02      	cmp	r3, #2
 80006c0:	dc05      	bgt.n	80006ce <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006c8:	605a      	str	r2, [r3, #4]
    return 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	e005      	b.n	80006da <_fstat+0x2e>
  }

  errno = EBADF;
 80006ce:	f00c fcb1 	bl	800d034 <__errno>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2209      	movs	r2, #9
 80006d6:	601a      	str	r2, [r3, #0]
  return 0;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <_read>:


int _read(int fd, char* ptr, int len) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d110      	bne.n	8000718 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <_read+0x4c>)
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006fe:	2201      	movs	r2, #1
 8000700:	68b9      	ldr	r1, [r7, #8]
 8000702:	f00a ff4f 	bl	800b5a4 <HAL_UART_Receive>
 8000706:	4603      	mov	r3, r0
 8000708:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800070a:	7dfb      	ldrb	r3, [r7, #23]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d101      	bne.n	8000714 <_read+0x30>
      return 1;
 8000710:	2301      	movs	r3, #1
 8000712:	e008      	b.n	8000726 <_read+0x42>
    else
      return EIO;
 8000714:	2305      	movs	r3, #5
 8000716:	e006      	b.n	8000726 <_read+0x42>
  }
  errno = EBADF;
 8000718:	f00c fc8c 	bl	800d034 <__errno>
 800071c:	4603      	mov	r3, r0
 800071e:	2209      	movs	r2, #9
 8000720:	601a      	str	r2, [r3, #0]
  return -1;
 8000722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000726:	4618      	mov	r0, r3
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	240001b4 	.word	0x240001b4

08000734 <_write>:

int _write(int fd, char* ptr, int len) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d002      	beq.n	800074c <_write+0x18>
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2b02      	cmp	r3, #2
 800074a:	d111      	bne.n	8000770 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <_write+0x54>)
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	b29a      	uxth	r2, r3
 8000754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000758:	68b9      	ldr	r1, [r7, #8]
 800075a:	f00a fe95 	bl	800b488 <HAL_UART_Transmit>
 800075e:	4603      	mov	r3, r0
 8000760:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000762:	7dfb      	ldrb	r3, [r7, #23]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d101      	bne.n	800076c <_write+0x38>
      return len;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	e008      	b.n	800077e <_write+0x4a>
    else
      return EIO;
 800076c:	2305      	movs	r3, #5
 800076e:	e006      	b.n	800077e <_write+0x4a>
  }
  errno = EBADF;
 8000770:	f00c fc60 	bl	800d034 <__errno>
 8000774:	4603      	mov	r3, r0
 8000776:	2209      	movs	r2, #9
 8000778:	601a      	str	r2, [r3, #0]
  return -1;
 800077a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800077e:	4618      	mov	r0, r3
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	240001b4 	.word	0x240001b4

0800078c <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a22      	ldr	r2, [pc, #136]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 800079a:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	4a20      	ldr	r2, [pc, #128]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007a2:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	4a1e      	ldr	r2, [pc, #120]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007aa:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007b2:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	691b      	ldr	r3, [r3, #16]
 80007b8:	4a1a      	ldr	r2, [pc, #104]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007ba:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	4a18      	ldr	r2, [pc, #96]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007c2:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a16      	ldr	r2, [pc, #88]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007ca:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	4a14      	ldr	r2, [pc, #80]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007d2:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6a1b      	ldr	r3, [r3, #32]
 80007d8:	4a12      	ldr	r2, [pc, #72]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007da:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e0:	4a10      	ldr	r2, [pc, #64]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007e2:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e8:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007ea:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <UTIL_LCD_SetFuncDriver+0x9c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <UTIL_LCD_SetFuncDriver+0x9c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007fa:	69db      	ldr	r3, [r3, #28]
 80007fc:	4a0b      	ldr	r2, [pc, #44]	; (800082c <UTIL_LCD_SetFuncDriver+0xa0>)
 80007fe:	4611      	mov	r1, r2
 8000800:	2000      	movs	r0, #0
 8000802:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 8000806:	6a1b      	ldr	r3, [r3, #32]
 8000808:	4a09      	ldr	r2, [pc, #36]	; (8000830 <UTIL_LCD_SetFuncDriver+0xa4>)
 800080a:	4611      	mov	r1, r2
 800080c:	2000      	movs	r0, #0
 800080e:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 8000812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000814:	4a07      	ldr	r2, [pc, #28]	; (8000834 <UTIL_LCD_SetFuncDriver+0xa8>)
 8000816:	4611      	mov	r1, r2
 8000818:	2000      	movs	r0, #0
 800081a:	4798      	blx	r3
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	240001f8 	.word	0x240001f8
 8000828:	240001b8 	.word	0x240001b8
 800082c:	240001cc 	.word	0x240001cc
 8000830:	240001d0 	.word	0x240001d0
 8000834:	240001d4 	.word	0x240001d4

08000838 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <UTIL_LCD_SetLayer+0x34>)
 8000842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00c      	beq.n	8000862 <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <UTIL_LCD_SetLayer+0x34>)
 800084a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084c:	4a08      	ldr	r2, [pc, #32]	; (8000870 <UTIL_LCD_SetLayer+0x38>)
 800084e:	6912      	ldr	r2, [r2, #16]
 8000850:	6879      	ldr	r1, [r7, #4]
 8000852:	4610      	mov	r0, r2
 8000854:	4798      	blx	r3
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d102      	bne.n	8000862 <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
 800085c:	4a04      	ldr	r2, [pc, #16]	; (8000870 <UTIL_LCD_SetLayer+0x38>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	60d3      	str	r3, [r2, #12]
    }
  }
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	240001f8 	.word	0x240001f8
 8000870:	240001b8 	.word	0x240001b8

08000874 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b087      	sub	sp, #28
 8000878:	af02      	add	r7, sp, #8
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
 8000880:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <UTIL_LCD_DrawHLine+0x64>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	2b02      	cmp	r3, #2
 8000888:	d118      	bne.n	80008bc <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <UTIL_LCD_DrawHLine+0x68>)
 800088c:	689c      	ldr	r4, [r3, #8]
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <UTIL_LCD_DrawHLine+0x64>)
 8000890:	6918      	ldr	r0, [r3, #16]
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	08db      	lsrs	r3, r3, #3
 8000896:	f003 021f 	and.w	r2, r3, #31
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	0a9b      	lsrs	r3, r3, #10
 800089e:	015b      	lsls	r3, r3, #5
 80008a0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80008a4:	431a      	orrs	r2, r3
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	0cdb      	lsrs	r3, r3, #19
 80008aa:	02db      	lsls	r3, r3, #11
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	4313      	orrs	r3, r2
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	68ba      	ldr	r2, [r7, #8]
 80008b6:	68f9      	ldr	r1, [r7, #12]
 80008b8:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 80008ba:	e009      	b.n	80008d0 <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <UTIL_LCD_DrawHLine+0x68>)
 80008be:	689c      	ldr	r4, [r3, #8]
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <UTIL_LCD_DrawHLine+0x64>)
 80008c2:	6918      	ldr	r0, [r3, #16]
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	68f9      	ldr	r1, [r7, #12]
 80008ce:	47a0      	blx	r4
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd90      	pop	{r4, r7, pc}
 80008d8:	240001b8 	.word	0x240001b8
 80008dc:	240001f8 	.word	0x240001f8

080008e0 <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b087      	sub	sp, #28
 80008e4:	af02      	add	r7, sp, #8
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
 80008ec:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <UTIL_LCD_DrawVLine+0x64>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d118      	bne.n	8000928 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <UTIL_LCD_DrawVLine+0x68>)
 80008f8:	68dc      	ldr	r4, [r3, #12]
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <UTIL_LCD_DrawVLine+0x64>)
 80008fc:	6918      	ldr	r0, [r3, #16]
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	08db      	lsrs	r3, r3, #3
 8000902:	f003 021f 	and.w	r2, r3, #31
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	0a9b      	lsrs	r3, r3, #10
 800090a:	015b      	lsls	r3, r3, #5
 800090c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000910:	431a      	orrs	r2, r3
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	0cdb      	lsrs	r3, r3, #19
 8000916:	02db      	lsls	r3, r3, #11
 8000918:	b29b      	uxth	r3, r3
 800091a:	4313      	orrs	r3, r2
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	68ba      	ldr	r2, [r7, #8]
 8000922:	68f9      	ldr	r1, [r7, #12]
 8000924:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8000926:	e009      	b.n	800093c <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <UTIL_LCD_DrawVLine+0x68>)
 800092a:	68dc      	ldr	r4, [r3, #12]
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <UTIL_LCD_DrawVLine+0x64>)
 800092e:	6918      	ldr	r0, [r3, #16]
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	68f9      	ldr	r1, [r7, #12]
 800093a:	47a0      	blx	r4
}
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	bd90      	pop	{r4, r7, pc}
 8000944:	240001b8 	.word	0x240001b8
 8000948:	240001f8 	.word	0x240001f8

0800094c <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af02      	add	r7, sp, #8
 8000952:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <UTIL_LCD_Clear+0x28>)
 8000956:	695a      	ldr	r2, [r3, #20]
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <UTIL_LCD_Clear+0x28>)
 800095a:	6999      	ldr	r1, [r3, #24]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	460b      	mov	r3, r1
 8000962:	2100      	movs	r1, #0
 8000964:	2000      	movs	r0, #0
 8000966:	f000 f831 	bl	80009cc <UTIL_LCD_FillRect>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	240001b8 	.word	0x240001b8

08000978 <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	68b9      	ldr	r1, [r7, #8]
 800098c:	68f8      	ldr	r0, [r7, #12]
 800098e:	f7ff ff71 	bl	8000874 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	4413      	add	r3, r2
 8000998:	1e59      	subs	r1, r3, #1
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f7ff ff68 	bl	8000874 <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f7ff ff98 	bl	80008e0 <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	1e58      	subs	r0, r3, #1
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	683a      	ldr	r2, [r7, #0]
 80009bc:	68b9      	ldr	r1, [r7, #8]
 80009be:	f7ff ff8f 	bl	80008e0 <UTIL_LCD_DrawVLine>
}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af02      	add	r7, sp, #8
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
 80009d8:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <UTIL_LCD_FillRect+0x6c>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d11a      	bne.n	8000a18 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <UTIL_LCD_FillRect+0x70>)
 80009e4:	691c      	ldr	r4, [r3, #16]
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <UTIL_LCD_FillRect+0x6c>)
 80009e8:	6918      	ldr	r0, [r3, #16]
 80009ea:	6a3b      	ldr	r3, [r7, #32]
 80009ec:	08db      	lsrs	r3, r3, #3
 80009ee:	f003 021f 	and.w	r2, r3, #31
 80009f2:	6a3b      	ldr	r3, [r7, #32]
 80009f4:	0a9b      	lsrs	r3, r3, #10
 80009f6:	015b      	lsls	r3, r3, #5
 80009f8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80009fc:	431a      	orrs	r2, r3
 80009fe:	6a3b      	ldr	r3, [r7, #32]
 8000a00:	0cdb      	lsrs	r3, r3, #19
 8000a02:	02db      	lsls	r3, r3, #11
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	4313      	orrs	r3, r2
 8000a08:	9301      	str	r3, [sp, #4]
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	68f9      	ldr	r1, [r7, #12]
 8000a14:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 8000a16:	e00b      	b.n	8000a30 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <UTIL_LCD_FillRect+0x70>)
 8000a1a:	691c      	ldr	r4, [r3, #16]
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <UTIL_LCD_FillRect+0x6c>)
 8000a1e:	6918      	ldr	r0, [r3, #16]
 8000a20:	6a3b      	ldr	r3, [r7, #32]
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	68f9      	ldr	r1, [r7, #12]
 8000a2e:	47a0      	blx	r4
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd90      	pop	{r4, r7, pc}
 8000a38:	240001b8 	.word	0x240001b8
 8000a3c:	240001f8 	.word	0x240001f8

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <HAL_MspInit+0x74>)
 8000a48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a4c:	4a19      	ldr	r2, [pc, #100]	; (8000ab4 <HAL_MspInit+0x74>)
 8000a4e:	f043 0302 	orr.w	r3, r3, #2
 8000a52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <HAL_MspInit+0x74>)
 8000a58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a5c:	f003 0302 	and.w	r3, r3, #2
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	210f      	movs	r1, #15
 8000a68:	f06f 0001 	mvn.w	r0, #1
 8000a6c:	f002 ffa5 	bl	80039ba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  // Init PE3:
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <HAL_MspInit+0x74>)
 8000a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a76:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <HAL_MspInit+0x74>)
 8000a78:	f043 0310 	orr.w	r3, r3, #16
 8000a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_MspInit+0x74>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <HAL_MspInit+0x78>)
 8000aa6:	f004 ff51 	bl	800594c <HAL_GPIO_Init>

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	3720      	adds	r7, #32
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	58024400 	.word	0x58024400
 8000ab8:	58021000 	.word	0x58021000

08000abc <HAL_TIM_Base_MspInit>:
  /* USER CODE END USART1_MspDeInit 1 */
  }

}
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000acc:	d10e      	bne.n	8000aec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ad0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ad4:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ae0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	58024400 	.word	0x58024400

08000afc <HAL_TIM_MspPostInit>:
  /* USER CODE END TIM2_MspDeInit 1 */
  }

}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b1c:	d11e      	bne.n	8000b5c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <HAL_TIM_MspPostInit+0x68>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b24:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <HAL_TIM_MspPostInit+0x68>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <HAL_TIM_MspPostInit+0x68>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     -----> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	4619      	mov	r1, r3
 8000b56:	4804      	ldr	r0, [pc, #16]	; (8000b68 <HAL_TIM_MspPostInit+0x6c>)
 8000b58:	f004 fef8 	bl	800594c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b5c:	bf00      	nop
 8000b5e:	3720      	adds	r7, #32
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	58024400 	.word	0x58024400
 8000b68:	58020000 	.word	0x58020000

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f002 fdf6 	bl	800378c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ba0:	f00b fd58 	bl	800c654 <xTaskGetSchedulerState>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d001      	beq.n	8000bae <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000baa:	f00b fdbd 	bl	800c728 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
BSP_PB_IRQHandler(BUTTON_USER);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 fe2c 	bl	8001814 <BSP_PB_IRQHandler>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <TIM3_IRQHandler>:
/**
  * @brief  This function handles TIM3 interrupt requests.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TIM3Handle);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <TIM3_IRQHandler+0x10>)
 8000bc6:	f009 fc21 	bl	800a40c <HAL_TIM_IRQHandler>
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	24000164 	.word	0x24000164

08000bd4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UART3Handle);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <USART3_IRQHandler+0x10>)
 8000bda:	f00a fdab 	bl	800b734 <HAL_UART_IRQHandler>
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	240000d0 	.word	0x240000d0

08000be8 <DMA2_Stream1_IRQHandler>:
  * @brief  This function handles DMA2 Stream 1 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  BSP_AUDIO_OUT_IRQHandler(0);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f000 fe23 	bl	8001838 <BSP_AUDIO_OUT_IRQHandler>
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles DMA2 Stream 4 for SAI1B interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <DMA2_Stream4_IRQHandler+0x14>)
 8000bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c02:	4618      	mov	r0, r3
 8000c04:	f003 fc72 	bl	80044ec <HAL_DMA_IRQHandler>
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	240002d8 	.word	0x240002d8

08000c10 <BDMA_Channel1_IRQHandler>:
  * @brief  This function handles BDMA Channel 1 for SAI_PDM interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAI_PDMx_DMAx_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
   BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC);
 8000c14:	2130      	movs	r1, #48	; 0x30
 8000c16:	2001      	movs	r0, #1
 8000c18:	f000 fe22 	bl	8001860 <BSP_AUDIO_IN_IRQHandler>

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <MDMA_IRQHandler>:
/**
  * @brief  Handles MDMA transfer interrupt request.
  * @retval None
  */
void MDMA_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  BSP_SDRAM_IRQHandler(0);
 8000c24:	2000      	movs	r0, #0
 8000c26:	f002 fa0d 	bl	8003044 <BSP_SDRAM_IRQHandler>

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  return 1;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_kill>:

int _kill(int pid, int sig)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c48:	f00c f9f4 	bl	800d034 <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2216      	movs	r2, #22
 8000c50:	601a      	str	r2, [r3, #0]
  return -1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <_exit>:

void _exit (int status)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ffe7 	bl	8000c3e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c70:	e7fe      	b.n	8000c70 <_exit+0x12>
	...

08000c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c7c:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <_sbrk+0x5c>)
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <_sbrk+0x60>)
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <_sbrk+0x64>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <_sbrk+0x68>)
 8000c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d207      	bcs.n	8000cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca4:	f00c f9c6 	bl	800d034 <__errno>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	220c      	movs	r2, #12
 8000cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cb2:	e009      	b.n	8000cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <_sbrk+0x64>)
 8000cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	24080000 	.word	0x24080000
 8000cd4:	00000400 	.word	0x00000400
 8000cd8:	24000224 	.word	0x24000224
 8000cdc:	24001590 	.word	0x24001590

08000ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b37      	ldr	r3, [pc, #220]	; (8000dc4 <SystemInit+0xe4>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cea:	4a36      	ldr	r2, [pc, #216]	; (8000dc4 <SystemInit+0xe4>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cf4:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <SystemInit+0xe8>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f003 030f 	and.w	r3, r3, #15
 8000cfc:	2b06      	cmp	r3, #6
 8000cfe:	d807      	bhi.n	8000d10 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d00:	4b31      	ldr	r3, [pc, #196]	; (8000dc8 <SystemInit+0xe8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f023 030f 	bic.w	r3, r3, #15
 8000d08:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <SystemInit+0xe8>)
 8000d0a:	f043 0307 	orr.w	r3, r3, #7
 8000d0e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d10:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <SystemInit+0xec>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a2d      	ldr	r2, [pc, #180]	; (8000dcc <SystemInit+0xec>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <SystemInit+0xec>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d22:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <SystemInit+0xec>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4929      	ldr	r1, [pc, #164]	; (8000dcc <SystemInit+0xec>)
 8000d28:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <SystemInit+0xf0>)
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d2e:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <SystemInit+0xe8>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d007      	beq.n	8000d4a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d3a:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <SystemInit+0xe8>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f023 030f 	bic.w	r3, r3, #15
 8000d42:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <SystemInit+0xe8>)
 8000d44:	f043 0307 	orr.w	r3, r3, #7
 8000d48:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d4a:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <SystemInit+0xec>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <SystemInit+0xec>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <SystemInit+0xec>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <SystemInit+0xec>)
 8000d5e:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <SystemInit+0xf4>)
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <SystemInit+0xec>)
 8000d64:	4a1c      	ldr	r2, [pc, #112]	; (8000dd8 <SystemInit+0xf8>)
 8000d66:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <SystemInit+0xec>)
 8000d6a:	4a1c      	ldr	r2, [pc, #112]	; (8000ddc <SystemInit+0xfc>)
 8000d6c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <SystemInit+0xec>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <SystemInit+0xec>)
 8000d76:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <SystemInit+0xfc>)
 8000d78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <SystemInit+0xec>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <SystemInit+0xec>)
 8000d82:	4a16      	ldr	r2, [pc, #88]	; (8000ddc <SystemInit+0xfc>)
 8000d84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <SystemInit+0xec>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <SystemInit+0xec>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <SystemInit+0xec>)
 8000d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <SystemInit+0xec>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <SystemInit+0x100>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <SystemInit+0x104>)
 8000da4:	4013      	ands	r3, r2
 8000da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000daa:	d202      	bcs.n	8000db2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <SystemInit+0x108>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <SystemInit+0x10c>)
 8000db4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000db8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00
 8000dc8:	52002000 	.word	0x52002000
 8000dcc:	58024400 	.word	0x58024400
 8000dd0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000dd4:	02020200 	.word	0x02020200
 8000dd8:	01ff0000 	.word	0x01ff0000
 8000ddc:	01010280 	.word	0x01010280
 8000de0:	5c001000 	.word	0x5c001000
 8000de4:	ffff0000 	.word	0xffff0000
 8000de8:	51008108 	.word	0x51008108
 8000dec:	52004000 	.word	0x52004000

08000df0 <Reset_Handler>:
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e28 <LoopFillZerobss+0xe>
 8000df4:	f7ff ff74 	bl	8000ce0 <SystemInit>
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <LoopFillZerobss+0x12>)
 8000dfa:	490d      	ldr	r1, [pc, #52]	; (8000e30 <LoopFillZerobss+0x16>)
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <LoopFillZerobss+0x1a>)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:
 8000e02:	58d4      	ldr	r4, [r2, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:
 8000e08:	18c4      	adds	r4, r0, r3
 8000e0a:	428c      	cmp	r4, r1
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <LoopFillZerobss+0x1e>)
 8000e10:	4c0a      	ldr	r4, [pc, #40]	; (8000e3c <LoopFillZerobss+0x22>)
 8000e12:	2300      	movs	r3, #0
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:
 8000e1a:	42a2      	cmp	r2, r4
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>
 8000e1e:	f00c f90f 	bl	800d040 <__libc_init_array>
 8000e22:	f7ff faad 	bl	8000380 <main>
 8000e26:	4770      	bx	lr
 8000e28:	24080000 	.word	0x24080000
 8000e2c:	24000000 	.word	0x24000000
 8000e30:	240000b4 	.word	0x240000b4
 8000e34:	0800e380 	.word	0x0800e380
 8000e38:	240000b4 	.word	0x240000b4
 8000e3c:	2400158c 	.word	0x2400158c

08000e40 <ADC3_IRQHandler>:
 8000e40:	e7fe      	b.n	8000e40 <ADC3_IRQHandler>
	...

08000e44 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d103      	bne.n	8000e5c <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8000e54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	e02c      	b.n	8000eb6 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	891a      	ldrh	r2, [r3, #8]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	691a      	ldr	r2, [r3, #16]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	695a      	ldr	r2, [r3, #20]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <FT5336_RegisterBusIO+0x7c>)
 8000e90:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <FT5336_RegisterBusIO+0x80>)
 8000e96:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d004      	beq.n	8000eb0 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4798      	blx	r3
 8000eac:	60f8      	str	r0, [r7, #12]
 8000eae:	e002      	b.n	8000eb6 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eb4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	080012bd 	.word	0x080012bd
 8000ec4:	080012f1 	.word	0x080012f1

08000ec8 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	2201      	movs	r2, #1
 8000edc:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	2205      	movs	r2, #5
 8000ee2:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000eea:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000ef2:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b084      	sub	sp, #16
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10d      	bne.n	8000f34 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f000 f987 	bl	8001232 <FT5336_DisableIT>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4413      	add	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f3e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000f40:	68fb      	ldr	r3, [r7, #12]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b085      	sub	sp, #20
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d103      	bne.n	8000f68 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 8000f68:	68fb      	ldr	r3, [r7, #12]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f103 0218 	add.w	r2, r3, #24
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4610      	mov	r0, r2
 8000f90:	f000 fa25 	bl	80013de <ft5336_radian_value>
 8000f94:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f103 0218 	add.w	r2, r3, #24
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	f000 fa2b 	bl	8001400 <ft5336_offset_left_right>
 8000faa:	4602      	mov	r2, r0
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f103 0218 	add.w	r2, r3, #24
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	f000 fa2e 	bl	8001422 <ft5336_offset_up_down>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f103 0218 	add.w	r2, r3, #24
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4610      	mov	r0, r2
 8000fde:	f000 fa31 	bl	8001444 <ft5336_disatnce_left_right>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f103 0218 	add.w	r2, r3, #24
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	f000 fa34 	bl	8001466 <ft5336_distance_up_down>
 8000ffe:	4602      	mov	r2, r0
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f103 0218 	add.w	r2, r3, #24
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4619      	mov	r1, r3
 8001014:	4610      	mov	r0, r2
 8001016:	f000 fa37 	bl	8001488 <ft5336_distance_zoom>
 800101a:	4602      	mov	r2, r0
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 8001028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800102c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800102e:	68fb      	ldr	r3, [r7, #12]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3318      	adds	r3, #24
 8001046:	6839      	ldr	r1, [r7, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f000 fa3f 	bl	80014cc <ft5336_chip_id>
 800104e:	4603      	mov	r3, r0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f908 	bl	800127c <FT5336_DetectTouch>
 800106c:	4603      	mov	r3, r0
 800106e:	461a      	mov	r2, r3
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f103 0018 	add.w	r0, r3, #24
 800107a:	f107 0208 	add.w	r2, r7, #8
 800107e:	2304      	movs	r3, #4
 8001080:	2103      	movs	r1, #3
 8001082:	f000 f94f 	bl	8001324 <ft5336_read_reg>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 800108c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	e00f      	b.n	80010b4 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8001094:	7a3b      	ldrb	r3, [r7, #8]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800109c:	7a7a      	ldrb	r2, [r7, #9]
 800109e:	431a      	orrs	r2, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 80010a4:	7abb      	ldrb	r3, [r7, #10]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80010ac:	7afa      	ldrb	r2, [r7, #11]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80010b4:	68fb      	ldr	r3, [r7, #12]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b08c      	sub	sp, #48	; 0x30
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 f8d5 	bl	800127c <FT5336_DetectTouch>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f103 0018 	add.w	r0, r3, #24
 80010e0:	f107 0208 	add.w	r2, r7, #8
 80010e4:	231e      	movs	r3, #30
 80010e6:	2103      	movs	r1, #3
 80010e8:	f000 f91c 	bl	8001324 <ft5336_read_reg>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010f8:	e077      	b.n	80011ea <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80010fe:	e071      	b.n	80011e4 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8001100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001102:	4613      	mov	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	3330      	adds	r3, #48	; 0x30
 800110c:	443b      	add	r3, r7
 800110e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8001118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	3301      	adds	r3, #1
 8001124:	3330      	adds	r3, #48	; 0x30
 8001126:	443b      	add	r3, r7
 8001128:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800112c:	ea41 0203 	orr.w	r2, r1, r3
 8001130:	6839      	ldr	r1, [r7, #0]
 8001132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800113a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	3302      	adds	r3, #2
 8001146:	3330      	adds	r3, #48	; 0x30
 8001148:	443b      	add	r3, r7
 800114a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8001154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	3303      	adds	r3, #3
 8001160:	3330      	adds	r3, #48	; 0x30
 8001162:	443b      	add	r3, r7
 8001164:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001168:	4319      	orrs	r1, r3
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800116e:	3206      	adds	r2, #6
 8001170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8001174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001176:	4613      	mov	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	3330      	adds	r3, #48	; 0x30
 8001180:	443b      	add	r3, r7
 8001182:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001186:	099b      	lsrs	r3, r3, #6
 8001188:	b2db      	uxtb	r3, r3
 800118a:	4619      	mov	r1, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001190:	3210      	adds	r2, #16
 8001192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8001196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001198:	4613      	mov	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4413      	add	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	3304      	adds	r3, #4
 80011a2:	3330      	adds	r3, #48	; 0x30
 80011a4:	443b      	add	r3, r7
 80011a6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80011aa:	4619      	mov	r1, r3
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b0:	330a      	adds	r3, #10
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 80011b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011ba:	4613      	mov	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	3305      	adds	r3, #5
 80011c4:	3330      	adds	r3, #48	; 0x30
 80011c6:	443b      	add	r3, r7
 80011c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80011cc:	091b      	lsrs	r3, r3, #4
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	4619      	mov	r1, r3
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d6:	3314      	adds	r3, #20
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 80011de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e0:	3301      	adds	r3, #1
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80011e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d98a      	bls.n	8001100 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 80011ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3730      	adds	r7, #48	; 0x30
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3318      	adds	r3, #24
 8001202:	6839      	ldr	r1, [r7, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f000 f8bb 	bl	8001380 <ft5336_gest_id>
 800120a:	4603      	mov	r3, r0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3318      	adds	r3, #24
 8001220:	2101      	movs	r1, #1
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f941 	bl	80014aa <ft5336_g_mode>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3318      	adds	r3, #24
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f000 f932 	bl	80014aa <ft5336_g_mode>
 8001246:	4603      	mov	r3, r0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3318      	adds	r3, #24
 8001288:	f107 020b 	add.w	r2, r7, #11
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f886 	bl	80013a0 <ft5336_td_status>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	e007      	b.n	80012b2 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 80012a2:	7afb      	ldrb	r3, [r7, #11]
 80012a4:	2b05      	cmp	r3, #5
 80012a6:	d902      	bls.n	80012ae <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	e001      	b.n	80012b2 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 80012ae:	7afb      	ldrb	r3, [r7, #11]
 80012b0:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	461a      	mov	r2, r3
 80012c8:	460b      	mov	r3, r1
 80012ca:	72fb      	strb	r3, [r7, #11]
 80012cc:	4613      	mov	r3, r2
 80012ce:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	691c      	ldr	r4, [r3, #16]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	8918      	ldrh	r0, [r3, #8]
 80012dc:	7afb      	ldrb	r3, [r7, #11]
 80012de:	b299      	uxth	r1, r3
 80012e0:	893b      	ldrh	r3, [r7, #8]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	47a0      	blx	r4
 80012e6:	4603      	mov	r3, r0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	371c      	adds	r7, #28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd90      	pop	{r4, r7, pc}

080012f0 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	461a      	mov	r2, r3
 80012fc:	460b      	mov	r3, r1
 80012fe:	72fb      	strb	r3, [r7, #11]
 8001300:	4613      	mov	r3, r2
 8001302:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	68dc      	ldr	r4, [r3, #12]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	8918      	ldrh	r0, [r3, #8]
 8001310:	7afb      	ldrb	r3, [r7, #11]
 8001312:	b299      	uxth	r1, r3
 8001314:	893b      	ldrh	r3, [r7, #8]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	47a0      	blx	r4
 800131a:	4603      	mov	r3, r0
}
 800131c:	4618      	mov	r0, r3
 800131e:	371c      	adds	r7, #28
 8001320:	46bd      	mov	sp, r7
 8001322:	bd90      	pop	{r4, r7, pc}

08001324 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	461a      	mov	r2, r3
 8001330:	460b      	mov	r3, r1
 8001332:	72fb      	strb	r3, [r7, #11]
 8001334:	4613      	mov	r3, r2
 8001336:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	685c      	ldr	r4, [r3, #4]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6898      	ldr	r0, [r3, #8]
 8001340:	893b      	ldrh	r3, [r7, #8]
 8001342:	7af9      	ldrb	r1, [r7, #11]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	47a0      	blx	r4
 8001348:	4603      	mov	r3, r0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}

08001352 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8001352:	b590      	push	{r4, r7, lr}
 8001354:	b085      	sub	sp, #20
 8001356:	af00      	add	r7, sp, #0
 8001358:	60f8      	str	r0, [r7, #12]
 800135a:	607a      	str	r2, [r7, #4]
 800135c:	461a      	mov	r2, r3
 800135e:	460b      	mov	r3, r1
 8001360:	72fb      	strb	r3, [r7, #11]
 8001362:	4613      	mov	r3, r2
 8001364:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681c      	ldr	r4, [r3, #0]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6898      	ldr	r0, [r3, #8]
 800136e:	893b      	ldrh	r3, [r7, #8]
 8001370:	7af9      	ldrb	r1, [r7, #11]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	47a0      	blx	r4
 8001376:	4603      	mov	r3, r0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	bd90      	pop	{r4, r7, pc}

08001380 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800138a:	2301      	movs	r3, #1
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	2101      	movs	r1, #1
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ffc7 	bl	8001324 <ft5336_read_reg>
 8001396:	4603      	mov	r3, r0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 80013aa:	2301      	movs	r3, #1
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	2102      	movs	r1, #2
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ffb7 	bl	8001324 <ft5336_read_reg>
 80013b6:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10a      	bne.n	80013d4 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	781a      	ldrb	r2, [r3, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 80013d4:	68fb      	ldr	r3, [r7, #12]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	460b      	mov	r3, r1
 80013e8:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 80013ea:	1cfa      	adds	r2, r7, #3
 80013ec:	2301      	movs	r3, #1
 80013ee:	2191      	movs	r1, #145	; 0x91
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ffae 	bl	8001352 <ft5336_write_reg>
 80013f6:	4603      	mov	r3, r0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800140c:	1cfa      	adds	r2, r7, #3
 800140e:	2301      	movs	r3, #1
 8001410:	2192      	movs	r1, #146	; 0x92
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ff9d 	bl	8001352 <ft5336_write_reg>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800142e:	1cfa      	adds	r2, r7, #3
 8001430:	2301      	movs	r3, #1
 8001432:	2193      	movs	r1, #147	; 0x93
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff8c 	bl	8001352 <ft5336_write_reg>
 800143a:	4603      	mov	r3, r0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8001450:	1cfa      	adds	r2, r7, #3
 8001452:	2301      	movs	r3, #1
 8001454:	2194      	movs	r1, #148	; 0x94
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff ff7b 	bl	8001352 <ft5336_write_reg>
 800145c:	4603      	mov	r3, r0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	460b      	mov	r3, r1
 8001470:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8001472:	1cfa      	adds	r2, r7, #3
 8001474:	2301      	movs	r3, #1
 8001476:	2195      	movs	r1, #149	; 0x95
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff6a 	bl	8001352 <ft5336_write_reg>
 800147e:	4603      	mov	r3, r0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8001494:	1cfa      	adds	r2, r7, #3
 8001496:	2301      	movs	r3, #1
 8001498:	2196      	movs	r1, #150	; 0x96
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ff59 	bl	8001352 <ft5336_write_reg>
 80014a0:	4603      	mov	r3, r0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	460b      	mov	r3, r1
 80014b4:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 80014b6:	1cfa      	adds	r2, r7, #3
 80014b8:	2301      	movs	r3, #1
 80014ba:	21a4      	movs	r1, #164	; 0xa4
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff48 	bl	8001352 <ft5336_write_reg>
 80014c2:	4603      	mov	r3, r0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 80014d6:	2301      	movs	r3, #1
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	21a8      	movs	r1, #168	; 0xa8
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff21 	bl	8001324 <ft5336_read_reg>
 80014e2:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d107      	bne.n	80014fa <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	781a      	ldrb	r2, [r3, #0]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	781a      	ldrb	r2, [r3, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001512:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f832 	bl	8001584 <MT48LC4M32B2_ClockEnable>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d128      	bne.n	8001578 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 8001526:	2001      	movs	r0, #1
 8001528:	f000 f8e2 	bl	80016f0 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f84a 	bl	80015cc <MT48LC4M32B2_Precharge>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d11c      	bne.n	8001578 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	6819      	ldr	r1, [r3, #0]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	461a      	mov	r2, r3
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f897 	bl	800167c <MT48LC4M32B2_RefreshMode>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d111      	bne.n	8001578 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 8001554:	6839      	ldr	r1, [r7, #0]
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f85c 	bl	8001614 <MT48LC4M32B2_ModeRegConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10a      	bne.n	8001578 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	4619      	mov	r1, r3
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f8ad 	bl	80016c8 <MT48LC4M32B2_RefreshRate>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8001578:	68fb      	ldr	r3, [r7, #12]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MT48LC4M32B2_ClockEnable+0x44>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8001594:	4a0c      	ldr	r2, [pc, #48]	; (80015c8 <MT48LC4M32B2_ClockEnable+0x44>)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MT48LC4M32B2_ClockEnable+0x44>)
 800159c:	2201      	movs	r2, #1
 800159e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MT48LC4M32B2_ClockEnable+0x44>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80015a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015aa:	4907      	ldr	r1, [pc, #28]	; (80015c8 <MT48LC4M32B2_ClockEnable+0x44>)
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f008 fc0d 	bl	8009dcc <HAL_SDRAM_SendCommand>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d002      	beq.n	80015be <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015bc:	e000      	b.n	80015c0 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80015be:	2300      	movs	r3, #0
  }
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	24000228 	.word	0x24000228

080015cc <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <MT48LC4M32B2_Precharge+0x44>)
 80015d8:	2202      	movs	r2, #2
 80015da:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 80015dc:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <MT48LC4M32B2_Precharge+0x44>)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <MT48LC4M32B2_Precharge+0x44>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <MT48LC4M32B2_Precharge+0x44>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80015ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015f2:	4907      	ldr	r1, [pc, #28]	; (8001610 <MT48LC4M32B2_Precharge+0x44>)
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f008 fbe9 	bl	8009dcc <HAL_SDRAM_SendCommand>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001604:	e000      	b.n	8001608 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001606:	2300      	movs	r3, #0
  }
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	24000228 	.word	0x24000228

08001614 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001626:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 800162c:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8001632:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001638:	4313      	orrs	r3, r2
 800163a:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800163e:	2204      	movs	r2, #4
 8001640:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a0c      	ldr	r2, [pc, #48]	; (8001678 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001648:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800164c:	2201      	movs	r2, #1
 800164e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001650:	4a09      	ldr	r2, [pc, #36]	; (8001678 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800165a:	4907      	ldr	r1, [pc, #28]	; (8001678 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f008 fbb5 	bl	8009dcc <HAL_SDRAM_SendCommand>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 8001668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800166c:	e000      	b.n	8001670 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800166e:	2300      	movs	r3, #0
  }
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	24000228 	.word	0x24000228

0800167c <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8001688:	4a0e      	ldr	r2, [pc, #56]	; (80016c4 <MT48LC4M32B2_RefreshMode+0x48>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800168e:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <MT48LC4M32B2_RefreshMode+0x48>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MT48LC4M32B2_RefreshMode+0x48>)
 8001696:	2208      	movs	r2, #8
 8001698:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <MT48LC4M32B2_RefreshMode+0x48>)
 800169c:	2200      	movs	r2, #0
 800169e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80016a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a4:	4907      	ldr	r1, [pc, #28]	; (80016c4 <MT48LC4M32B2_RefreshMode+0x48>)
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f008 fb90 	bl	8009dcc <HAL_SDRAM_SendCommand>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d002      	beq.n	80016b8 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016b6:	e000      	b.n	80016ba <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80016b8:	2300      	movs	r3, #0
  }
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	24000228 	.word	0x24000228

080016c8 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80016d2:	6839      	ldr	r1, [r7, #0]
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f008 fbae 	bl	8009e36 <HAL_SDRAM_ProgramRefreshRate>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016e4:	e000      	b.n	80016e8 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80016e6:	2300      	movs	r3, #0
  }
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80016f8:	f002 f85c 	bl	80037b4 <HAL_GetTick>
 80016fc:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80016fe:	bf00      	nop
 8001700:	f002 f858 	bl	80037b4 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	429a      	cmp	r2, r3
 800170e:	d8f7      	bhi.n	8001700 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001726:	2300      	movs	r3, #0
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10f      	bne.n	8001750 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
 8001730:	4b26      	ldr	r3, [pc, #152]	; (80017cc <BSP_LED_Init+0xb0>)
 8001732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001736:	4a25      	ldr	r2, [pc, #148]	; (80017cc <BSP_LED_Init+0xb0>)
 8001738:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800173c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001740:	4b22      	ldr	r3, [pc, #136]	; (80017cc <BSP_LED_Init+0xb0>)
 8001742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	e015      	b.n	800177c <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d10f      	bne.n	8001776 <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
 8001756:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <BSP_LED_Init+0xb0>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175c:	4a1b      	ldr	r2, [pc, #108]	; (80017cc <BSP_LED_Init+0xb0>)
 800175e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001762:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001766:	4b19      	ldr	r3, [pc, #100]	; (80017cc <BSP_LED_Init+0xb0>)
 8001768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	e002      	b.n	800177c <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001776:	f06f 0301 	mvn.w	r3, #1
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <BSP_LED_Init+0xb4>)
 8001780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001784:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	2301      	movs	r3, #1
 8001788:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <BSP_LED_Init+0xb8>)
 8001796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179a:	f107 0210 	add.w	r2, r7, #16
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f004 f8d3 	bl	800594c <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <BSP_LED_Init+0xb8>)
 80017aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <BSP_LED_Init+0xb4>)
 80017b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	2201      	movs	r2, #1
 80017ba:	4619      	mov	r1, r3
 80017bc:	f004 fb80 	bl	8005ec0 <HAL_GPIO_WritePin>
  return ret;
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
 80017c2:	4618      	mov	r0, r3
 80017c4:	3728      	adds	r7, #40	; 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	58024400 	.word	0x58024400
 80017d0:	0800e178 	.word	0x0800e178
 80017d4:	24000038 	.word	0x24000038

080017d8 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	4a08      	ldr	r2, [pc, #32]	; (800180c <BSP_LED_On+0x34>)
 80017ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	4a07      	ldr	r2, [pc, #28]	; (8001810 <BSP_LED_On+0x38>)
 80017f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	2200      	movs	r2, #0
 80017fa:	4619      	mov	r1, r3
 80017fc:	f004 fb60 	bl	8005ec0 <HAL_GPIO_WritePin>
  return ret;
 8001800:	68fb      	ldr	r3, [r7, #12]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	24000038 	.word	0x24000038
 8001810:	0800e178 	.word	0x0800e178

08001814 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	4a04      	ldr	r2, [pc, #16]	; (8001834 <BSP_PB_IRQHandler+0x20>)
 8001824:	4413      	add	r3, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f004 f860 	bl	80058ec <HAL_EXTI_IRQHandler>
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	24000238 	.word	0x24000238

08001838 <BSP_AUDIO_OUT_IRQHandler>:
  * @brief  This function handles Audio Out DMA interrupt requests.
  * @param  Instance Audio OUT instance
  * @retval None
  */
void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if (Instance == 0U)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d105      	bne.n	8001852 <BSP_AUDIO_OUT_IRQHandler+0x1a>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8001846:	4b05      	ldr	r3, [pc, #20]	; (800185c <BSP_AUDIO_OUT_IRQHandler+0x24>)
 8001848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800184c:	4618      	mov	r0, r3
 800184e:	f002 fe4d 	bl	80044ec <HAL_DMA_IRQHandler>
  }
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	24000240 	.word	0x24000240

08001860 <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC1
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC2
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]

  if ((InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC) || (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC))
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	2b30      	cmp	r3, #48	; 0x30
 800186e:	d002      	beq.n	8001876 <BSP_AUDIO_IN_IRQHandler+0x16>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d105      	bne.n	8001882 <BSP_AUDIO_IN_IRQHandler+0x22>
  {
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <BSP_AUDIO_IN_IRQHandler+0x2c>)
 8001878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800187c:	4618      	mov	r0, r3
 800187e:	f002 fe35 	bl	80044ec <HAL_DMA_IRQHandler>
  }

}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	240002d8 	.word	0x240002d8

08001890 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <BSP_I2C4_Init+0x64>)
 800189c:	4a16      	ldr	r2, [pc, #88]	; (80018f8 <BSP_I2C4_Init+0x68>)
 800189e:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 80018a0:	4b16      	ldr	r3, [pc, #88]	; (80018fc <BSP_I2C4_Init+0x6c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d11f      	bne.n	80018e8 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <BSP_I2C4_Init+0x6c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	4a13      	ldr	r2, [pc, #76]	; (80018fc <BSP_I2C4_Init+0x6c>)
 80018b0:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80018b2:	4810      	ldr	r0, [pc, #64]	; (80018f4 <BSP_I2C4_Init+0x64>)
 80018b4:	f004 fe20 	bl	80064f8 <HAL_I2C_GetState>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d114      	bne.n	80018e8 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 80018be:	480d      	ldr	r0, [pc, #52]	; (80018f4 <BSP_I2C4_Init+0x64>)
 80018c0:	f000 fb60 	bl	8001f84 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80018c4:	f006 feb8 	bl	8008638 <HAL_RCC_GetPCLK2Freq>
 80018c8:	4603      	mov	r3, r0
 80018ca:	490d      	ldr	r1, [pc, #52]	; (8001900 <BSP_I2C4_Init+0x70>)
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 f8e3 	bl	8001a98 <I2C_GetTiming>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4619      	mov	r1, r3
 80018d6:	4807      	ldr	r0, [pc, #28]	; (80018f4 <BSP_I2C4_Init+0x64>)
 80018d8:	f000 f838 	bl	800194c <MX_I2C4_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80018e2:	f06f 0307 	mvn.w	r3, #7
 80018e6:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 80018e8:	687b      	ldr	r3, [r7, #4]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	24000d78 	.word	0x24000d78
 80018f8:	58001c00 	.word	0x58001c00
 80018fc:	24000370 	.word	0x24000370
 8001900:	000186a0 	.word	0x000186a0

08001904 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800190e:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <BSP_I2C4_DeInit+0x40>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	3b01      	subs	r3, #1
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <BSP_I2C4_DeInit+0x40>)
 8001916:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <BSP_I2C4_DeInit+0x40>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10b      	bne.n	8001938 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8001920:	4809      	ldr	r0, [pc, #36]	; (8001948 <BSP_I2C4_DeInit+0x44>)
 8001922:	f000 fb9b 	bl	800205c <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8001926:	4808      	ldr	r0, [pc, #32]	; (8001948 <BSP_I2C4_DeInit+0x44>)
 8001928:	f004 fb74 	bl	8006014 <HAL_I2C_DeInit>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8001932:	f06f 0307 	mvn.w	r3, #7
 8001936:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8001938:	687b      	ldr	r3, [r7, #4]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	24000370 	.word	0x24000370
 8001948:	24000d78 	.word	0x24000d78

0800194c <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f004 fab2 	bl	8005ef4 <HAL_I2C_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	73fb      	strb	r3, [r7, #15]
 800199a:	e014      	b.n	80019c6 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f005 f87a 	bl	8006a9c <HAL_I2CEx_ConfigAnalogFilter>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	73fb      	strb	r3, [r7, #15]
 80019b2:	e008      	b.n	80019c6 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80019b4:	2100      	movs	r1, #0
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f005 f8bb 	bl	8006b32 <HAL_I2CEx_ConfigDigitalFilter>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af02      	add	r7, sp, #8
 80019d6:	60ba      	str	r2, [r7, #8]
 80019d8:	461a      	mov	r2, r3
 80019da:	4603      	mov	r3, r0
 80019dc:	81fb      	strh	r3, [r7, #14]
 80019de:	460b      	mov	r3, r1
 80019e0:	81bb      	strh	r3, [r7, #12]
 80019e2:	4613      	mov	r3, r2
 80019e4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80019e6:	89b9      	ldrh	r1, [r7, #12]
 80019e8:	89f8      	ldrh	r0, [r7, #14]
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f000 fb57 	bl	80020a4 <I2C4_WriteReg>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d102      	bne.n	8001a02 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	e00c      	b.n	8001a1c <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8001a02:	4809      	ldr	r0, [pc, #36]	; (8001a28 <BSP_I2C4_WriteReg+0x58>)
 8001a04:	f004 fd86 	bl	8006514 <HAL_I2C_GetError>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d103      	bne.n	8001a16 <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001a0e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	e002      	b.n	8001a1c <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001a16:	f06f 0303 	mvn.w	r3, #3
 8001a1a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8001a1c:	697b      	ldr	r3, [r7, #20]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	24000d78 	.word	0x24000d78

08001a2c <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	60ba      	str	r2, [r7, #8]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4603      	mov	r3, r0
 8001a38:	81fb      	strh	r3, [r7, #14]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	81bb      	strh	r3, [r7, #12]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8001a42:	89b9      	ldrh	r1, [r7, #12]
 8001a44:	89f8      	ldrh	r0, [r7, #14]
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f000 fb4f 	bl	80020f0 <I2C4_ReadReg>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e00c      	b.n	8001a78 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8001a5e:	4809      	ldr	r0, [pc, #36]	; (8001a84 <BSP_I2C4_ReadReg+0x58>)
 8001a60:	f004 fd58 	bl	8006514 <HAL_I2C_GetError>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d103      	bne.n	8001a72 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001a6a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	e002      	b.n	8001a78 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001a72:	f06f 0303 	mvn.w	r3, #3
 8001a76:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8001a78:	697b      	ldr	r3, [r7, #20]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	24000d78 	.word	0x24000d78

08001a88 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8001a8c:	f001 fe92 	bl	80037b4 <HAL_GetTick>
 8001a90:	4603      	mov	r3, r0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d06b      	beq.n	8001b84 <I2C_GetTiming+0xec>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d068      	beq.n	8001b84 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	e060      	b.n	8001b7a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8001ab8:	4a35      	ldr	r2, [pc, #212]	; (8001b90 <I2C_GetTiming+0xf8>)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	212c      	movs	r1, #44	; 0x2c
 8001abe:	fb01 f303 	mul.w	r3, r1, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d352      	bcc.n	8001b74 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8001ace:	4a30      	ldr	r2, [pc, #192]	; (8001b90 <I2C_GetTiming+0xf8>)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	212c      	movs	r1, #44	; 0x2c
 8001ad4:	fb01 f303 	mul.w	r3, r1, r3
 8001ad8:	4413      	add	r3, r2
 8001ada:	3308      	adds	r3, #8
 8001adc:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d847      	bhi.n	8001b74 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8001ae4:	6939      	ldr	r1, [r7, #16]
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f856 	bl	8001b98 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8001aec:	6939      	ldr	r1, [r7, #16]
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f940 	bl	8001d74 <I2C_Compute_SCLL_SCLH>
 8001af4:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b7f      	cmp	r3, #127	; 0x7f
 8001afa:	d842      	bhi.n	8001b82 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001afc:	4925      	ldr	r1, [pc, #148]	; (8001b94 <I2C_GetTiming+0xfc>)
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8001b0e:	4821      	ldr	r0, [pc, #132]	; (8001b94 <I2C_GetTiming+0xfc>)
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4403      	add	r3, r0
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	051b      	lsls	r3, r3, #20
 8001b22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001b26:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8001b28:	481a      	ldr	r0, [pc, #104]	; (8001b94 <I2C_GetTiming+0xfc>)
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4403      	add	r3, r0
 8001b36:	3308      	adds	r3, #8
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	041b      	lsls	r3, r3, #16
 8001b3c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8001b40:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8001b42:	4814      	ldr	r0, [pc, #80]	; (8001b94 <I2C_GetTiming+0xfc>)
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4403      	add	r3, r0
 8001b50:	330c      	adds	r3, #12
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8001b58:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8001b5a:	480e      	ldr	r0, [pc, #56]	; (8001b94 <I2C_GetTiming+0xfc>)
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4403      	add	r3, r0
 8001b68:	3310      	adds	r3, #16
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001b6e:	430b      	orrs	r3, r1
 8001b70:	617b      	str	r3, [r7, #20]
        }
        break;
 8001b72:	e006      	b.n	8001b82 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	3301      	adds	r3, #1
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d99b      	bls.n	8001ab8 <I2C_GetTiming+0x20>
 8001b80:	e000      	b.n	8001b84 <I2C_GetTiming+0xec>
        break;
 8001b82:	bf00      	nop
      }
    }
  }

  return ret;
 8001b84:	697b      	ldr	r3, [r7, #20]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	0800e180 	.word	0x0800e180
 8001b94:	24000374 	.word	0x24000374

08001b98 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b08f      	sub	sp, #60	; 0x3c
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8001ba2:	2310      	movs	r3, #16
 8001ba4:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	085a      	lsrs	r2, r3, #1
 8001baa:	4b6e      	ldr	r3, [pc, #440]	; (8001d64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8001bac:	4413      	add	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bb4:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8001bb6:	2332      	movs	r3, #50	; 0x32
 8001bb8:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8001bba:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001bbe:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001bc0:	4a69      	ldr	r2, [pc, #420]	; (8001d68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	212c      	movs	r1, #44	; 0x2c
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3324      	adds	r3, #36	; 0x24
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	4a65      	ldr	r2, [pc, #404]	; (8001d68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	212c      	movs	r1, #44	; 0x2c
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	330c      	adds	r3, #12
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8001be4:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001be6:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8001be8:	495f      	ldr	r1, [pc, #380]	; (8001d68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	202c      	movs	r0, #44	; 0x2c
 8001bee:	fb00 f303 	mul.w	r3, r0, r3
 8001bf2:	440b      	add	r3, r1
 8001bf4:	3328      	adds	r3, #40	; 0x28
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3303      	adds	r3, #3
 8001bfa:	69f9      	ldr	r1, [r7, #28]
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001c04:	4a58      	ldr	r2, [pc, #352]	; (8001d68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	212c      	movs	r1, #44	; 0x2c
 8001c0a:	fb01 f303 	mul.w	r3, r1, r3
 8001c0e:	4413      	add	r3, r2
 8001c10:	3310      	adds	r3, #16
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	4a54      	ldr	r2, [pc, #336]	; (8001d68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	212c      	movs	r1, #44	; 0x2c
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	3320      	adds	r3, #32
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8001c28:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001c2a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8001c2c:	494e      	ldr	r1, [pc, #312]	; (8001d68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	202c      	movs	r0, #44	; 0x2c
 8001c32:	fb00 f303 	mul.w	r3, r0, r3
 8001c36:	440b      	add	r3, r1
 8001c38:	3328      	adds	r3, #40	; 0x28
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	69f9      	ldr	r1, [r7, #28]
 8001c40:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8001c48:	4a47      	ldr	r2, [pc, #284]	; (8001d68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	212c      	movs	r1, #44	; 0x2c
 8001c4e:	fb01 f303 	mul.w	r3, r1, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	3320      	adds	r3, #32
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	4a43      	ldr	r2, [pc, #268]	; (8001d68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	212c      	movs	r1, #44	; 0x2c
 8001c60:	fb01 f303 	mul.w	r3, r1, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	3314      	adds	r3, #20
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4403      	add	r3, r0
 8001c6c:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8001c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	dc01      	bgt.n	8001c78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8001c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	dc01      	bgt.n	8001c82 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c86:	e062      	b.n	8001d4e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8c:	e059      	b.n	8001d42 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	3301      	adds	r3, #1
 8001c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c94:	3201      	adds	r2, #1
 8001c96:	fb03 f202 	mul.w	r2, r3, r2
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ca0:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d348      	bcc.n	8001d3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
 8001cae:	e042      	b.n	8001d36 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8001cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	6a3a      	ldr	r2, [r7, #32]
 8001cb6:	fb03 f202 	mul.w	r2, r3, r2
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8001cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d332      	bcc.n	8001d30 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8001cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d82e      	bhi.n	8001d30 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8001cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d02a      	beq.n	8001d30 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8001cda:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	4924      	ldr	r1, [pc, #144]	; (8001d70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cec:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8001cee:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	491f      	ldr	r1, [pc, #124]	; (8001d70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3304      	adds	r3, #4
 8001d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d02:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8001d04:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4919      	ldr	r1, [pc, #100]	; (8001d70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	440b      	add	r3, r1
 8001d14:	3308      	adds	r3, #8
 8001d16:	6a3a      	ldr	r2, [r7, #32]
 8001d18:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8001d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1c:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3301      	adds	r3, #1
 8001d24:	4a11      	ldr	r2, [pc, #68]	; (8001d6c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001d26:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8001d28:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8001d2e:	d812      	bhi.n	8001d56 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8001d30:	6a3b      	ldr	r3, [r7, #32]
 8001d32:	3301      	adds	r3, #1
 8001d34:	623b      	str	r3, [r7, #32]
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	2b0f      	cmp	r3, #15
 8001d3a:	d9b9      	bls.n	8001cb0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	3301      	adds	r3, #1
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	2b0f      	cmp	r3, #15
 8001d46:	d9a2      	bls.n	8001c8e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8001d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d50:	2b0f      	cmp	r3, #15
 8001d52:	d999      	bls.n	8001c88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8001d54:	e000      	b.n	8001d58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8001d56:	bf00      	nop
          }
        }
      }
    }
  }
}
 8001d58:	373c      	adds	r7, #60	; 0x3c
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	3b9aca00 	.word	0x3b9aca00
 8001d68:	0800e180 	.word	0x0800e180
 8001d6c:	24000d74 	.word	0x24000d74
 8001d70:	24000374 	.word	0x24000374

08001d74 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b093      	sub	sp, #76	; 0x4c
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d82:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	085a      	lsrs	r2, r3, #1
 8001d88:	4b7a      	ldr	r3, [pc, #488]	; (8001f74 <I2C_Compute_SCLL_SCLH+0x200>)
 8001d8a:	4413      	add	r3, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8001d94:	4a78      	ldr	r2, [pc, #480]	; (8001f78 <I2C_Compute_SCLL_SCLH+0x204>)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	212c      	movs	r1, #44	; 0x2c
 8001d9a:	fb01 f303 	mul.w	r3, r1, r3
 8001d9e:	4413      	add	r3, r2
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	085a      	lsrs	r2, r3, #1
 8001da4:	4b73      	ldr	r3, [pc, #460]	; (8001f74 <I2C_Compute_SCLL_SCLH+0x200>)
 8001da6:	4413      	add	r3, r2
 8001da8:	4973      	ldr	r1, [pc, #460]	; (8001f78 <I2C_Compute_SCLL_SCLH+0x204>)
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	202c      	movs	r0, #44	; 0x2c
 8001dae:	fb00 f202 	mul.w	r2, r0, r2
 8001db2:	440a      	add	r2, r1
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8001dbc:	2332      	movs	r3, #50	; 0x32
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8001dc0:	4a6d      	ldr	r2, [pc, #436]	; (8001f78 <I2C_Compute_SCLL_SCLH+0x204>)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	212c      	movs	r1, #44	; 0x2c
 8001dc6:	fb01 f303 	mul.w	r3, r1, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	3328      	adds	r3, #40	; 0x28
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd2:	fb02 f303 	mul.w	r3, r2, r3
 8001dd6:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8001dd8:	4a67      	ldr	r2, [pc, #412]	; (8001f78 <I2C_Compute_SCLL_SCLH+0x204>)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	212c      	movs	r1, #44	; 0x2c
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	3304      	adds	r3, #4
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a62      	ldr	r2, [pc, #392]	; (8001f74 <I2C_Compute_SCLL_SCLH+0x200>)
 8001dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dee:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8001df0:	4a61      	ldr	r2, [pc, #388]	; (8001f78 <I2C_Compute_SCLL_SCLH+0x204>)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	212c      	movs	r1, #44	; 0x2c
 8001df6:	fb01 f303 	mul.w	r3, r1, r3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3308      	adds	r3, #8
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a5c      	ldr	r2, [pc, #368]	; (8001f74 <I2C_Compute_SCLL_SCLH+0x200>)
 8001e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e06:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8001e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0a:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e10:	e0a3      	b.n	8001f5a <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8001e12:	495a      	ldr	r1, [pc, #360]	; (8001f7c <I2C_Compute_SCLL_SCLH+0x208>)
 8001e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e30:	e08c      	b.n	8001f4c <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8001e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	441a      	add	r2, r3
 8001e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	6979      	ldr	r1, [r7, #20]
 8001e3e:	fb03 f101 	mul.w	r1, r3, r1
 8001e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	440b      	add	r3, r1
 8001e48:	4413      	add	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8001e4c:	4a4a      	ldr	r2, [pc, #296]	; (8001f78 <I2C_Compute_SCLL_SCLH+0x204>)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	212c      	movs	r1, #44	; 0x2c
 8001e52:	fb01 f303 	mul.w	r3, r1, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	3318      	adds	r3, #24
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d971      	bls.n	8001f46 <I2C_Compute_SCLL_SCLH+0x1d2>
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	1ad2      	subs	r2, r2, r3
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d268      	bcs.n	8001f46 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e78:	e062      	b.n	8001f40 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8001e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	441a      	add	r2, r3
 8001e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e82:	3301      	adds	r3, #1
 8001e84:	6979      	ldr	r1, [r7, #20]
 8001e86:	fb03 f101 	mul.w	r1, r3, r1
 8001e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	440b      	add	r3, r1
 8001e90:	4413      	add	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	441a      	add	r2, r3
 8001e9a:	4937      	ldr	r1, [pc, #220]	; (8001f78 <I2C_Compute_SCLL_SCLH+0x204>)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	202c      	movs	r0, #44	; 0x2c
 8001ea0:	fb00 f303 	mul.w	r3, r0, r3
 8001ea4:	440b      	add	r3, r1
 8001ea6:	3320      	adds	r3, #32
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	441a      	add	r2, r3
 8001eac:	4932      	ldr	r1, [pc, #200]	; (8001f78 <I2C_Compute_SCLL_SCLH+0x204>)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	202c      	movs	r0, #44	; 0x2c
 8001eb2:	fb00 f303 	mul.w	r3, r0, r3
 8001eb6:	440b      	add	r3, r1
 8001eb8:	3324      	adds	r3, #36	; 0x24
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d338      	bcc.n	8001f3a <I2C_Compute_SCLL_SCLH+0x1c6>
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d834      	bhi.n	8001f3a <I2C_Compute_SCLL_SCLH+0x1c6>
 8001ed0:	4a29      	ldr	r2, [pc, #164]	; (8001f78 <I2C_Compute_SCLL_SCLH+0x204>)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	212c      	movs	r1, #44	; 0x2c
 8001ed6:	fb01 f303 	mul.w	r3, r1, r3
 8001eda:	4413      	add	r3, r2
 8001edc:	331c      	adds	r3, #28
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d329      	bcc.n	8001f3a <I2C_Compute_SCLL_SCLH+0x1c6>
 8001ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d225      	bcs.n	8001f3a <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8001ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	da02      	bge.n	8001f02 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8001efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efe:	425b      	negs	r3, r3
 8001f00:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8001f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d917      	bls.n	8001f3a <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8001f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0c:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8001f0e:	491b      	ldr	r1, [pc, #108]	; (8001f7c <I2C_Compute_SCLL_SCLH+0x208>)
 8001f10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	3310      	adds	r3, #16
 8001f1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f20:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8001f22:	4916      	ldr	r1, [pc, #88]	; (8001f7c <I2C_Compute_SCLL_SCLH+0x208>)
 8001f24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	330c      	adds	r3, #12
 8001f32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f34:	601a      	str	r2, [r3, #0]
              ret = count;
 8001f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f38:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8001f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f42:	2bff      	cmp	r3, #255	; 0xff
 8001f44:	d999      	bls.n	8001e7a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8001f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f48:	3301      	adds	r3, #1
 8001f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f4e:	2bff      	cmp	r3, #255	; 0xff
 8001f50:	f67f af6f 	bls.w	8001e32 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f56:	3301      	adds	r3, #1
 8001f58:	637b      	str	r3, [r7, #52]	; 0x34
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <I2C_Compute_SCLL_SCLH+0x20c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f60:	429a      	cmp	r2, r3
 8001f62:	f4ff af56 	bcc.w	8001e12 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8001f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	374c      	adds	r7, #76	; 0x4c
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	3b9aca00 	.word	0x3b9aca00
 8001f78:	0800e180 	.word	0x0800e180
 8001f7c:	24000374 	.word	0x24000374
 8001f80:	24000d74 	.word	0x24000d74

08001f84 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8001f8c:	4b31      	ldr	r3, [pc, #196]	; (8002054 <I2C4_MspInit+0xd0>)
 8001f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f92:	4a30      	ldr	r2, [pc, #192]	; (8002054 <I2C4_MspInit+0xd0>)
 8001f94:	f043 0308 	orr.w	r3, r3, #8
 8001f98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f9c:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <I2C4_MspInit+0xd0>)
 8001f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8001faa:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <I2C4_MspInit+0xd0>)
 8001fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb0:	4a28      	ldr	r2, [pc, #160]	; (8002054 <I2C4_MspInit+0xd0>)
 8001fb2:	f043 0308 	orr.w	r3, r3, #8
 8001fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fba:	4b26      	ldr	r3, [pc, #152]	; (8002054 <I2C4_MspInit+0xd0>)
 8001fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8001fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fcc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8001fce:	2312      	movs	r3, #18
 8001fd0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8001fda:	2304      	movs	r3, #4
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	481c      	ldr	r0, [pc, #112]	; (8002058 <I2C4_MspInit+0xd4>)
 8001fe6:	f003 fcb1 	bl	800594c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8001fea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fee:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8001ff0:	2312      	movs	r3, #18
 8001ff2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	4619      	mov	r1, r3
 8002006:	4814      	ldr	r0, [pc, #80]	; (8002058 <I2C4_MspInit+0xd4>)
 8002008:	f003 fca0 	bl	800594c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <I2C4_MspInit+0xd0>)
 800200e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002012:	4a10      	ldr	r2, [pc, #64]	; (8002054 <I2C4_MspInit+0xd0>)
 8002014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002018:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800201c:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <I2C4_MspInit+0xd0>)
 800201e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <I2C4_MspInit+0xd0>)
 800202c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002030:	4a08      	ldr	r2, [pc, #32]	; (8002054 <I2C4_MspInit+0xd0>)
 8002032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002036:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <I2C4_MspInit+0xd0>)
 800203c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002040:	4a04      	ldr	r2, [pc, #16]	; (8002054 <I2C4_MspInit+0xd0>)
 8002042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002046:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800204a:	bf00      	nop
 800204c:	3728      	adds	r7, #40	; 0x28
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	58024400 	.word	0x58024400
 8002058:	58020c00 	.word	0x58020c00

0800205c <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8002064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002068:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4619      	mov	r1, r3
 800206e:	480b      	ldr	r0, [pc, #44]	; (800209c <I2C4_MspDeInit+0x40>)
 8002070:	f003 fe1c 	bl	8005cac <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8002074:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002078:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4619      	mov	r1, r3
 800207e:	4807      	ldr	r0, [pc, #28]	; (800209c <I2C4_MspDeInit+0x40>)
 8002080:	f003 fe14 	bl	8005cac <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <I2C4_MspDeInit+0x44>)
 8002086:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800208a:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <I2C4_MspDeInit+0x44>)
 800208c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002090:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 8002094:	bf00      	nop
 8002096:	3720      	adds	r7, #32
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	58020c00 	.word	0x58020c00
 80020a0:	58024400 	.word	0x58024400

080020a4 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af04      	add	r7, sp, #16
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	4603      	mov	r3, r0
 80020ae:	81fb      	strh	r3, [r7, #14]
 80020b0:	460b      	mov	r3, r1
 80020b2:	81bb      	strh	r3, [r7, #12]
 80020b4:	4613      	mov	r3, r2
 80020b6:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80020b8:	8978      	ldrh	r0, [r7, #10]
 80020ba:	89ba      	ldrh	r2, [r7, #12]
 80020bc:	89f9      	ldrh	r1, [r7, #14]
 80020be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c2:	9302      	str	r3, [sp, #8]
 80020c4:	8b3b      	ldrh	r3, [r7, #24]
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	4603      	mov	r3, r0
 80020ce:	4807      	ldr	r0, [pc, #28]	; (80020ec <I2C4_WriteReg+0x48>)
 80020d0:	f003 ffe4 	bl	800609c <HAL_I2C_Mem_Write>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80020da:	2300      	movs	r3, #0
 80020dc:	e001      	b.n	80020e2 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80020de:	f06f 0307 	mvn.w	r3, #7
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	24000d78 	.word	0x24000d78

080020f0 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af04      	add	r7, sp, #16
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	4603      	mov	r3, r0
 80020fa:	81fb      	strh	r3, [r7, #14]
 80020fc:	460b      	mov	r3, r1
 80020fe:	81bb      	strh	r3, [r7, #12]
 8002100:	4613      	mov	r3, r2
 8002102:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002104:	8978      	ldrh	r0, [r7, #10]
 8002106:	89ba      	ldrh	r2, [r7, #12]
 8002108:	89f9      	ldrh	r1, [r7, #14]
 800210a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210e:	9302      	str	r3, [sp, #8]
 8002110:	8b3b      	ldrh	r3, [r7, #24]
 8002112:	9301      	str	r3, [sp, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	4603      	mov	r3, r0
 800211a:	4807      	ldr	r0, [pc, #28]	; (8002138 <I2C4_ReadReg+0x48>)
 800211c:	f004 f8d2 	bl	80062c4 <HAL_I2C_Mem_Read>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002126:	2300      	movs	r3, #0
 8002128:	e001      	b.n	800212e <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800212a:	f06f 0307 	mvn.w	r3, #7
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	24000d78 	.word	0x24000d78

0800213c <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af02      	add	r7, sp, #8
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8002146:	f44f 7388 	mov.w	r3, #272	; 0x110
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002150:	2200      	movs	r2, #0
 8002152:	6839      	ldr	r1, [r7, #0]
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f805 	bl	8002164 <BSP_LCD_InitEx>
 800215a:	4603      	mov	r3, r0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b09e      	sub	sp, #120	; 0x78
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002172:	2300      	movs	r3, #0
 8002174:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	66fb      	str	r3, [r7, #108]	; 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d808      	bhi.n	8002192 <BSP_LCD_InitEx+0x2e>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d105      	bne.n	8002192 <BSP_LCD_InitEx+0x2e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d006      	beq.n	800219a <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002192:	f06f 0301 	mvn.w	r3, #1
 8002196:	677b      	str	r3, [r7, #116]	; 0x74
 8002198:	e0a8      	b.n	80022ec <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d109      	bne.n	80021b4 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 80021a0:	2302      	movs	r3, #2
 80021a2:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
 80021a4:	4a54      	ldr	r2, [pc, #336]	; (80022f8 <BSP_LCD_InitEx+0x194>)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	015b      	lsls	r3, r3, #5
 80021aa:	4413      	add	r3, r2
 80021ac:	3310      	adds	r3, #16
 80021ae:	2202      	movs	r2, #2
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	e008      	b.n	80021c6 <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 80021b4:	2300      	movs	r3, #0
 80021b6:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
 80021b8:	4a4f      	ldr	r2, [pc, #316]	; (80022f8 <BSP_LCD_InitEx+0x194>)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	015b      	lsls	r3, r3, #5
 80021be:	4413      	add	r3, r2
 80021c0:	3310      	adds	r3, #16
 80021c2:	2204      	movs	r2, #4
 80021c4:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 80021c6:	4a4c      	ldr	r2, [pc, #304]	; (80022f8 <BSP_LCD_InitEx+0x194>)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	015b      	lsls	r3, r3, #5
 80021cc:	4413      	add	r3, r2
 80021ce:	330c      	adds	r3, #12
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 80021d4:	4a48      	ldr	r2, [pc, #288]	; (80022f8 <BSP_LCD_InitEx+0x194>)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	015b      	lsls	r3, r3, #5
 80021da:	4413      	add	r3, r2
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 80021e0:	4a45      	ldr	r2, [pc, #276]	; (80022f8 <BSP_LCD_InitEx+0x194>)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	015b      	lsls	r3, r3, #5
 80021e6:	4413      	add	r3, r2
 80021e8:	3304      	adds	r3, #4
 80021ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80021ee:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 80021f0:	4b42      	ldr	r3, [pc, #264]	; (80022fc <BSP_LCD_InitEx+0x198>)
 80021f2:	4a43      	ldr	r2, [pc, #268]	; (8002300 <BSP_LCD_InitEx+0x19c>)
 80021f4:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 80021f6:	4b43      	ldr	r3, [pc, #268]	; (8002304 <BSP_LCD_InitEx+0x1a0>)
 80021f8:	4a43      	ldr	r2, [pc, #268]	; (8002308 <BSP_LCD_InitEx+0x1a4>)
 80021fa:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 80021fc:	483f      	ldr	r0, [pc, #252]	; (80022fc <BSP_LCD_InitEx+0x198>)
 80021fe:	f000 fd1b 	bl	8002c38 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 8002202:	4840      	ldr	r0, [pc, #256]	; (8002304 <BSP_LCD_InitEx+0x1a0>)
 8002204:	f000 fde4 	bl	8002dd0 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
 8002208:	4b40      	ldr	r3, [pc, #256]	; (800230c <BSP_LCD_InitEx+0x1a8>)
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 800220c:	4b40      	ldr	r3, [pc, #256]	; (8002310 <BSP_LCD_InitEx+0x1ac>)
 800220e:	63fb      	str	r3, [r7, #60]	; 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 8002210:	2370      	movs	r3, #112	; 0x70
 8002212:	86bb      	strh	r3, [r7, #52]	; 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 8002214:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002218:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800221c:	4611      	mov	r1, r2
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fe10 	bl	8000e44 <FT5336_RegisterBusIO>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	da03      	bge.n	8002232 <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800222a:	f06f 0304 	mvn.w	r3, #4
 800222e:	677b      	str	r3, [r7, #116]	; 0x74
 8002230:	e02b      	b.n	800228a <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 8002232:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002236:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe fefb 	bl	8001038 <FT5336_ReadID>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	da03      	bge.n	8002250 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002248:	f06f 0304 	mvn.w	r3, #4
 800224c:	677b      	str	r3, [r7, #116]	; 0x74
 800224e:	e01c      	b.n	800228a <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
 8002250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002252:	2b51      	cmp	r3, #81	; 0x51
 8002254:	d003      	beq.n	800225e <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002256:	f06f 0306 	mvn.w	r3, #6
 800225a:	677b      	str	r3, [r7, #116]	; 0x74
 800225c:	e015      	b.n	800228a <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800225e:	4827      	ldr	r0, [pc, #156]	; (80022fc <BSP_LCD_InitEx+0x198>)
 8002260:	f000 f8e8 	bl	8002434 <MX_LTDC_ClockConfig>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800226a:	f06f 0303 	mvn.w	r3, #3
 800226e:	677b      	str	r3, [r7, #116]	; 0x74
 8002270:	e00b      	b.n	800228a <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8002272:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002276:	6839      	ldr	r1, [r7, #0]
 8002278:	4820      	ldr	r0, [pc, #128]	; (80022fc <BSP_LCD_InitEx+0x198>)
 800227a:	f000 f84d 	bl	8002318 <MX_LTDC_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d002      	beq.n	800228a <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002284:	f06f 0303 	mvn.w	r3, #3
 8002288:	677b      	str	r3, [r7, #116]	; 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
 800228a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800228c:	2b00      	cmp	r3, #0
 800228e:	d12d      	bne.n	80022ec <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8002290:	2000      	movs	r0, #0
 8002292:	f000 fe2f 	bl	8002ef4 <BSP_SDRAM_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 800229c:	f06f 0303 	mvn.w	r3, #3
 80022a0:	e025      	b.n	80022ee <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
 80022ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022b2:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
 80022b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
 80022b8:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80022be:	f107 0314 	add.w	r3, r7, #20
 80022c2:	461a      	mov	r2, r3
 80022c4:	2100      	movs	r1, #0
 80022c6:	480d      	ldr	r0, [pc, #52]	; (80022fc <BSP_LCD_InitEx+0x198>)
 80022c8:	f000 f872 	bl	80023b0 <MX_LTDC_ConfigLayer>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80022d2:	f06f 0303 	mvn.w	r3, #3
 80022d6:	677b      	str	r3, [r7, #116]	; 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
 80022d8:	480e      	ldr	r0, [pc, #56]	; (8002314 <BSP_LCD_InitEx+0x1b0>)
 80022da:	f000 fde1 	bl	8002ea0 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 80022de:	4a06      	ldr	r2, [pc, #24]	; (80022f8 <BSP_LCD_InitEx+0x194>)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	015b      	lsls	r3, r3, #5
 80022e4:	4413      	add	r3, r2
 80022e6:	3318      	adds	r3, #24
 80022e8:	2201      	movs	r2, #1
 80022ea:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 80022ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3778      	adds	r7, #120	; 0x78
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	24000f28 	.word	0x24000f28
 80022fc:	24000e80 	.word	0x24000e80
 8002300:	50001000 	.word	0x50001000
 8002304:	24000e18 	.word	0x24000e18
 8002308:	52001000 	.word	0x52001000
 800230c:	08001891 	.word	0x08001891
 8002310:	08001a2d 	.word	0x08001a2d
 8002314:	24000dcc 	.word	0x24000dcc

08002318 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4a21      	ldr	r2, [pc, #132]	; (80023ac <MX_LTDC_Init+0x94>)
 8002328:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2228      	movs	r2, #40	; 0x28
 8002346:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	222a      	movs	r2, #42	; 0x2a
 800234c:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f103 0235 	add.w	r2, r3, #53	; 0x35
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2209      	movs	r2, #9
 8002366:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	220b      	movs	r2, #11
 800236c:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f103 020b 	add.w	r2, r3, #11
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f103 020d 	add.w	r2, r3, #13
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	631a      	str	r2, [r3, #48]	; 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	22ff      	movs	r2, #255	; 0xff
 8002386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	22ff      	movs	r2, #255	; 0xff
 800238e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	22ff      	movs	r2, #255	; 0xff
 8002396:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f004 fc16 	bl	8006bcc <HAL_LTDC_Init>
 80023a0:	4603      	mov	r3, r0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	50001000 	.word	0x50001000

080023b0 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b092      	sub	sp, #72	; 0x48
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
 80023da:	23ff      	movs	r3, #255	; 0xff
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80023e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023e6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80023e8:	2307      	movs	r3, #7
 80023ea:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	4619      	mov	r1, r3
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f004 fcab 	bl	8006d80 <HAL_LTDC_ConfigLayer>
 800242a:	4603      	mov	r3, r0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3748      	adds	r7, #72	; 0x48
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b0b2      	sub	sp, #200	; 0xc8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 800243c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8002448:	2305      	movs	r3, #5
 800244a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 800244c:	23a0      	movs	r3, #160	; 0xa0
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002450:	2302      	movs	r3, #2
 8002452:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002454:	2302      	movs	r3, #2
 8002456:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 8002458:	2353      	movs	r3, #83	; 0x53
 800245a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	64fb      	str	r3, [r7, #76]	; 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002464:	f107 0308 	add.w	r3, r7, #8
 8002468:	4618      	mov	r0, r3
 800246a:	f006 f8fb 	bl	8008664 <HAL_RCCEx_PeriphCLKConfig>
 800246e:	4603      	mov	r3, r0
}
 8002470:	4618      	mov	r0, r3
 8002472:	37c8      	adds	r7, #200	; 0xc8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800248c:	f06f 0301 	mvn.w	r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	e007      	b.n	80024a4 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8002494:	4a07      	ldr	r2, [pc, #28]	; (80024b4 <BSP_LCD_GetPixelFormat+0x3c>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	015b      	lsls	r3, r3, #5
 800249a:	4413      	add	r3, r2
 800249c:	330c      	adds	r3, #12
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80024a4:	68fb      	ldr	r3, [r7, #12]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	24000f28 	.word	0x24000f28

080024b8 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80024cc:	f06f 0301 	mvn.w	r3, #1
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	e006      	b.n	80024e2 <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 80024d4:	4a06      	ldr	r2, [pc, #24]	; (80024f0 <BSP_LCD_SetActiveLayer+0x38>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	015b      	lsls	r3, r3, #5
 80024da:	4413      	add	r3, r2
 80024dc:	3308      	adds	r3, #8
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80024e2:	68fb      	ldr	r3, [r7, #12]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	24000f28 	.word	0x24000f28

080024f4 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002508:	f06f 0301 	mvn.w	r3, #1
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	e006      	b.n	800251e <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8002510:	4a06      	ldr	r2, [pc, #24]	; (800252c <BSP_LCD_GetXSize+0x38>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	015b      	lsls	r3, r3, #5
 8002516:	4413      	add	r3, r2
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800251e:	68fb      	ldr	r3, [r7, #12]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	24000f28 	.word	0x24000f28

08002530 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002544:	f06f 0301 	mvn.w	r3, #1
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	e007      	b.n	800255c <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 800254c:	4a07      	ldr	r2, [pc, #28]	; (800256c <BSP_LCD_GetYSize+0x3c>)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	015b      	lsls	r3, r3, #5
 8002552:	4413      	add	r3, r2
 8002554:	3304      	adds	r3, #4
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800255c:	68fb      	ldr	r3, [r7, #12]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	24000f28 	.word	0x24000f28

08002570 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08e      	sub	sp, #56	; 0x38
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	330a      	adds	r3, #10
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	330b      	adds	r3, #11
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	441a      	add	r2, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	330c      	adds	r3, #12
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	041b      	lsls	r3, r3, #16
 800259c:	441a      	add	r2, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	330d      	adds	r3, #13
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	061b      	lsls	r3, r3, #24
 80025a6:	4413      	add	r3, r2
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	3312      	adds	r3, #18
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	3313      	adds	r3, #19
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	441a      	add	r2, r3
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	3314      	adds	r3, #20
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	041b      	lsls	r3, r3, #16
 80025c4:	441a      	add	r2, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	3315      	adds	r3, #21
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	061b      	lsls	r3, r3, #24
 80025ce:	4413      	add	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	3316      	adds	r3, #22
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	3317      	adds	r3, #23
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	021b      	lsls	r3, r3, #8
 80025e2:	441a      	add	r2, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	3318      	adds	r3, #24
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	041b      	lsls	r3, r3, #16
 80025ec:	441a      	add	r2, r3
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	3319      	adds	r3, #25
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	061b      	lsls	r3, r3, #24
 80025f6:	4413      	add	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	331c      	adds	r3, #28
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	331d      	adds	r3, #29
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	4413      	add	r3, r2
 800260c:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800260e:	4a37      	ldr	r2, [pc, #220]	; (80026ec <BSP_LCD_DrawBitmap+0x17c>)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	015b      	lsls	r3, r3, #5
 8002614:	4413      	add	r3, r2
 8002616:	3308      	adds	r3, #8
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a35      	ldr	r2, [pc, #212]	; (80026f0 <BSP_LCD_DrawBitmap+0x180>)
 800261c:	2134      	movs	r1, #52	; 0x34
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	335c      	adds	r3, #92	; 0x5c
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4930      	ldr	r1, [pc, #192]	; (80026ec <BSP_LCD_DrawBitmap+0x17c>)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	015b      	lsls	r3, r3, #5
 800262e:	440b      	add	r3, r1
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	fb03 f101 	mul.w	r1, r3, r1
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	440b      	add	r3, r1
 800263c:	482b      	ldr	r0, [pc, #172]	; (80026ec <BSP_LCD_DrawBitmap+0x17c>)
 800263e:	68f9      	ldr	r1, [r7, #12]
 8002640:	0149      	lsls	r1, r1, #5
 8002642:	4401      	add	r1, r0
 8002644:	3110      	adds	r1, #16
 8002646:	6809      	ldr	r1, [r1, #0]
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4413      	add	r3, r2
 800264e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	3b20      	subs	r3, #32
 8002654:	2b07      	cmp	r3, #7
 8002656:	d802      	bhi.n	800265e <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8002658:	2300      	movs	r3, #0
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
 800265c:	e008      	b.n	8002670 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	3b10      	subs	r3, #16
 8002662:	2b07      	cmp	r3, #7
 8002664:	d802      	bhi.n	800266c <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 8002666:	2302      	movs	r3, #2
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
 800266a:	e001      	b.n	8002670 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 800266c:	2301      	movs	r3, #1
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	3b01      	subs	r3, #1
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	08d2      	lsrs	r2, r2, #3
 800267e:	fb03 f202 	mul.w	r2, r3, r2
 8002682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002684:	4413      	add	r3, r2
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	4413      	add	r3, r2
 800268a:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 800268c:	2300      	movs	r3, #0
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002690:	e023      	b.n	80026da <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 8002692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	6a39      	ldr	r1, [r7, #32]
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 fa77 	bl	8002b90 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 80026a2:	4a12      	ldr	r2, [pc, #72]	; (80026ec <BSP_LCD_DrawBitmap+0x17c>)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	015b      	lsls	r3, r3, #5
 80026a8:	4413      	add	r3, r2
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	490f      	ldr	r1, [pc, #60]	; (80026ec <BSP_LCD_DrawBitmap+0x17c>)
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	0152      	lsls	r2, r2, #5
 80026b2:	440a      	add	r2, r1
 80026b4:	3210      	adds	r2, #16
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	fb02 f303 	mul.w	r3, r2, r3
 80026bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026be:	4413      	add	r3, r2
 80026c0:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	08db      	lsrs	r3, r3, #3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	fb02 f303 	mul.w	r3, r2, r3
 80026cc:	425b      	negs	r3, r3
 80026ce:	6a3a      	ldr	r2, [r7, #32]
 80026d0:	4413      	add	r3, r2
 80026d2:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 80026d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d6:	3301      	adds	r3, #1
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d3d7      	bcc.n	8002692 <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
 80026e2:	69fb      	ldr	r3, [r7, #28]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3730      	adds	r7, #48	; 0x30
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	24000f28 	.word	0x24000f28
 80026f0:	24000e80 	.word	0x24000e80

080026f4 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	e032      	b.n	8002772 <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	e028      	b.n	8002764 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	3301      	adds	r3, #1
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	431a      	orrs	r2, r3
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	3302      	adds	r3, #2
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	041b      	lsls	r3, r3, #16
 800272a:	431a      	orrs	r2, r3
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	3303      	adds	r3, #3
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	061b      	lsls	r3, r3, #24
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	18d1      	adds	r1, r2, r3
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	441a      	add	r2, r3
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f95e 	bl	8002a08 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
 800274c:	4a0d      	ldr	r2, [pc, #52]	; (8002784 <BSP_LCD_FillRGBRect+0x90>)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	015b      	lsls	r3, r3, #5
 8002752:	4413      	add	r3, r2
 8002754:	3310      	adds	r3, #16
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4413      	add	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	3301      	adds	r3, #1
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002768:	429a      	cmp	r2, r3
 800276a:	d3d2      	bcc.n	8002712 <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	3301      	adds	r3, #1
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002776:	429a      	cmp	r2, r3
 8002778:	d3c8      	bcc.n	800270c <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3720      	adds	r7, #32
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	24000f28 	.word	0x24000f28

08002788 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af02      	add	r7, sp, #8
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002796:	4a21      	ldr	r2, [pc, #132]	; (800281c <BSP_LCD_DrawHLine+0x94>)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	015b      	lsls	r3, r3, #5
 800279c:	4413      	add	r3, r2
 800279e:	3308      	adds	r3, #8
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a1f      	ldr	r2, [pc, #124]	; (8002820 <BSP_LCD_DrawHLine+0x98>)
 80027a4:	2134      	movs	r1, #52	; 0x34
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	335c      	adds	r3, #92	; 0x5c
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	491a      	ldr	r1, [pc, #104]	; (800281c <BSP_LCD_DrawHLine+0x94>)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	015b      	lsls	r3, r3, #5
 80027b6:	440b      	add	r3, r1
 80027b8:	3310      	adds	r3, #16
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4817      	ldr	r0, [pc, #92]	; (800281c <BSP_LCD_DrawHLine+0x94>)
 80027be:	68f9      	ldr	r1, [r7, #12]
 80027c0:	0149      	lsls	r1, r1, #5
 80027c2:	4401      	add	r1, r0
 80027c4:	6809      	ldr	r1, [r1, #0]
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	fb01 f000 	mul.w	r0, r1, r0
 80027cc:	68b9      	ldr	r1, [r7, #8]
 80027ce:	4401      	add	r1, r0
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	441a      	add	r2, r3
 80027de:	490f      	ldr	r1, [pc, #60]	; (800281c <BSP_LCD_DrawHLine+0x94>)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	015b      	lsls	r3, r3, #5
 80027e4:	440b      	add	r3, r1
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d907      	bls.n	80027fc <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 80027ec:	4a0b      	ldr	r2, [pc, #44]	; (800281c <BSP_LCD_DrawHLine+0x94>)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	015b      	lsls	r3, r3, #5
 80027f2:	4413      	add	r3, r2
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 80027fc:	6979      	ldr	r1, [r7, #20]
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	2300      	movs	r3, #0
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	2301      	movs	r3, #1
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f956 	bl	8002abc <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	24000f28 	.word	0x24000f28
 8002820:	24000e80 	.word	0x24000e80

08002824 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002832:	4a24      	ldr	r2, [pc, #144]	; (80028c4 <BSP_LCD_DrawVLine+0xa0>)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	015b      	lsls	r3, r3, #5
 8002838:	4413      	add	r3, r2
 800283a:	3308      	adds	r3, #8
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a22      	ldr	r2, [pc, #136]	; (80028c8 <BSP_LCD_DrawVLine+0xa4>)
 8002840:	2134      	movs	r1, #52	; 0x34
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	335c      	adds	r3, #92	; 0x5c
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	491d      	ldr	r1, [pc, #116]	; (80028c4 <BSP_LCD_DrawVLine+0xa0>)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	015b      	lsls	r3, r3, #5
 8002852:	440b      	add	r3, r1
 8002854:	3310      	adds	r3, #16
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	481a      	ldr	r0, [pc, #104]	; (80028c4 <BSP_LCD_DrawVLine+0xa0>)
 800285a:	68f9      	ldr	r1, [r7, #12]
 800285c:	0149      	lsls	r1, r1, #5
 800285e:	4401      	add	r1, r0
 8002860:	6809      	ldr	r1, [r1, #0]
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	fb01 f000 	mul.w	r0, r1, r0
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	4401      	add	r1, r0
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	4413      	add	r3, r2
 8002872:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	441a      	add	r2, r3
 800287a:	4912      	ldr	r1, [pc, #72]	; (80028c4 <BSP_LCD_DrawVLine+0xa0>)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	015b      	lsls	r3, r3, #5
 8002880:	440b      	add	r3, r1
 8002882:	3304      	adds	r3, #4
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d908      	bls.n	800289c <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 800288a:	4a0e      	ldr	r2, [pc, #56]	; (80028c4 <BSP_LCD_DrawVLine+0xa0>)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	015b      	lsls	r3, r3, #5
 8002890:	4413      	add	r3, r2
 8002892:	3304      	adds	r3, #4
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 800289c:	6979      	ldr	r1, [r7, #20]
 800289e:	4a09      	ldr	r2, [pc, #36]	; (80028c4 <BSP_LCD_DrawVLine+0xa0>)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	015b      	lsls	r3, r3, #5
 80028a4:	4413      	add	r3, r2
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	6a3a      	ldr	r2, [r7, #32]
 80028ac:	9201      	str	r2, [sp, #4]
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	2201      	movs	r2, #1
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f901 	bl	8002abc <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	24000f28 	.word	0x24000f28
 80028c8:	24000e80 	.word	0x24000e80

080028cc <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80028da:	4a1b      	ldr	r2, [pc, #108]	; (8002948 <BSP_LCD_FillRect+0x7c>)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	015b      	lsls	r3, r3, #5
 80028e0:	4413      	add	r3, r2
 80028e2:	3308      	adds	r3, #8
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a19      	ldr	r2, [pc, #100]	; (800294c <BSP_LCD_FillRect+0x80>)
 80028e8:	2134      	movs	r1, #52	; 0x34
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	4413      	add	r3, r2
 80028f0:	335c      	adds	r3, #92	; 0x5c
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4914      	ldr	r1, [pc, #80]	; (8002948 <BSP_LCD_FillRect+0x7c>)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	015b      	lsls	r3, r3, #5
 80028fa:	440b      	add	r3, r1
 80028fc:	3310      	adds	r3, #16
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4811      	ldr	r0, [pc, #68]	; (8002948 <BSP_LCD_FillRect+0x7c>)
 8002902:	68f9      	ldr	r1, [r7, #12]
 8002904:	0149      	lsls	r1, r1, #5
 8002906:	4401      	add	r1, r0
 8002908:	6809      	ldr	r1, [r1, #0]
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	fb01 f000 	mul.w	r0, r1, r0
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	4401      	add	r1, r0
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	4413      	add	r3, r2
 800291a:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 800291c:	6979      	ldr	r1, [r7, #20]
 800291e:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <BSP_LCD_FillRect+0x7c>)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	015b      	lsls	r3, r3, #5
 8002924:	4413      	add	r3, r2
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292e:	9201      	str	r2, [sp, #4]
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f8c0 	bl	8002abc <LL_FillBuffer>

  return BSP_ERROR_NONE;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	24000f28 	.word	0x24000f28
 800294c:	24000e80 	.word	0x24000e80

08002950 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800295e:	4a28      	ldr	r2, [pc, #160]	; (8002a00 <BSP_LCD_ReadPixel+0xb0>)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	015b      	lsls	r3, r3, #5
 8002964:	4413      	add	r3, r2
 8002966:	3308      	adds	r3, #8
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a26      	ldr	r2, [pc, #152]	; (8002a04 <BSP_LCD_ReadPixel+0xb4>)
 800296c:	2134      	movs	r1, #52	; 0x34
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	3348      	adds	r3, #72	; 0x48
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d11c      	bne.n	80029b6 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 800297c:	4a20      	ldr	r2, [pc, #128]	; (8002a00 <BSP_LCD_ReadPixel+0xb0>)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	015b      	lsls	r3, r3, #5
 8002982:	4413      	add	r3, r2
 8002984:	3308      	adds	r3, #8
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a1e      	ldr	r2, [pc, #120]	; (8002a04 <BSP_LCD_ReadPixel+0xb4>)
 800298a:	2134      	movs	r1, #52	; 0x34
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	4413      	add	r3, r2
 8002992:	335c      	adds	r3, #92	; 0x5c
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	491a      	ldr	r1, [pc, #104]	; (8002a00 <BSP_LCD_ReadPixel+0xb0>)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	015b      	lsls	r3, r3, #5
 800299c:	440b      	add	r3, r1
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	fb03 f101 	mul.w	r1, r3, r1
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	440b      	add	r3, r1
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e01d      	b.n	80029f2 <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 80029b6:	4a12      	ldr	r2, [pc, #72]	; (8002a00 <BSP_LCD_ReadPixel+0xb0>)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	015b      	lsls	r3, r3, #5
 80029bc:	4413      	add	r3, r2
 80029be:	3308      	adds	r3, #8
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a10      	ldr	r2, [pc, #64]	; (8002a04 <BSP_LCD_ReadPixel+0xb4>)
 80029c4:	2134      	movs	r1, #52	; 0x34
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	335c      	adds	r3, #92	; 0x5c
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	490b      	ldr	r1, [pc, #44]	; (8002a00 <BSP_LCD_ReadPixel+0xb0>)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	015b      	lsls	r3, r3, #5
 80029d6:	440b      	add	r3, r1
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	fb03 f101 	mul.w	r1, r3, r1
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	440b      	add	r3, r1
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	24000f28 	.word	0x24000f28
 8002a04:	24000e80 	.word	0x24000e80

08002a08 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002a16:	4a27      	ldr	r2, [pc, #156]	; (8002ab4 <BSP_LCD_WritePixel+0xac>)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	015b      	lsls	r3, r3, #5
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3308      	adds	r3, #8
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a25      	ldr	r2, [pc, #148]	; (8002ab8 <BSP_LCD_WritePixel+0xb0>)
 8002a24:	2134      	movs	r1, #52	; 0x34
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3348      	adds	r3, #72	; 0x48
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d11c      	bne.n	8002a6e <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 8002a34:	4a1f      	ldr	r2, [pc, #124]	; (8002ab4 <BSP_LCD_WritePixel+0xac>)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	015b      	lsls	r3, r3, #5
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3308      	adds	r3, #8
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a1d      	ldr	r2, [pc, #116]	; (8002ab8 <BSP_LCD_WritePixel+0xb0>)
 8002a42:	2134      	movs	r1, #52	; 0x34
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	4413      	add	r3, r2
 8002a4a:	335c      	adds	r3, #92	; 0x5c
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4919      	ldr	r1, [pc, #100]	; (8002ab4 <BSP_LCD_WritePixel+0xac>)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	015b      	lsls	r3, r3, #5
 8002a54:	440b      	add	r3, r1
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	fb03 f101 	mul.w	r1, r3, r1
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	440b      	add	r3, r1
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	461a      	mov	r2, r3
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	e01b      	b.n	8002aa6 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 8002a6e:	4a11      	ldr	r2, [pc, #68]	; (8002ab4 <BSP_LCD_WritePixel+0xac>)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	015b      	lsls	r3, r3, #5
 8002a74:	4413      	add	r3, r2
 8002a76:	3308      	adds	r3, #8
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a0f      	ldr	r2, [pc, #60]	; (8002ab8 <BSP_LCD_WritePixel+0xb0>)
 8002a7c:	2134      	movs	r1, #52	; 0x34
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	335c      	adds	r3, #92	; 0x5c
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	490a      	ldr	r1, [pc, #40]	; (8002ab4 <BSP_LCD_WritePixel+0xac>)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	015b      	lsls	r3, r3, #5
 8002a8e:	440b      	add	r3, r1
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	fb03 f101 	mul.w	r1, r3, r1
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	440b      	add	r3, r1
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	4413      	add	r3, r2
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	b292      	uxth	r2, r2
 8002aa4:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	24000f28 	.word	0x24000f28
 8002ab8:	24000e80 	.word	0x24000e80

08002abc <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 8002ace:	4a2d      	ldr	r2, [pc, #180]	; (8002b84 <LL_FillBuffer+0xc8>)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	015b      	lsls	r3, r3, #5
 8002ad4:	4413      	add	r3, r2
 8002ad6:	330c      	adds	r3, #12
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d129      	bne.n	8002b32 <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8002ade:	2302      	movs	r3, #2
 8002ae0:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	0adb      	lsrs	r3, r3, #11
 8002ae6:	f003 021f 	and.w	r2, r3, #31
 8002aea:	4613      	mov	r3, r2
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	4413      	add	r3, r2
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	3317      	adds	r3, #23
 8002af6:	099b      	lsrs	r3, r3, #6
 8002af8:	0419      	lsls	r1, r3, #16
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b02:	4613      	mov	r3, r2
 8002b04:	01db      	lsls	r3, r3, #7
 8002b06:	4413      	add	r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3321      	adds	r3, #33	; 0x21
 8002b0e:	099b      	lsrs	r3, r3, #6
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	4319      	orrs	r1, r3
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	f003 021f 	and.w	r2, r3, #31
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	4413      	add	r3, r2
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	3317      	adds	r3, #23
 8002b26:	099b      	lsrs	r3, r3, #6
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b2e:	613b      	str	r3, [r7, #16]
    break;
 8002b30:	e002      	b.n	8002b38 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
    break;
 8002b36:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <LL_FillBuffer+0xcc>)
 8002b3a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b3e:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8002b40:	4a11      	ldr	r2, [pc, #68]	; (8002b88 <LL_FillBuffer+0xcc>)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8002b46:	4a10      	ldr	r2, [pc, #64]	; (8002b88 <LL_FillBuffer+0xcc>)
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <LL_FillBuffer+0xcc>)
 8002b4e:	4a0f      	ldr	r2, [pc, #60]	; (8002b8c <LL_FillBuffer+0xd0>)
 8002b50:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8002b52:	480d      	ldr	r0, [pc, #52]	; (8002b88 <LL_FillBuffer+0xcc>)
 8002b54:	f002 fbf4 	bl	8005340 <HAL_DMA2D_Init>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10e      	bne.n	8002b7c <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6939      	ldr	r1, [r7, #16]
 8002b68:	4807      	ldr	r0, [pc, #28]	; (8002b88 <LL_FillBuffer+0xcc>)
 8002b6a:	f002 fc57 	bl	800541c <HAL_DMA2D_Start>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d103      	bne.n	8002b7c <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8002b74:	2132      	movs	r1, #50	; 0x32
 8002b76:	4804      	ldr	r0, [pc, #16]	; (8002b88 <LL_FillBuffer+0xcc>)
 8002b78:	f002 fc7b 	bl	8005472 <HAL_DMA2D_PollForTransfer>
    }
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	24000f28 	.word	0x24000f28
 8002b88:	24000e18 	.word	0x24000e18
 8002b8c:	52001000 	.word	0x52001000

08002b90 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 8002b9e:	4a23      	ldr	r2, [pc, #140]	; (8002c2c <LL_ConvertLineToRGB+0x9c>)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	015b      	lsls	r3, r3, #5
 8002ba4:	4413      	add	r3, r2
 8002ba6:	330c      	adds	r3, #12
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d102      	bne.n	8002bb4 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8002bae:	2302      	movs	r3, #2
 8002bb0:	617b      	str	r3, [r7, #20]
    break;
 8002bb2:	e002      	b.n	8002bba <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
    break;
 8002bb8:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8002bba:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002bbc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bc0:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8002bc2:	4a1b      	ldr	r2, [pc, #108]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 8002bc8:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002bce:	4b18      	ldr	r3, [pc, #96]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8002bd4:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002bd6:	22ff      	movs	r2, #255	; 0xff
 8002bd8:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8002bda:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8002be0:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 8002be6:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002be8:	4a12      	ldr	r2, [pc, #72]	; (8002c34 <LL_ConvertLineToRGB+0xa4>)
 8002bea:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8002bec:	4810      	ldr	r0, [pc, #64]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002bee:	f002 fba7 	bl	8005340 <HAL_DMA2D_Init>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d115      	bne.n	8002c24 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	480d      	ldr	r0, [pc, #52]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002bfc:	f002 fd22 	bl	8005644 <HAL_DMA2D_ConfigLayer>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10e      	bne.n	8002c24 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8002c06:	68b9      	ldr	r1, [r7, #8]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	4807      	ldr	r0, [pc, #28]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002c12:	f002 fc03 	bl	800541c <HAL_DMA2D_Start>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d103      	bne.n	8002c24 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8002c1c:	2132      	movs	r1, #50	; 0x32
 8002c1e:	4804      	ldr	r0, [pc, #16]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002c20:	f002 fc27 	bl	8005472 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002c24:	bf00      	nop
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	24000f28 	.word	0x24000f28
 8002c30:	24000e18 	.word	0x24000e18
 8002c34:	52001000 	.word	0x52001000

08002c38 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08e      	sub	sp, #56	; 0x38
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a5b      	ldr	r2, [pc, #364]	; (8002db4 <LTDC_MspInit+0x17c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	f040 80b0 	bne.w	8002dac <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002c4c:	4b5a      	ldr	r3, [pc, #360]	; (8002db8 <LTDC_MspInit+0x180>)
 8002c4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002c52:	4a59      	ldr	r2, [pc, #356]	; (8002db8 <LTDC_MspInit+0x180>)
 8002c54:	f043 0308 	orr.w	r3, r3, #8
 8002c58:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002c5c:	4b56      	ldr	r3, [pc, #344]	; (8002db8 <LTDC_MspInit+0x180>)
 8002c5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	623b      	str	r3, [r7, #32]
 8002c68:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002c6a:	4b53      	ldr	r3, [pc, #332]	; (8002db8 <LTDC_MspInit+0x180>)
 8002c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c70:	4a51      	ldr	r2, [pc, #324]	; (8002db8 <LTDC_MspInit+0x180>)
 8002c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c7a:	4b4f      	ldr	r3, [pc, #316]	; (8002db8 <LTDC_MspInit+0x180>)
 8002c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002c88:	4b4b      	ldr	r3, [pc, #300]	; (8002db8 <LTDC_MspInit+0x180>)
 8002c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c8e:	4a4a      	ldr	r2, [pc, #296]	; (8002db8 <LTDC_MspInit+0x180>)
 8002c90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c98:	4b47      	ldr	r3, [pc, #284]	; (8002db8 <LTDC_MspInit+0x180>)
 8002c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002ca6:	4b44      	ldr	r3, [pc, #272]	; (8002db8 <LTDC_MspInit+0x180>)
 8002ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cac:	4a42      	ldr	r2, [pc, #264]	; (8002db8 <LTDC_MspInit+0x180>)
 8002cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cb6:	4b40      	ldr	r3, [pc, #256]	; (8002db8 <LTDC_MspInit+0x180>)
 8002cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cc4:	4b3c      	ldr	r3, [pc, #240]	; (8002db8 <LTDC_MspInit+0x180>)
 8002cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cca:	4a3b      	ldr	r2, [pc, #236]	; (8002db8 <LTDC_MspInit+0x180>)
 8002ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cd4:	4b38      	ldr	r3, [pc, #224]	; (8002db8 <LTDC_MspInit+0x180>)
 8002cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ce2:	4b35      	ldr	r3, [pc, #212]	; (8002db8 <LTDC_MspInit+0x180>)
 8002ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce8:	4a33      	ldr	r2, [pc, #204]	; (8002db8 <LTDC_MspInit+0x180>)
 8002cea:	f043 0308 	orr.w	r3, r3, #8
 8002cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cf2:	4b31      	ldr	r3, [pc, #196]	; (8002db8 <LTDC_MspInit+0x180>)
 8002cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 8002d00:	f24d 2303 	movw	r3, #53763	; 0xd203
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d06:	2302      	movs	r3, #2
 8002d08:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002d12:	230e      	movs	r3, #14
 8002d14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4827      	ldr	r0, [pc, #156]	; (8002dbc <LTDC_MspInit+0x184>)
 8002d1e:	f002 fe15 	bl	800594c <HAL_GPIO_Init>

    /* GPIOJ configuration */
    //gpio_init_structure.Pin       = GPIO_PIN_All;
    // GPIOJ Pin 2 je za LED 1!!!! Tu so imeli napako, ker so inicializirali vse pine na portu J
    // kot GPIO_AF14_LTDC. Popravil P.B. UL FRI, 10.12.2022
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | \
 8002d22:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
    								GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
									GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 ;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002d28:	230e      	movs	r3, #14
 8002d2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8002d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d30:	4619      	mov	r1, r3
 8002d32:	4823      	ldr	r0, [pc, #140]	; (8002dc0 <LTDC_MspInit+0x188>)
 8002d34:	f002 fe0a 	bl	800594c <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002d38:	23ff      	movs	r3, #255	; 0xff
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002d3c:	230e      	movs	r3, #14
 8002d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d44:	4619      	mov	r1, r3
 8002d46:	481f      	ldr	r0, [pc, #124]	; (8002dc4 <LTDC_MspInit+0x18c>)
 8002d48:	f002 fe00 	bl	800594c <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 8002d4c:	f240 2302 	movw	r3, #514	; 0x202
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d52:	2302      	movs	r3, #2
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002d5e:	230e      	movs	r3, #14
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d66:	4619      	mov	r1, r3
 8002d68:	4817      	ldr	r0, [pc, #92]	; (8002dc8 <LTDC_MspInit+0x190>)
 8002d6a:	f002 fdef 	bl	800594c <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002d72:	2301      	movs	r3, #1
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4813      	ldr	r0, [pc, #76]	; (8002dcc <LTDC_MspInit+0x194>)
 8002d7e:	f002 fde5 	bl	800594c <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8002d82:	2201      	movs	r2, #1
 8002d84:	2180      	movs	r1, #128	; 0x80
 8002d86:	4811      	ldr	r0, [pc, #68]	; (8002dcc <LTDC_MspInit+0x194>)
 8002d88:	f003 f89a 	bl	8005ec0 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <LTDC_MspInit+0x180>)
 8002d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d92:	4a09      	ldr	r2, [pc, #36]	; (8002db8 <LTDC_MspInit+0x180>)
 8002d94:	f043 0308 	orr.w	r3, r3, #8
 8002d98:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <LTDC_MspInit+0x180>)
 8002d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002da2:	4a05      	ldr	r2, [pc, #20]	; (8002db8 <LTDC_MspInit+0x180>)
 8002da4:	f023 0308 	bic.w	r3, r3, #8
 8002da8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 8002dac:	bf00      	nop
 8002dae:	3738      	adds	r7, #56	; 0x38
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	50001000 	.word	0x50001000
 8002db8:	58024400 	.word	0x58024400
 8002dbc:	58022000 	.word	0x58022000
 8002dc0:	58022400 	.word	0x58022400
 8002dc4:	58022800 	.word	0x58022800
 8002dc8:	58021c00 	.word	0x58021c00
 8002dcc:	58020c00 	.word	0x58020c00

08002dd0 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a11      	ldr	r2, [pc, #68]	; (8002e24 <DMA2D_MspInit+0x54>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d11a      	bne.n	8002e18 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002de2:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <DMA2D_MspInit+0x58>)
 8002de4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002de8:	4a0f      	ldr	r2, [pc, #60]	; (8002e28 <DMA2D_MspInit+0x58>)
 8002dea:	f043 0310 	orr.w	r3, r3, #16
 8002dee:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002df2:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <DMA2D_MspInit+0x58>)
 8002df4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <DMA2D_MspInit+0x58>)
 8002e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e04:	4a08      	ldr	r2, [pc, #32]	; (8002e28 <DMA2D_MspInit+0x58>)
 8002e06:	f043 0310 	orr.w	r3, r3, #16
 8002e0a:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <DMA2D_MspInit+0x58>)
 8002e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e10:	4a05      	ldr	r2, [pc, #20]	; (8002e28 <DMA2D_MspInit+0x58>)
 8002e12:	f023 0310 	bic.w	r3, r3, #16
 8002e16:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	52001000 	.word	0x52001000
 8002e28:	58024400 	.word	0x58024400

08002e2c <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08a      	sub	sp, #40	; 0x28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002e34:	4b18      	ldr	r3, [pc, #96]	; (8002e98 <TIMx_PWM_MspInit+0x6c>)
 8002e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e3a:	4a17      	ldr	r2, [pc, #92]	; (8002e98 <TIMx_PWM_MspInit+0x6c>)
 8002e3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e44:	4b14      	ldr	r3, [pc, #80]	; (8002e98 <TIMx_PWM_MspInit+0x6c>)
 8002e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
 8002e52:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <TIMx_PWM_MspInit+0x6c>)
 8002e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e58:	4a0f      	ldr	r2, [pc, #60]	; (8002e98 <TIMx_PWM_MspInit+0x6c>)
 8002e5a:	f043 0302 	orr.w	r3, r3, #2
 8002e5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <TIMx_PWM_MspInit+0x6c>)
 8002e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002e70:	2302      	movs	r3, #2
 8002e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 8002e80:	2301      	movs	r3, #1
 8002e82:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 8002e84:	f107 0314 	add.w	r3, r7, #20
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4804      	ldr	r0, [pc, #16]	; (8002e9c <TIMx_PWM_MspInit+0x70>)
 8002e8c:	f002 fd5e 	bl	800594c <HAL_GPIO_Init>
}
 8002e90:	bf00      	nop
 8002e92:	3728      	adds	r7, #40	; 0x28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	58024400 	.word	0x58024400
 8002e9c:	58022800 	.word	0x58022800

08002ea0 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a11      	ldr	r2, [pc, #68]	; (8002ef0 <TIMx_PWM_Init+0x50>)
 8002eac:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f007 f897 	bl	8009fe2 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff ffb9 	bl	8002e2c <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002ec6:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f007 f827 	bl	8009f34 <HAL_TIM_PWM_Init>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40010400 	.word	0x40010400

08002ef4 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8002f06:	f06f 0301 	mvn.w	r3, #1
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	e044      	b.n	8002f98 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2234      	movs	r2, #52	; 0x34
 8002f12:	fb02 f303 	mul.w	r3, r2, r3
 8002f16:	4a23      	ldr	r2, [pc, #140]	; (8002fa4 <BSP_SDRAM_Init+0xb0>)
 8002f18:	4413      	add	r3, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 f8a8 	bl	8003070 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2234      	movs	r2, #52	; 0x34
 8002f24:	fb02 f303 	mul.w	r3, r2, r3
 8002f28:	4a1e      	ldr	r2, [pc, #120]	; (8002fa4 <BSP_SDRAM_Init+0xb0>)
 8002f2a:	4413      	add	r3, r2
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	2104      	movs	r1, #4
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 f83b 	bl	8002fac <MX_SDRAM_BANK2_Init>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 8002f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	e029      	b.n	8002f98 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8002f44:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <BSP_SDRAM_Init+0xb4>)
 8002f46:	2208      	movs	r2, #8
 8002f48:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 8002f4a:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <BSP_SDRAM_Init+0xb4>)
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8002f50:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <BSP_SDRAM_Init+0xb4>)
 8002f52:	f240 6203 	movw	r2, #1539	; 0x603
 8002f56:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 8002f58:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <BSP_SDRAM_Init+0xb4>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 8002f5e:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <BSP_SDRAM_Init+0xb4>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 8002f64:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <BSP_SDRAM_Init+0xb4>)
 8002f66:	2230      	movs	r2, #48	; 0x30
 8002f68:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 8002f6a:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <BSP_SDRAM_Init+0xb4>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 8002f70:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <BSP_SDRAM_Init+0xb4>)
 8002f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f76:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2234      	movs	r2, #52	; 0x34
 8002f7c:	fb02 f303 	mul.w	r3, r2, r3
 8002f80:	4a08      	ldr	r2, [pc, #32]	; (8002fa4 <BSP_SDRAM_Init+0xb0>)
 8002f82:	4413      	add	r3, r2
 8002f84:	4908      	ldr	r1, [pc, #32]	; (8002fa8 <BSP_SDRAM_Init+0xb4>)
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe fabc 	bl	8001504 <MT48LC4M32B2_Init>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8002f92:	f06f 0304 	mvn.w	r3, #4
 8002f96:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002f98:	68fb      	ldr	r3, [r7, #12]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	24000f48 	.word	0x24000f48
 8002fa8:	24000f7c 	.word	0x24000f7c

08002fac <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08c      	sub	sp, #48	; 0x30
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 8002fb8:	4b20      	ldr	r3, [pc, #128]	; (800303c <MX_SDRAM_BANK2_Init+0x90>)
 8002fba:	4a21      	ldr	r2, [pc, #132]	; (8003040 <MX_SDRAM_BANK2_Init+0x94>)
 8002fbc:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002fd6:	4b19      	ldr	r3, [pc, #100]	; (800303c <MX_SDRAM_BANK2_Init+0x90>)
 8002fd8:	2240      	movs	r2, #64	; 0x40
 8002fda:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002fe2:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ff0:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 8003000:	2302      	movs	r3, #2
 8003002:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8003004:	2307      	movs	r3, #7
 8003006:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 8003008:	2304      	movs	r3, #4
 800300a:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 800300c:	2307      	movs	r3, #7
 800300e:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 8003010:	2302      	movs	r3, #2
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 8003014:	2302      	movs	r3, #2
 8003016:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 8003018:	2302      	movs	r3, #2
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800301c:	f107 0314 	add.w	r3, r7, #20
 8003020:	4619      	mov	r1, r3
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f006 fe8c 	bl	8009d40 <HAL_SDRAM_Init>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3730      	adds	r7, #48	; 0x30
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	24000f48 	.word	0x24000f48
 8003040:	52004140 	.word	0x52004140

08003044 <BSP_SDRAM_IRQHandler>:
  * @brief  This function handles SDRAM MDMA interrupt request.
  * @param  Instance SDRAM instance
  * @retval None
  */
void BSP_SDRAM_IRQHandler(uint32_t Instance)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  HAL_MDMA_IRQHandler(hsdram[Instance].hmdma);
 800304c:	4a07      	ldr	r2, [pc, #28]	; (800306c <BSP_SDRAM_IRQHandler+0x28>)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2134      	movs	r1, #52	; 0x34
 8003052:	fb01 f303 	mul.w	r3, r1, r3
 8003056:	4413      	add	r3, r2
 8003058:	3330      	adds	r3, #48	; 0x30
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f004 f90b 	bl	8007278 <HAL_MDMA_IRQHandler>
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	24000f48 	.word	0x24000f48

08003070 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08e      	sub	sp, #56	; 0x38
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003078:	4b73      	ldr	r3, [pc, #460]	; (8003248 <SDRAM_MspInit+0x1d8>)
 800307a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800307e:	4a72      	ldr	r2, [pc, #456]	; (8003248 <SDRAM_MspInit+0x1d8>)
 8003080:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003084:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003088:	4b6f      	ldr	r3, [pc, #444]	; (8003248 <SDRAM_MspInit+0x1d8>)
 800308a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800308e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003092:	623b      	str	r3, [r7, #32]
 8003094:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8003096:	4b6c      	ldr	r3, [pc, #432]	; (8003248 <SDRAM_MspInit+0x1d8>)
 8003098:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800309c:	4a6a      	ldr	r2, [pc, #424]	; (8003248 <SDRAM_MspInit+0x1d8>)
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80030a6:	4b68      	ldr	r3, [pc, #416]	; (8003248 <SDRAM_MspInit+0x1d8>)
 80030a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030b4:	4b64      	ldr	r3, [pc, #400]	; (8003248 <SDRAM_MspInit+0x1d8>)
 80030b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ba:	4a63      	ldr	r2, [pc, #396]	; (8003248 <SDRAM_MspInit+0x1d8>)
 80030bc:	f043 0308 	orr.w	r3, r3, #8
 80030c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030c4:	4b60      	ldr	r3, [pc, #384]	; (8003248 <SDRAM_MspInit+0x1d8>)
 80030c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	61bb      	str	r3, [r7, #24]
 80030d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030d2:	4b5d      	ldr	r3, [pc, #372]	; (8003248 <SDRAM_MspInit+0x1d8>)
 80030d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030d8:	4a5b      	ldr	r2, [pc, #364]	; (8003248 <SDRAM_MspInit+0x1d8>)
 80030da:	f043 0310 	orr.w	r3, r3, #16
 80030de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030e2:	4b59      	ldr	r3, [pc, #356]	; (8003248 <SDRAM_MspInit+0x1d8>)
 80030e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030f0:	4b55      	ldr	r3, [pc, #340]	; (8003248 <SDRAM_MspInit+0x1d8>)
 80030f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f6:	4a54      	ldr	r2, [pc, #336]	; (8003248 <SDRAM_MspInit+0x1d8>)
 80030f8:	f043 0320 	orr.w	r3, r3, #32
 80030fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003100:	4b51      	ldr	r3, [pc, #324]	; (8003248 <SDRAM_MspInit+0x1d8>)
 8003102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800310e:	4b4e      	ldr	r3, [pc, #312]	; (8003248 <SDRAM_MspInit+0x1d8>)
 8003110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003114:	4a4c      	ldr	r2, [pc, #304]	; (8003248 <SDRAM_MspInit+0x1d8>)
 8003116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800311a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800311e:	4b4a      	ldr	r3, [pc, #296]	; (8003248 <SDRAM_MspInit+0x1d8>)
 8003120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800312c:	4b46      	ldr	r3, [pc, #280]	; (8003248 <SDRAM_MspInit+0x1d8>)
 800312e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003132:	4a45      	ldr	r2, [pc, #276]	; (8003248 <SDRAM_MspInit+0x1d8>)
 8003134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003138:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800313c:	4b42      	ldr	r3, [pc, #264]	; (8003248 <SDRAM_MspInit+0x1d8>)
 800313e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800314a:	2302      	movs	r3, #2
 800314c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800314e:	2301      	movs	r3, #1
 8003150:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003152:	2303      	movs	r3, #3
 8003154:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003156:	230c      	movs	r3, #12
 8003158:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800315a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003164:	4619      	mov	r1, r3
 8003166:	4839      	ldr	r0, [pc, #228]	; (800324c <SDRAM_MspInit+0x1dc>)
 8003168:	f002 fbf0 	bl	800594c <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800316c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003176:	4619      	mov	r1, r3
 8003178:	4835      	ldr	r0, [pc, #212]	; (8003250 <SDRAM_MspInit+0x1e0>)
 800317a:	f002 fbe7 	bl	800594c <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800317e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003188:	4619      	mov	r1, r3
 800318a:	4832      	ldr	r0, [pc, #200]	; (8003254 <SDRAM_MspInit+0x1e4>)
 800318c:	f002 fbde 	bl	800594c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8003190:	f248 1333 	movw	r3, #33075	; 0x8133
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800319a:	4619      	mov	r1, r3
 800319c:	482e      	ldr	r0, [pc, #184]	; (8003258 <SDRAM_MspInit+0x1e8>)
 800319e:	f002 fbd5 	bl	800594c <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 80031a2:	23e0      	movs	r3, #224	; 0xe0
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80031a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031aa:	4619      	mov	r1, r3
 80031ac:	482b      	ldr	r0, [pc, #172]	; (800325c <SDRAM_MspInit+0x1ec>)
 80031ae:	f002 fbcd 	bl	800594c <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 80031b2:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031b8:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 80031ba:	4b29      	ldr	r3, [pc, #164]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c0:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 80031c2:	4b27      	ldr	r3, [pc, #156]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031c4:	2280      	movs	r2, #128	; 0x80
 80031c6:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80031c8:	4b25      	ldr	r3, [pc, #148]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 80031ce:	4b24      	ldr	r3, [pc, #144]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031d0:	f240 2202 	movw	r2, #514	; 0x202
 80031d4:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 80031d6:	4b22      	ldr	r3, [pc, #136]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031d8:	f640 0208 	movw	r2, #2056	; 0x808
 80031dc:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80031de:	4b20      	ldr	r3, [pc, #128]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031e0:	2220      	movs	r2, #32
 80031e2:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80031e4:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031e6:	2280      	movs	r2, #128	; 0x80
 80031e8:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80031ea:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80031f2:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80031f8:	4b19      	ldr	r3, [pc, #100]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 80031fe:	4b18      	ldr	r3, [pc, #96]	; (8003260 <SDRAM_MspInit+0x1f0>)
 8003200:	2280      	movs	r2, #128	; 0x80
 8003202:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8003204:	4b16      	ldr	r3, [pc, #88]	; (8003260 <SDRAM_MspInit+0x1f0>)
 8003206:	2200      	movs	r2, #0
 8003208:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 800320a:	4b15      	ldr	r3, [pc, #84]	; (8003260 <SDRAM_MspInit+0x1f0>)
 800320c:	2200      	movs	r2, #0
 800320e:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8003210:	4b13      	ldr	r3, [pc, #76]	; (8003260 <SDRAM_MspInit+0x1f0>)
 8003212:	4a14      	ldr	r2, [pc, #80]	; (8003264 <SDRAM_MspInit+0x1f4>)
 8003214:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8003216:	4b14      	ldr	r3, [pc, #80]	; (8003268 <SDRAM_MspInit+0x1f8>)
 8003218:	4a11      	ldr	r2, [pc, #68]	; (8003260 <SDRAM_MspInit+0x1f0>)
 800321a:	631a      	str	r2, [r3, #48]	; 0x30
 800321c:	4b10      	ldr	r3, [pc, #64]	; (8003260 <SDRAM_MspInit+0x1f0>)
 800321e:	4a12      	ldr	r2, [pc, #72]	; (8003268 <SDRAM_MspInit+0x1f8>)
 8003220:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 8003222:	480f      	ldr	r0, [pc, #60]	; (8003260 <SDRAM_MspInit+0x1f0>)
 8003224:	f003 ffd0 	bl	80071c8 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 8003228:	480d      	ldr	r0, [pc, #52]	; (8003260 <SDRAM_MspInit+0x1f0>)
 800322a:	f003 ff81 	bl	8007130 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 800322e:	2200      	movs	r2, #0
 8003230:	210f      	movs	r1, #15
 8003232:	207a      	movs	r0, #122	; 0x7a
 8003234:	f000 fbc1 	bl	80039ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8003238:	207a      	movs	r0, #122	; 0x7a
 800323a:	f000 fbd8 	bl	80039ee <HAL_NVIC_EnableIRQ>
}
 800323e:	bf00      	nop
 8003240:	3738      	adds	r7, #56	; 0x38
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	58024400 	.word	0x58024400
 800324c:	58020c00 	.word	0x58020c00
 8003250:	58021000 	.word	0x58021000
 8003254:	58021400 	.word	0x58021400
 8003258:	58021800 	.word	0x58021800
 800325c:	58021c00 	.word	0x58021c00
 8003260:	24000f9c 	.word	0x24000f9c
 8003264:	52000040 	.word	0x52000040
 8003268:	24000f48 	.word	0x24000f48

0800326c <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b088      	sub	sp, #32
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d11c      	bne.n	80032ba <BSP_TS_Init+0x4e>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d018      	beq.n	80032ba <BSP_TS_Init+0x4e>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003290:	d813      	bhi.n	80032ba <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00f      	beq.n	80032ba <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80032a2:	d80a      	bhi.n	80032ba <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	6819      	ldr	r1, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	428b      	cmp	r3, r1
 80032b2:	bf28      	it	cs
 80032b4:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d903      	bls.n	80032c2 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80032ba:	f06f 0301 	mvn.w	r3, #1
 80032be:	61fb      	str	r3, [r7, #28]
 80032c0:	e06e      	b.n	80033a0 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f98c 	bl	80035e0 <FT5336_Probe>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 80032ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	e064      	b.n	80033a0 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	4934      	ldr	r1, [pc, #208]	; (80033ac <BSP_TS_Init+0x140>)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	019b      	lsls	r3, r3, #6
 80032e0:	440b      	add	r3, r1
 80032e2:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	4930      	ldr	r1, [pc, #192]	; (80033ac <BSP_TS_Init+0x140>)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	019b      	lsls	r3, r3, #6
 80032ee:	440b      	add	r3, r1
 80032f0:	3304      	adds	r3, #4
 80032f2:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	492c      	ldr	r1, [pc, #176]	; (80033ac <BSP_TS_Init+0x140>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	019b      	lsls	r3, r3, #6
 80032fe:	440b      	add	r3, r1
 8003300:	3308      	adds	r3, #8
 8003302:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	4928      	ldr	r1, [pc, #160]	; (80033ac <BSP_TS_Init+0x140>)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	019b      	lsls	r3, r3, #6
 800330e:	440b      	add	r3, r1
 8003310:	330c      	adds	r3, #12
 8003312:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8003314:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <BSP_TS_Init+0x144>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	4926      	ldr	r1, [pc, #152]	; (80033b4 <BSP_TS_Init+0x148>)
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003322:	f107 010c 	add.w	r1, r7, #12
 8003326:	4610      	mov	r0, r2
 8003328:	4798      	blx	r3
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	da03      	bge.n	8003338 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003330:	f06f 0304 	mvn.w	r3, #4
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	e033      	b.n	80033a0 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	491c      	ldr	r1, [pc, #112]	; (80033ac <BSP_TS_Init+0x140>)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	019b      	lsls	r3, r3, #6
 8003340:	440b      	add	r3, r1
 8003342:	3310      	adds	r3, #16
 8003344:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4918      	ldr	r1, [pc, #96]	; (80033ac <BSP_TS_Init+0x140>)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	019b      	lsls	r3, r3, #6
 800334e:	440b      	add	r3, r1
 8003350:	3314      	adds	r3, #20
 8003352:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]
 8003358:	e01f      	b.n	800339a <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	4413      	add	r3, r2
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	4811      	ldr	r0, [pc, #68]	; (80033ac <BSP_TS_Init+0x140>)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	0119      	lsls	r1, r3, #4
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	440b      	add	r3, r1
 8003370:	3306      	adds	r3, #6
 8003372:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	4413      	add	r3, r2
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	480a      	ldr	r0, [pc, #40]	; (80033ac <BSP_TS_Init+0x140>)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	0119      	lsls	r1, r3, #4
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	440b      	add	r3, r1
 800338c:	330a      	adds	r3, #10
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4403      	add	r3, r0
 8003392:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	3301      	adds	r3, #1
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	2b04      	cmp	r3, #4
 800339e:	d9dc      	bls.n	800335a <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 80033a0:	69fb      	ldr	r3, [r7, #28]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3720      	adds	r7, #32
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	24001010 	.word	0x24001010
 80033b0:	24001008 	.word	0x24001008
 80033b4:	2400100c 	.word	0x2400100c

080033b8 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	; 0x28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80033c2:	2300      	movs	r3, #0
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80033cc:	f06f 0301 	mvn.w	r3, #1
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
 80033d2:	e0f9      	b.n	80035c8 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 80033d4:	4b7f      	ldr	r3, [pc, #508]	; (80035d4 <BSP_TS_GetState+0x21c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	497f      	ldr	r1, [pc, #508]	; (80035d8 <BSP_TS_GetState+0x220>)
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80033e2:	f107 0108 	add.w	r1, r7, #8
 80033e6:	4610      	mov	r0, r2
 80033e8:	4798      	blx	r3
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	da03      	bge.n	80033f8 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80033f0:	f06f 0304 	mvn.w	r3, #4
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
 80033f6:	e0e7      	b.n	80035c8 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 80d1 	beq.w	80035a2 <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8003408:	4a74      	ldr	r2, [pc, #464]	; (80035dc <BSP_TS_GetState+0x224>)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	019b      	lsls	r3, r3, #6
 800340e:	4413      	add	r3, r2
 8003410:	3308      	adds	r3, #8
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8003424:	4a6d      	ldr	r2, [pc, #436]	; (80035dc <BSP_TS_GetState+0x224>)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	019b      	lsls	r3, r3, #6
 800342a:	4413      	add	r3, r2
 800342c:	3308      	adds	r3, #8
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d009      	beq.n	800344c <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8003438:	4a68      	ldr	r2, [pc, #416]	; (80035dc <BSP_TS_GetState+0x224>)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	019b      	lsls	r3, r3, #6
 800343e:	4413      	add	r3, r2
 8003440:	3310      	adds	r3, #16
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800344c:	4a63      	ldr	r2, [pc, #396]	; (80035dc <BSP_TS_GetState+0x224>)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	019b      	lsls	r3, r3, #6
 8003452:	4413      	add	r3, r2
 8003454:	3308      	adds	r3, #8
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8003460:	4a5e      	ldr	r2, [pc, #376]	; (80035dc <BSP_TS_GetState+0x224>)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	019b      	lsls	r3, r3, #6
 8003466:	4413      	add	r3, r2
 8003468:	3314      	adds	r3, #20
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8003472:	4a5a      	ldr	r2, [pc, #360]	; (80035dc <BSP_TS_GetState+0x224>)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	019b      	lsls	r3, r3, #6
 8003478:	4413      	add	r3, r2
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6a3a      	ldr	r2, [r7, #32]
 800347e:	fb03 f202 	mul.w	r2, r3, r2
 8003482:	4956      	ldr	r1, [pc, #344]	; (80035dc <BSP_TS_GetState+0x224>)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	019b      	lsls	r3, r3, #6
 8003488:	440b      	add	r3, r1
 800348a:	3310      	adds	r3, #16
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8003496:	4a51      	ldr	r2, [pc, #324]	; (80035dc <BSP_TS_GetState+0x224>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	019b      	lsls	r3, r3, #6
 800349c:	4413      	add	r3, r2
 800349e:	3304      	adds	r3, #4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	fb03 f202 	mul.w	r2, r3, r2
 80034a8:	494c      	ldr	r1, [pc, #304]	; (80035dc <BSP_TS_GetState+0x224>)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	019b      	lsls	r3, r3, #6
 80034ae:	440b      	add	r3, r1
 80034b0:	3314      	adds	r3, #20
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	4945      	ldr	r1, [pc, #276]	; (80035dc <BSP_TS_GetState+0x224>)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	019b      	lsls	r3, r3, #6
 80034cc:	440b      	add	r3, r1
 80034ce:	3318      	adds	r3, #24
 80034d0:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d909      	bls.n	80034ea <BSP_TS_GetState+0x132>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	4940      	ldr	r1, [pc, #256]	; (80035dc <BSP_TS_GetState+0x224>)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	019b      	lsls	r3, r3, #6
 80034e0:	440b      	add	r3, r1
 80034e2:	3318      	adds	r3, #24
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	e008      	b.n	80034fc <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 80034ea:	4a3c      	ldr	r2, [pc, #240]	; (80035dc <BSP_TS_GetState+0x224>)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	019b      	lsls	r3, r3, #6
 80034f0:	4413      	add	r3, r2
 80034f2:	3318      	adds	r3, #24
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80034fa:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80034fc:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	4936      	ldr	r1, [pc, #216]	; (80035dc <BSP_TS_GetState+0x224>)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	019b      	lsls	r3, r3, #6
 8003508:	440b      	add	r3, r1
 800350a:	332c      	adds	r3, #44	; 0x2c
 800350c:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800350e:	429a      	cmp	r2, r3
 8003510:	d909      	bls.n	8003526 <BSP_TS_GetState+0x16e>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	4931      	ldr	r1, [pc, #196]	; (80035dc <BSP_TS_GetState+0x224>)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	019b      	lsls	r3, r3, #6
 800351c:	440b      	add	r3, r1
 800351e:	332c      	adds	r3, #44	; 0x2c
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	e008      	b.n	8003538 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8003526:	4a2d      	ldr	r2, [pc, #180]	; (80035dc <BSP_TS_GetState+0x224>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	019b      	lsls	r3, r3, #6
 800352c:	4413      	add	r3, r2
 800352e:	332c      	adds	r3, #44	; 0x2c
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8003536:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8003538:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800353a:	4a28      	ldr	r2, [pc, #160]	; (80035dc <BSP_TS_GetState+0x224>)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	019b      	lsls	r3, r3, #6
 8003540:	4413      	add	r3, r2
 8003542:	330c      	adds	r3, #12
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	429a      	cmp	r2, r3
 800354a:	d808      	bhi.n	800355e <BSP_TS_GetState+0x1a6>
 800354c:	4a23      	ldr	r2, [pc, #140]	; (80035dc <BSP_TS_GetState+0x224>)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	019b      	lsls	r3, r3, #6
 8003552:	4413      	add	r3, r2
 8003554:	330c      	adds	r3, #12
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	429a      	cmp	r2, r3
 800355c:	d910      	bls.n	8003580 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	491e      	ldr	r1, [pc, #120]	; (80035dc <BSP_TS_GetState+0x224>)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	019b      	lsls	r3, r3, #6
 8003568:	440b      	add	r3, r1
 800356a:	3318      	adds	r3, #24
 800356c:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	491a      	ldr	r1, [pc, #104]	; (80035dc <BSP_TS_GetState+0x224>)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	019b      	lsls	r3, r3, #6
 8003578:	440b      	add	r3, r1
 800357a:	332c      	adds	r3, #44	; 0x2c
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	e023      	b.n	80035c8 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8003580:	4a16      	ldr	r2, [pc, #88]	; (80035dc <BSP_TS_GetState+0x224>)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	019b      	lsls	r3, r3, #6
 8003586:	4413      	add	r3, r2
 8003588:	3318      	adds	r3, #24
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8003590:	4a12      	ldr	r2, [pc, #72]	; (80035dc <BSP_TS_GetState+0x224>)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	019b      	lsls	r3, r3, #6
 8003596:	4413      	add	r3, r2
 8003598:	332c      	adds	r3, #44	; 0x2c
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	e012      	b.n	80035c8 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80035a8:	4a0c      	ldr	r2, [pc, #48]	; (80035dc <BSP_TS_GetState+0x224>)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	019b      	lsls	r3, r3, #6
 80035ae:	4413      	add	r3, r2
 80035b0:	3318      	adds	r3, #24
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80035b8:	4a08      	ldr	r2, [pc, #32]	; (80035dc <BSP_TS_GetState+0x224>)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	019b      	lsls	r3, r3, #6
 80035be:	4413      	add	r3, r2
 80035c0:	332c      	adds	r3, #44	; 0x2c
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3728      	adds	r7, #40	; 0x28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	24001008 	.word	0x24001008
 80035d8:	2400100c 	.word	0x2400100c
 80035dc:	24001010 	.word	0x24001010

080035e0 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08a      	sub	sp, #40	; 0x28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 80035f0:	2370      	movs	r3, #112	; 0x70
 80035f2:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 80035f4:	4b23      	ldr	r3, [pc, #140]	; (8003684 <FT5336_Probe+0xa4>)
 80035f6:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80035f8:	4b23      	ldr	r3, [pc, #140]	; (8003688 <FT5336_Probe+0xa8>)
 80035fa:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 80035fc:	4b23      	ldr	r3, [pc, #140]	; (800368c <FT5336_Probe+0xac>)
 80035fe:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8003600:	4b23      	ldr	r3, [pc, #140]	; (8003690 <FT5336_Probe+0xb0>)
 8003602:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003604:	4b23      	ldr	r3, [pc, #140]	; (8003694 <FT5336_Probe+0xb4>)
 8003606:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8003608:	f107 030c 	add.w	r3, r7, #12
 800360c:	4619      	mov	r1, r3
 800360e:	4822      	ldr	r0, [pc, #136]	; (8003698 <FT5336_Probe+0xb8>)
 8003610:	f7fd fc18 	bl	8000e44 <FT5336_RegisterBusIO>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800361a:	f06f 0307 	mvn.w	r3, #7
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
 8003620:	e02a      	b.n	8003678 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8003622:	f107 0308 	add.w	r3, r7, #8
 8003626:	4619      	mov	r1, r3
 8003628:	481b      	ldr	r0, [pc, #108]	; (8003698 <FT5336_Probe+0xb8>)
 800362a:	f7fd fd05 	bl	8001038 <FT5336_ReadID>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003634:	f06f 0304 	mvn.w	r3, #4
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
 800363a:	e01d      	b.n	8003678 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b51      	cmp	r3, #81	; 0x51
 8003640:	d003      	beq.n	800364a <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003642:	f06f 0306 	mvn.w	r3, #6
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
 8003648:	e016      	b.n	8003678 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800364a:	4a14      	ldr	r2, [pc, #80]	; (800369c <FT5336_Probe+0xbc>)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4912      	ldr	r1, [pc, #72]	; (8003698 <FT5336_Probe+0xb8>)
 8003650:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8003654:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <FT5336_Probe+0xc0>)
 8003656:	4a13      	ldr	r2, [pc, #76]	; (80036a4 <FT5336_Probe+0xc4>)
 8003658:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800365a:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <FT5336_Probe+0xc0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	490e      	ldr	r1, [pc, #56]	; (800369c <FT5336_Probe+0xbc>)
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003668:	4610      	mov	r0, r2
 800366a:	4798      	blx	r3
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003672:	f06f 0304 	mvn.w	r3, #4
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800367a:	4618      	mov	r0, r3
 800367c:	3728      	adds	r7, #40	; 0x28
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	08001891 	.word	0x08001891
 8003688:	08001905 	.word	0x08001905
 800368c:	08001a2d 	.word	0x08001a2d
 8003690:	080019d1 	.word	0x080019d1
 8003694:	08001a89 	.word	0x08001a89
 8003698:	24001050 	.word	0x24001050
 800369c:	2400100c 	.word	0x2400100c
 80036a0:	24001008 	.word	0x24001008
 80036a4:	24000008 	.word	0x24000008

080036a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ae:	2003      	movs	r0, #3
 80036b0:	f000 f978 	bl	80039a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036b4:	f004 fe16 	bl	80082e4 <HAL_RCC_GetSysClockFreq>
 80036b8:	4602      	mov	r2, r0
 80036ba:	4b15      	ldr	r3, [pc, #84]	; (8003710 <HAL_Init+0x68>)
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	0a1b      	lsrs	r3, r3, #8
 80036c0:	f003 030f 	and.w	r3, r3, #15
 80036c4:	4913      	ldr	r1, [pc, #76]	; (8003714 <HAL_Init+0x6c>)
 80036c6:	5ccb      	ldrb	r3, [r1, r3]
 80036c8:	f003 031f 	and.w	r3, r3, #31
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
 80036d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036d2:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <HAL_Init+0x68>)
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	4a0e      	ldr	r2, [pc, #56]	; (8003714 <HAL_Init+0x6c>)
 80036dc:	5cd3      	ldrb	r3, [r2, r3]
 80036de:	f003 031f 	and.w	r3, r3, #31
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
 80036e8:	4a0b      	ldr	r2, [pc, #44]	; (8003718 <HAL_Init+0x70>)
 80036ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036ec:	4a0b      	ldr	r2, [pc, #44]	; (800371c <HAL_Init+0x74>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036f2:	200f      	movs	r0, #15
 80036f4:	f000 f814 	bl	8003720 <HAL_InitTick>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e002      	b.n	8003708 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003702:	f7fd f99d 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	58024400 	.word	0x58024400
 8003714:	0800e168 	.word	0x0800e168
 8003718:	24000004 	.word	0x24000004
 800371c:	24000000 	.word	0x24000000

08003720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003728:	4b15      	ldr	r3, [pc, #84]	; (8003780 <HAL_InitTick+0x60>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e021      	b.n	8003778 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003734:	4b13      	ldr	r3, [pc, #76]	; (8003784 <HAL_InitTick+0x64>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	4b11      	ldr	r3, [pc, #68]	; (8003780 <HAL_InitTick+0x60>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	4619      	mov	r1, r3
 800373e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003742:	fbb3 f3f1 	udiv	r3, r3, r1
 8003746:	fbb2 f3f3 	udiv	r3, r2, r3
 800374a:	4618      	mov	r0, r3
 800374c:	f000 f95d 	bl	8003a0a <HAL_SYSTICK_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e00e      	b.n	8003778 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b0f      	cmp	r3, #15
 800375e:	d80a      	bhi.n	8003776 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003760:	2200      	movs	r2, #0
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003768:	f000 f927 	bl	80039ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800376c:	4a06      	ldr	r2, [pc, #24]	; (8003788 <HAL_InitTick+0x68>)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	e000      	b.n	8003778 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
}
 8003778:	4618      	mov	r0, r3
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	24000044 	.word	0x24000044
 8003784:	24000000 	.word	0x24000000
 8003788:	24000040 	.word	0x24000040

0800378c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003790:	4b06      	ldr	r3, [pc, #24]	; (80037ac <HAL_IncTick+0x20>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <HAL_IncTick+0x24>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4413      	add	r3, r2
 800379c:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <HAL_IncTick+0x24>)
 800379e:	6013      	str	r3, [r2, #0]
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	24000044 	.word	0x24000044
 80037b0:	24001078 	.word	0x24001078

080037b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return uwTick;
 80037b8:	4b03      	ldr	r3, [pc, #12]	; (80037c8 <HAL_GetTick+0x14>)
 80037ba:	681b      	ldr	r3, [r3, #0]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	24001078 	.word	0x24001078

080037cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80037d0:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <HAL_GetREVID+0x14>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	0c1b      	lsrs	r3, r3, #16
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	5c001000 	.word	0x5c001000

080037e4 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_EnableCompensationCell+0x1c>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	4a04      	ldr	r2, [pc, #16]	; (8003800 <HAL_EnableCompensationCell+0x1c>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6213      	str	r3, [r2, #32]
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	58000400 	.word	0x58000400

08003804 <__NVIC_SetPriorityGrouping>:
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <__NVIC_SetPriorityGrouping+0x40>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003820:	4013      	ands	r3, r2
 8003822:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <__NVIC_SetPriorityGrouping+0x44>)
 800382e:	4313      	orrs	r3, r2
 8003830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003832:	4a04      	ldr	r2, [pc, #16]	; (8003844 <__NVIC_SetPriorityGrouping+0x40>)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	60d3      	str	r3, [r2, #12]
}
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	e000ed00 	.word	0xe000ed00
 8003848:	05fa0000 	.word	0x05fa0000

0800384c <__NVIC_GetPriorityGrouping>:
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003850:	4b04      	ldr	r3, [pc, #16]	; (8003864 <__NVIC_GetPriorityGrouping+0x18>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	0a1b      	lsrs	r3, r3, #8
 8003856:	f003 0307 	and.w	r3, r3, #7
}
 800385a:	4618      	mov	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <__NVIC_EnableIRQ>:
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003876:	2b00      	cmp	r3, #0
 8003878:	db0b      	blt.n	8003892 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	f003 021f 	and.w	r2, r3, #31
 8003880:	4907      	ldr	r1, [pc, #28]	; (80038a0 <__NVIC_EnableIRQ+0x38>)
 8003882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	2001      	movs	r0, #1
 800388a:	fa00 f202 	lsl.w	r2, r0, r2
 800388e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	e000e100 	.word	0xe000e100

080038a4 <__NVIC_SetPriority>:
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	6039      	str	r1, [r7, #0]
 80038ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	db0a      	blt.n	80038ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	490c      	ldr	r1, [pc, #48]	; (80038f0 <__NVIC_SetPriority+0x4c>)
 80038be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038c2:	0112      	lsls	r2, r2, #4
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	440b      	add	r3, r1
 80038c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80038cc:	e00a      	b.n	80038e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4908      	ldr	r1, [pc, #32]	; (80038f4 <__NVIC_SetPriority+0x50>)
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	3b04      	subs	r3, #4
 80038dc:	0112      	lsls	r2, r2, #4
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	440b      	add	r3, r1
 80038e2:	761a      	strb	r2, [r3, #24]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	e000e100 	.word	0xe000e100
 80038f4:	e000ed00 	.word	0xe000ed00

080038f8 <NVIC_EncodePriority>:
{
 80038f8:	b480      	push	{r7}
 80038fa:	b089      	sub	sp, #36	; 0x24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f1c3 0307 	rsb	r3, r3, #7
 8003912:	2b04      	cmp	r3, #4
 8003914:	bf28      	it	cs
 8003916:	2304      	movcs	r3, #4
 8003918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3304      	adds	r3, #4
 800391e:	2b06      	cmp	r3, #6
 8003920:	d902      	bls.n	8003928 <NVIC_EncodePriority+0x30>
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	3b03      	subs	r3, #3
 8003926:	e000      	b.n	800392a <NVIC_EncodePriority+0x32>
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800392c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43da      	mvns	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	401a      	ands	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003940:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	fa01 f303 	lsl.w	r3, r1, r3
 800394a:	43d9      	mvns	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003950:	4313      	orrs	r3, r2
}
 8003952:	4618      	mov	r0, r3
 8003954:	3724      	adds	r7, #36	; 0x24
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3b01      	subs	r3, #1
 800396c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003970:	d301      	bcc.n	8003976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003972:	2301      	movs	r3, #1
 8003974:	e00f      	b.n	8003996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003976:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <SysTick_Config+0x40>)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3b01      	subs	r3, #1
 800397c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800397e:	210f      	movs	r1, #15
 8003980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003984:	f7ff ff8e 	bl	80038a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <SysTick_Config+0x40>)
 800398a:	2200      	movs	r2, #0
 800398c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800398e:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <SysTick_Config+0x40>)
 8003990:	2207      	movs	r2, #7
 8003992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	e000e010 	.word	0xe000e010

080039a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff ff29 	bl	8003804 <__NVIC_SetPriorityGrouping>
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b086      	sub	sp, #24
 80039be:	af00      	add	r7, sp, #0
 80039c0:	4603      	mov	r3, r0
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039c8:	f7ff ff40 	bl	800384c <__NVIC_GetPriorityGrouping>
 80039cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	6978      	ldr	r0, [r7, #20]
 80039d4:	f7ff ff90 	bl	80038f8 <NVIC_EncodePriority>
 80039d8:	4602      	mov	r2, r0
 80039da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff ff5f 	bl	80038a4 <__NVIC_SetPriority>
}
 80039e6:	bf00      	nop
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	4603      	mov	r3, r0
 80039f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff ff33 	bl	8003868 <__NVIC_EnableIRQ>
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff ffa4 	bl	8003960 <SysTick_Config>
 8003a18:	4603      	mov	r3, r0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003a2c:	f7ff fec2 	bl	80037b4 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e2dc      	b.n	8003ff6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d008      	beq.n	8003a5a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2280      	movs	r2, #128	; 0x80
 8003a4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e2cd      	b.n	8003ff6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a76      	ldr	r2, [pc, #472]	; (8003c38 <HAL_DMA_Abort+0x214>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d04a      	beq.n	8003afa <HAL_DMA_Abort+0xd6>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a74      	ldr	r2, [pc, #464]	; (8003c3c <HAL_DMA_Abort+0x218>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d045      	beq.n	8003afa <HAL_DMA_Abort+0xd6>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a73      	ldr	r2, [pc, #460]	; (8003c40 <HAL_DMA_Abort+0x21c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d040      	beq.n	8003afa <HAL_DMA_Abort+0xd6>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a71      	ldr	r2, [pc, #452]	; (8003c44 <HAL_DMA_Abort+0x220>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d03b      	beq.n	8003afa <HAL_DMA_Abort+0xd6>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a70      	ldr	r2, [pc, #448]	; (8003c48 <HAL_DMA_Abort+0x224>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d036      	beq.n	8003afa <HAL_DMA_Abort+0xd6>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a6e      	ldr	r2, [pc, #440]	; (8003c4c <HAL_DMA_Abort+0x228>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d031      	beq.n	8003afa <HAL_DMA_Abort+0xd6>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a6d      	ldr	r2, [pc, #436]	; (8003c50 <HAL_DMA_Abort+0x22c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d02c      	beq.n	8003afa <HAL_DMA_Abort+0xd6>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a6b      	ldr	r2, [pc, #428]	; (8003c54 <HAL_DMA_Abort+0x230>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d027      	beq.n	8003afa <HAL_DMA_Abort+0xd6>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a6a      	ldr	r2, [pc, #424]	; (8003c58 <HAL_DMA_Abort+0x234>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d022      	beq.n	8003afa <HAL_DMA_Abort+0xd6>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a68      	ldr	r2, [pc, #416]	; (8003c5c <HAL_DMA_Abort+0x238>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d01d      	beq.n	8003afa <HAL_DMA_Abort+0xd6>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a67      	ldr	r2, [pc, #412]	; (8003c60 <HAL_DMA_Abort+0x23c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d018      	beq.n	8003afa <HAL_DMA_Abort+0xd6>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a65      	ldr	r2, [pc, #404]	; (8003c64 <HAL_DMA_Abort+0x240>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d013      	beq.n	8003afa <HAL_DMA_Abort+0xd6>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a64      	ldr	r2, [pc, #400]	; (8003c68 <HAL_DMA_Abort+0x244>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00e      	beq.n	8003afa <HAL_DMA_Abort+0xd6>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a62      	ldr	r2, [pc, #392]	; (8003c6c <HAL_DMA_Abort+0x248>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d009      	beq.n	8003afa <HAL_DMA_Abort+0xd6>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a61      	ldr	r2, [pc, #388]	; (8003c70 <HAL_DMA_Abort+0x24c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d004      	beq.n	8003afa <HAL_DMA_Abort+0xd6>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a5f      	ldr	r2, [pc, #380]	; (8003c74 <HAL_DMA_Abort+0x250>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d101      	bne.n	8003afe <HAL_DMA_Abort+0xda>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <HAL_DMA_Abort+0xdc>
 8003afe:	2300      	movs	r3, #0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d013      	beq.n	8003b2c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 021e 	bic.w	r2, r2, #30
 8003b12:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b22:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	e00a      	b.n	8003b42 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 020e 	bic.w	r2, r2, #14
 8003b3a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a3c      	ldr	r2, [pc, #240]	; (8003c38 <HAL_DMA_Abort+0x214>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d072      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a3a      	ldr	r2, [pc, #232]	; (8003c3c <HAL_DMA_Abort+0x218>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d06d      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a39      	ldr	r2, [pc, #228]	; (8003c40 <HAL_DMA_Abort+0x21c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d068      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a37      	ldr	r2, [pc, #220]	; (8003c44 <HAL_DMA_Abort+0x220>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d063      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a36      	ldr	r2, [pc, #216]	; (8003c48 <HAL_DMA_Abort+0x224>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d05e      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a34      	ldr	r2, [pc, #208]	; (8003c4c <HAL_DMA_Abort+0x228>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d059      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a33      	ldr	r2, [pc, #204]	; (8003c50 <HAL_DMA_Abort+0x22c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d054      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a31      	ldr	r2, [pc, #196]	; (8003c54 <HAL_DMA_Abort+0x230>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d04f      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a30      	ldr	r2, [pc, #192]	; (8003c58 <HAL_DMA_Abort+0x234>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d04a      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a2e      	ldr	r2, [pc, #184]	; (8003c5c <HAL_DMA_Abort+0x238>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d045      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a2d      	ldr	r2, [pc, #180]	; (8003c60 <HAL_DMA_Abort+0x23c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d040      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a2b      	ldr	r2, [pc, #172]	; (8003c64 <HAL_DMA_Abort+0x240>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d03b      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a2a      	ldr	r2, [pc, #168]	; (8003c68 <HAL_DMA_Abort+0x244>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d036      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a28      	ldr	r2, [pc, #160]	; (8003c6c <HAL_DMA_Abort+0x248>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d031      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a27      	ldr	r2, [pc, #156]	; (8003c70 <HAL_DMA_Abort+0x24c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d02c      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a25      	ldr	r2, [pc, #148]	; (8003c74 <HAL_DMA_Abort+0x250>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d027      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a24      	ldr	r2, [pc, #144]	; (8003c78 <HAL_DMA_Abort+0x254>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d022      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a22      	ldr	r2, [pc, #136]	; (8003c7c <HAL_DMA_Abort+0x258>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d01d      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a21      	ldr	r2, [pc, #132]	; (8003c80 <HAL_DMA_Abort+0x25c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d018      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1f      	ldr	r2, [pc, #124]	; (8003c84 <HAL_DMA_Abort+0x260>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d013      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a1e      	ldr	r2, [pc, #120]	; (8003c88 <HAL_DMA_Abort+0x264>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00e      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a1c      	ldr	r2, [pc, #112]	; (8003c8c <HAL_DMA_Abort+0x268>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d009      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a1b      	ldr	r2, [pc, #108]	; (8003c90 <HAL_DMA_Abort+0x26c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d004      	beq.n	8003c32 <HAL_DMA_Abort+0x20e>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a19      	ldr	r2, [pc, #100]	; (8003c94 <HAL_DMA_Abort+0x270>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d132      	bne.n	8003c98 <HAL_DMA_Abort+0x274>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e031      	b.n	8003c9a <HAL_DMA_Abort+0x276>
 8003c36:	bf00      	nop
 8003c38:	40020010 	.word	0x40020010
 8003c3c:	40020028 	.word	0x40020028
 8003c40:	40020040 	.word	0x40020040
 8003c44:	40020058 	.word	0x40020058
 8003c48:	40020070 	.word	0x40020070
 8003c4c:	40020088 	.word	0x40020088
 8003c50:	400200a0 	.word	0x400200a0
 8003c54:	400200b8 	.word	0x400200b8
 8003c58:	40020410 	.word	0x40020410
 8003c5c:	40020428 	.word	0x40020428
 8003c60:	40020440 	.word	0x40020440
 8003c64:	40020458 	.word	0x40020458
 8003c68:	40020470 	.word	0x40020470
 8003c6c:	40020488 	.word	0x40020488
 8003c70:	400204a0 	.word	0x400204a0
 8003c74:	400204b8 	.word	0x400204b8
 8003c78:	58025408 	.word	0x58025408
 8003c7c:	5802541c 	.word	0x5802541c
 8003c80:	58025430 	.word	0x58025430
 8003c84:	58025444 	.word	0x58025444
 8003c88:	58025458 	.word	0x58025458
 8003c8c:	5802546c 	.word	0x5802546c
 8003c90:	58025480 	.word	0x58025480
 8003c94:	58025494 	.word	0x58025494
 8003c98:	2300      	movs	r3, #0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d007      	beq.n	8003cae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a6d      	ldr	r2, [pc, #436]	; (8003e68 <HAL_DMA_Abort+0x444>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d04a      	beq.n	8003d4e <HAL_DMA_Abort+0x32a>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a6b      	ldr	r2, [pc, #428]	; (8003e6c <HAL_DMA_Abort+0x448>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d045      	beq.n	8003d4e <HAL_DMA_Abort+0x32a>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a6a      	ldr	r2, [pc, #424]	; (8003e70 <HAL_DMA_Abort+0x44c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d040      	beq.n	8003d4e <HAL_DMA_Abort+0x32a>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a68      	ldr	r2, [pc, #416]	; (8003e74 <HAL_DMA_Abort+0x450>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d03b      	beq.n	8003d4e <HAL_DMA_Abort+0x32a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a67      	ldr	r2, [pc, #412]	; (8003e78 <HAL_DMA_Abort+0x454>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d036      	beq.n	8003d4e <HAL_DMA_Abort+0x32a>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a65      	ldr	r2, [pc, #404]	; (8003e7c <HAL_DMA_Abort+0x458>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d031      	beq.n	8003d4e <HAL_DMA_Abort+0x32a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a64      	ldr	r2, [pc, #400]	; (8003e80 <HAL_DMA_Abort+0x45c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d02c      	beq.n	8003d4e <HAL_DMA_Abort+0x32a>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a62      	ldr	r2, [pc, #392]	; (8003e84 <HAL_DMA_Abort+0x460>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d027      	beq.n	8003d4e <HAL_DMA_Abort+0x32a>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a61      	ldr	r2, [pc, #388]	; (8003e88 <HAL_DMA_Abort+0x464>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d022      	beq.n	8003d4e <HAL_DMA_Abort+0x32a>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a5f      	ldr	r2, [pc, #380]	; (8003e8c <HAL_DMA_Abort+0x468>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d01d      	beq.n	8003d4e <HAL_DMA_Abort+0x32a>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a5e      	ldr	r2, [pc, #376]	; (8003e90 <HAL_DMA_Abort+0x46c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d018      	beq.n	8003d4e <HAL_DMA_Abort+0x32a>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a5c      	ldr	r2, [pc, #368]	; (8003e94 <HAL_DMA_Abort+0x470>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d013      	beq.n	8003d4e <HAL_DMA_Abort+0x32a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a5b      	ldr	r2, [pc, #364]	; (8003e98 <HAL_DMA_Abort+0x474>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00e      	beq.n	8003d4e <HAL_DMA_Abort+0x32a>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a59      	ldr	r2, [pc, #356]	; (8003e9c <HAL_DMA_Abort+0x478>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d009      	beq.n	8003d4e <HAL_DMA_Abort+0x32a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a58      	ldr	r2, [pc, #352]	; (8003ea0 <HAL_DMA_Abort+0x47c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d004      	beq.n	8003d4e <HAL_DMA_Abort+0x32a>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a56      	ldr	r2, [pc, #344]	; (8003ea4 <HAL_DMA_Abort+0x480>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d108      	bne.n	8003d60 <HAL_DMA_Abort+0x33c>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0201 	bic.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	e007      	b.n	8003d70 <HAL_DMA_Abort+0x34c>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0201 	bic.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003d70:	e013      	b.n	8003d9a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d72:	f7ff fd1f 	bl	80037b4 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b05      	cmp	r3, #5
 8003d7e:	d90c      	bls.n	8003d9a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2203      	movs	r2, #3
 8003d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e12d      	b.n	8003ff6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e5      	bne.n	8003d72 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a2f      	ldr	r2, [pc, #188]	; (8003e68 <HAL_DMA_Abort+0x444>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d04a      	beq.n	8003e46 <HAL_DMA_Abort+0x422>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a2d      	ldr	r2, [pc, #180]	; (8003e6c <HAL_DMA_Abort+0x448>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d045      	beq.n	8003e46 <HAL_DMA_Abort+0x422>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a2c      	ldr	r2, [pc, #176]	; (8003e70 <HAL_DMA_Abort+0x44c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d040      	beq.n	8003e46 <HAL_DMA_Abort+0x422>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a2a      	ldr	r2, [pc, #168]	; (8003e74 <HAL_DMA_Abort+0x450>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d03b      	beq.n	8003e46 <HAL_DMA_Abort+0x422>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a29      	ldr	r2, [pc, #164]	; (8003e78 <HAL_DMA_Abort+0x454>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d036      	beq.n	8003e46 <HAL_DMA_Abort+0x422>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a27      	ldr	r2, [pc, #156]	; (8003e7c <HAL_DMA_Abort+0x458>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d031      	beq.n	8003e46 <HAL_DMA_Abort+0x422>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a26      	ldr	r2, [pc, #152]	; (8003e80 <HAL_DMA_Abort+0x45c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d02c      	beq.n	8003e46 <HAL_DMA_Abort+0x422>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a24      	ldr	r2, [pc, #144]	; (8003e84 <HAL_DMA_Abort+0x460>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d027      	beq.n	8003e46 <HAL_DMA_Abort+0x422>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a23      	ldr	r2, [pc, #140]	; (8003e88 <HAL_DMA_Abort+0x464>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d022      	beq.n	8003e46 <HAL_DMA_Abort+0x422>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a21      	ldr	r2, [pc, #132]	; (8003e8c <HAL_DMA_Abort+0x468>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d01d      	beq.n	8003e46 <HAL_DMA_Abort+0x422>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a20      	ldr	r2, [pc, #128]	; (8003e90 <HAL_DMA_Abort+0x46c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d018      	beq.n	8003e46 <HAL_DMA_Abort+0x422>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1e      	ldr	r2, [pc, #120]	; (8003e94 <HAL_DMA_Abort+0x470>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d013      	beq.n	8003e46 <HAL_DMA_Abort+0x422>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1d      	ldr	r2, [pc, #116]	; (8003e98 <HAL_DMA_Abort+0x474>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d00e      	beq.n	8003e46 <HAL_DMA_Abort+0x422>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a1b      	ldr	r2, [pc, #108]	; (8003e9c <HAL_DMA_Abort+0x478>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d009      	beq.n	8003e46 <HAL_DMA_Abort+0x422>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a1a      	ldr	r2, [pc, #104]	; (8003ea0 <HAL_DMA_Abort+0x47c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d004      	beq.n	8003e46 <HAL_DMA_Abort+0x422>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a18      	ldr	r2, [pc, #96]	; (8003ea4 <HAL_DMA_Abort+0x480>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d101      	bne.n	8003e4a <HAL_DMA_Abort+0x426>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <HAL_DMA_Abort+0x428>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d02b      	beq.n	8003ea8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e54:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	223f      	movs	r2, #63	; 0x3f
 8003e60:	409a      	lsls	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	609a      	str	r2, [r3, #8]
 8003e66:	e02a      	b.n	8003ebe <HAL_DMA_Abort+0x49a>
 8003e68:	40020010 	.word	0x40020010
 8003e6c:	40020028 	.word	0x40020028
 8003e70:	40020040 	.word	0x40020040
 8003e74:	40020058 	.word	0x40020058
 8003e78:	40020070 	.word	0x40020070
 8003e7c:	40020088 	.word	0x40020088
 8003e80:	400200a0 	.word	0x400200a0
 8003e84:	400200b8 	.word	0x400200b8
 8003e88:	40020410 	.word	0x40020410
 8003e8c:	40020428 	.word	0x40020428
 8003e90:	40020440 	.word	0x40020440
 8003e94:	40020458 	.word	0x40020458
 8003e98:	40020470 	.word	0x40020470
 8003e9c:	40020488 	.word	0x40020488
 8003ea0:	400204a0 	.word	0x400204a0
 8003ea4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	409a      	lsls	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a4f      	ldr	r2, [pc, #316]	; (8004000 <HAL_DMA_Abort+0x5dc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d072      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a4d      	ldr	r2, [pc, #308]	; (8004004 <HAL_DMA_Abort+0x5e0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d06d      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a4c      	ldr	r2, [pc, #304]	; (8004008 <HAL_DMA_Abort+0x5e4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d068      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a4a      	ldr	r2, [pc, #296]	; (800400c <HAL_DMA_Abort+0x5e8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d063      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a49      	ldr	r2, [pc, #292]	; (8004010 <HAL_DMA_Abort+0x5ec>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d05e      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a47      	ldr	r2, [pc, #284]	; (8004014 <HAL_DMA_Abort+0x5f0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d059      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a46      	ldr	r2, [pc, #280]	; (8004018 <HAL_DMA_Abort+0x5f4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d054      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a44      	ldr	r2, [pc, #272]	; (800401c <HAL_DMA_Abort+0x5f8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d04f      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a43      	ldr	r2, [pc, #268]	; (8004020 <HAL_DMA_Abort+0x5fc>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d04a      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a41      	ldr	r2, [pc, #260]	; (8004024 <HAL_DMA_Abort+0x600>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d045      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a40      	ldr	r2, [pc, #256]	; (8004028 <HAL_DMA_Abort+0x604>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d040      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a3e      	ldr	r2, [pc, #248]	; (800402c <HAL_DMA_Abort+0x608>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d03b      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <HAL_DMA_Abort+0x60c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d036      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a3b      	ldr	r2, [pc, #236]	; (8004034 <HAL_DMA_Abort+0x610>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d031      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a3a      	ldr	r2, [pc, #232]	; (8004038 <HAL_DMA_Abort+0x614>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d02c      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a38      	ldr	r2, [pc, #224]	; (800403c <HAL_DMA_Abort+0x618>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d027      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a37      	ldr	r2, [pc, #220]	; (8004040 <HAL_DMA_Abort+0x61c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d022      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a35      	ldr	r2, [pc, #212]	; (8004044 <HAL_DMA_Abort+0x620>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d01d      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a34      	ldr	r2, [pc, #208]	; (8004048 <HAL_DMA_Abort+0x624>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d018      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a32      	ldr	r2, [pc, #200]	; (800404c <HAL_DMA_Abort+0x628>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d013      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a31      	ldr	r2, [pc, #196]	; (8004050 <HAL_DMA_Abort+0x62c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d00e      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a2f      	ldr	r2, [pc, #188]	; (8004054 <HAL_DMA_Abort+0x630>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d009      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a2e      	ldr	r2, [pc, #184]	; (8004058 <HAL_DMA_Abort+0x634>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d004      	beq.n	8003fae <HAL_DMA_Abort+0x58a>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a2c      	ldr	r2, [pc, #176]	; (800405c <HAL_DMA_Abort+0x638>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d101      	bne.n	8003fb2 <HAL_DMA_Abort+0x58e>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <HAL_DMA_Abort+0x590>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d015      	beq.n	8003fe4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003fc0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00c      	beq.n	8003fe4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fd8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003fe2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40020010 	.word	0x40020010
 8004004:	40020028 	.word	0x40020028
 8004008:	40020040 	.word	0x40020040
 800400c:	40020058 	.word	0x40020058
 8004010:	40020070 	.word	0x40020070
 8004014:	40020088 	.word	0x40020088
 8004018:	400200a0 	.word	0x400200a0
 800401c:	400200b8 	.word	0x400200b8
 8004020:	40020410 	.word	0x40020410
 8004024:	40020428 	.word	0x40020428
 8004028:	40020440 	.word	0x40020440
 800402c:	40020458 	.word	0x40020458
 8004030:	40020470 	.word	0x40020470
 8004034:	40020488 	.word	0x40020488
 8004038:	400204a0 	.word	0x400204a0
 800403c:	400204b8 	.word	0x400204b8
 8004040:	58025408 	.word	0x58025408
 8004044:	5802541c 	.word	0x5802541c
 8004048:	58025430 	.word	0x58025430
 800404c:	58025444 	.word	0x58025444
 8004050:	58025458 	.word	0x58025458
 8004054:	5802546c 	.word	0x5802546c
 8004058:	58025480 	.word	0x58025480
 800405c:	58025494 	.word	0x58025494

08004060 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e237      	b.n	80044e2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d004      	beq.n	8004088 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2280      	movs	r2, #128	; 0x80
 8004082:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e22c      	b.n	80044e2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a5c      	ldr	r2, [pc, #368]	; (8004200 <HAL_DMA_Abort_IT+0x1a0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d04a      	beq.n	8004128 <HAL_DMA_Abort_IT+0xc8>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a5b      	ldr	r2, [pc, #364]	; (8004204 <HAL_DMA_Abort_IT+0x1a4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d045      	beq.n	8004128 <HAL_DMA_Abort_IT+0xc8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a59      	ldr	r2, [pc, #356]	; (8004208 <HAL_DMA_Abort_IT+0x1a8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d040      	beq.n	8004128 <HAL_DMA_Abort_IT+0xc8>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a58      	ldr	r2, [pc, #352]	; (800420c <HAL_DMA_Abort_IT+0x1ac>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d03b      	beq.n	8004128 <HAL_DMA_Abort_IT+0xc8>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a56      	ldr	r2, [pc, #344]	; (8004210 <HAL_DMA_Abort_IT+0x1b0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d036      	beq.n	8004128 <HAL_DMA_Abort_IT+0xc8>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a55      	ldr	r2, [pc, #340]	; (8004214 <HAL_DMA_Abort_IT+0x1b4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d031      	beq.n	8004128 <HAL_DMA_Abort_IT+0xc8>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a53      	ldr	r2, [pc, #332]	; (8004218 <HAL_DMA_Abort_IT+0x1b8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d02c      	beq.n	8004128 <HAL_DMA_Abort_IT+0xc8>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a52      	ldr	r2, [pc, #328]	; (800421c <HAL_DMA_Abort_IT+0x1bc>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d027      	beq.n	8004128 <HAL_DMA_Abort_IT+0xc8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a50      	ldr	r2, [pc, #320]	; (8004220 <HAL_DMA_Abort_IT+0x1c0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d022      	beq.n	8004128 <HAL_DMA_Abort_IT+0xc8>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a4f      	ldr	r2, [pc, #316]	; (8004224 <HAL_DMA_Abort_IT+0x1c4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d01d      	beq.n	8004128 <HAL_DMA_Abort_IT+0xc8>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a4d      	ldr	r2, [pc, #308]	; (8004228 <HAL_DMA_Abort_IT+0x1c8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d018      	beq.n	8004128 <HAL_DMA_Abort_IT+0xc8>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a4c      	ldr	r2, [pc, #304]	; (800422c <HAL_DMA_Abort_IT+0x1cc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d013      	beq.n	8004128 <HAL_DMA_Abort_IT+0xc8>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a4a      	ldr	r2, [pc, #296]	; (8004230 <HAL_DMA_Abort_IT+0x1d0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00e      	beq.n	8004128 <HAL_DMA_Abort_IT+0xc8>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a49      	ldr	r2, [pc, #292]	; (8004234 <HAL_DMA_Abort_IT+0x1d4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d009      	beq.n	8004128 <HAL_DMA_Abort_IT+0xc8>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a47      	ldr	r2, [pc, #284]	; (8004238 <HAL_DMA_Abort_IT+0x1d8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d004      	beq.n	8004128 <HAL_DMA_Abort_IT+0xc8>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a46      	ldr	r2, [pc, #280]	; (800423c <HAL_DMA_Abort_IT+0x1dc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d101      	bne.n	800412c <HAL_DMA_Abort_IT+0xcc>
 8004128:	2301      	movs	r3, #1
 800412a:	e000      	b.n	800412e <HAL_DMA_Abort_IT+0xce>
 800412c:	2300      	movs	r3, #0
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 8086 	beq.w	8004240 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2204      	movs	r2, #4
 8004138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a2f      	ldr	r2, [pc, #188]	; (8004200 <HAL_DMA_Abort_IT+0x1a0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d04a      	beq.n	80041dc <HAL_DMA_Abort_IT+0x17c>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a2e      	ldr	r2, [pc, #184]	; (8004204 <HAL_DMA_Abort_IT+0x1a4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d045      	beq.n	80041dc <HAL_DMA_Abort_IT+0x17c>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a2c      	ldr	r2, [pc, #176]	; (8004208 <HAL_DMA_Abort_IT+0x1a8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d040      	beq.n	80041dc <HAL_DMA_Abort_IT+0x17c>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a2b      	ldr	r2, [pc, #172]	; (800420c <HAL_DMA_Abort_IT+0x1ac>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d03b      	beq.n	80041dc <HAL_DMA_Abort_IT+0x17c>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a29      	ldr	r2, [pc, #164]	; (8004210 <HAL_DMA_Abort_IT+0x1b0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d036      	beq.n	80041dc <HAL_DMA_Abort_IT+0x17c>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a28      	ldr	r2, [pc, #160]	; (8004214 <HAL_DMA_Abort_IT+0x1b4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d031      	beq.n	80041dc <HAL_DMA_Abort_IT+0x17c>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a26      	ldr	r2, [pc, #152]	; (8004218 <HAL_DMA_Abort_IT+0x1b8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d02c      	beq.n	80041dc <HAL_DMA_Abort_IT+0x17c>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a25      	ldr	r2, [pc, #148]	; (800421c <HAL_DMA_Abort_IT+0x1bc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d027      	beq.n	80041dc <HAL_DMA_Abort_IT+0x17c>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a23      	ldr	r2, [pc, #140]	; (8004220 <HAL_DMA_Abort_IT+0x1c0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d022      	beq.n	80041dc <HAL_DMA_Abort_IT+0x17c>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a22      	ldr	r2, [pc, #136]	; (8004224 <HAL_DMA_Abort_IT+0x1c4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d01d      	beq.n	80041dc <HAL_DMA_Abort_IT+0x17c>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a20      	ldr	r2, [pc, #128]	; (8004228 <HAL_DMA_Abort_IT+0x1c8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d018      	beq.n	80041dc <HAL_DMA_Abort_IT+0x17c>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a1f      	ldr	r2, [pc, #124]	; (800422c <HAL_DMA_Abort_IT+0x1cc>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d013      	beq.n	80041dc <HAL_DMA_Abort_IT+0x17c>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1d      	ldr	r2, [pc, #116]	; (8004230 <HAL_DMA_Abort_IT+0x1d0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00e      	beq.n	80041dc <HAL_DMA_Abort_IT+0x17c>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1c      	ldr	r2, [pc, #112]	; (8004234 <HAL_DMA_Abort_IT+0x1d4>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d009      	beq.n	80041dc <HAL_DMA_Abort_IT+0x17c>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1a      	ldr	r2, [pc, #104]	; (8004238 <HAL_DMA_Abort_IT+0x1d8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d004      	beq.n	80041dc <HAL_DMA_Abort_IT+0x17c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a19      	ldr	r2, [pc, #100]	; (800423c <HAL_DMA_Abort_IT+0x1dc>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d108      	bne.n	80041ee <HAL_DMA_Abort_IT+0x18e>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0201 	bic.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	e178      	b.n	80044e0 <HAL_DMA_Abort_IT+0x480>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0201 	bic.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	e16f      	b.n	80044e0 <HAL_DMA_Abort_IT+0x480>
 8004200:	40020010 	.word	0x40020010
 8004204:	40020028 	.word	0x40020028
 8004208:	40020040 	.word	0x40020040
 800420c:	40020058 	.word	0x40020058
 8004210:	40020070 	.word	0x40020070
 8004214:	40020088 	.word	0x40020088
 8004218:	400200a0 	.word	0x400200a0
 800421c:	400200b8 	.word	0x400200b8
 8004220:	40020410 	.word	0x40020410
 8004224:	40020428 	.word	0x40020428
 8004228:	40020440 	.word	0x40020440
 800422c:	40020458 	.word	0x40020458
 8004230:	40020470 	.word	0x40020470
 8004234:	40020488 	.word	0x40020488
 8004238:	400204a0 	.word	0x400204a0
 800423c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 020e 	bic.w	r2, r2, #14
 800424e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a6c      	ldr	r2, [pc, #432]	; (8004408 <HAL_DMA_Abort_IT+0x3a8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d04a      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x290>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a6b      	ldr	r2, [pc, #428]	; (800440c <HAL_DMA_Abort_IT+0x3ac>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d045      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x290>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a69      	ldr	r2, [pc, #420]	; (8004410 <HAL_DMA_Abort_IT+0x3b0>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d040      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x290>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a68      	ldr	r2, [pc, #416]	; (8004414 <HAL_DMA_Abort_IT+0x3b4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d03b      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x290>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a66      	ldr	r2, [pc, #408]	; (8004418 <HAL_DMA_Abort_IT+0x3b8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d036      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x290>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a65      	ldr	r2, [pc, #404]	; (800441c <HAL_DMA_Abort_IT+0x3bc>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d031      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x290>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a63      	ldr	r2, [pc, #396]	; (8004420 <HAL_DMA_Abort_IT+0x3c0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d02c      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x290>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a62      	ldr	r2, [pc, #392]	; (8004424 <HAL_DMA_Abort_IT+0x3c4>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d027      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x290>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a60      	ldr	r2, [pc, #384]	; (8004428 <HAL_DMA_Abort_IT+0x3c8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d022      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x290>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a5f      	ldr	r2, [pc, #380]	; (800442c <HAL_DMA_Abort_IT+0x3cc>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d01d      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x290>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a5d      	ldr	r2, [pc, #372]	; (8004430 <HAL_DMA_Abort_IT+0x3d0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d018      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x290>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a5c      	ldr	r2, [pc, #368]	; (8004434 <HAL_DMA_Abort_IT+0x3d4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d013      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x290>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a5a      	ldr	r2, [pc, #360]	; (8004438 <HAL_DMA_Abort_IT+0x3d8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00e      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x290>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a59      	ldr	r2, [pc, #356]	; (800443c <HAL_DMA_Abort_IT+0x3dc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d009      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x290>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a57      	ldr	r2, [pc, #348]	; (8004440 <HAL_DMA_Abort_IT+0x3e0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d004      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x290>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a56      	ldr	r2, [pc, #344]	; (8004444 <HAL_DMA_Abort_IT+0x3e4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d108      	bne.n	8004302 <HAL_DMA_Abort_IT+0x2a2>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	e007      	b.n	8004312 <HAL_DMA_Abort_IT+0x2b2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0201 	bic.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a3c      	ldr	r2, [pc, #240]	; (8004408 <HAL_DMA_Abort_IT+0x3a8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d072      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a3a      	ldr	r2, [pc, #232]	; (800440c <HAL_DMA_Abort_IT+0x3ac>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d06d      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a39      	ldr	r2, [pc, #228]	; (8004410 <HAL_DMA_Abort_IT+0x3b0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d068      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a37      	ldr	r2, [pc, #220]	; (8004414 <HAL_DMA_Abort_IT+0x3b4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d063      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a36      	ldr	r2, [pc, #216]	; (8004418 <HAL_DMA_Abort_IT+0x3b8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d05e      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a34      	ldr	r2, [pc, #208]	; (800441c <HAL_DMA_Abort_IT+0x3bc>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d059      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a33      	ldr	r2, [pc, #204]	; (8004420 <HAL_DMA_Abort_IT+0x3c0>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d054      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a31      	ldr	r2, [pc, #196]	; (8004424 <HAL_DMA_Abort_IT+0x3c4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d04f      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a30      	ldr	r2, [pc, #192]	; (8004428 <HAL_DMA_Abort_IT+0x3c8>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d04a      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a2e      	ldr	r2, [pc, #184]	; (800442c <HAL_DMA_Abort_IT+0x3cc>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d045      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a2d      	ldr	r2, [pc, #180]	; (8004430 <HAL_DMA_Abort_IT+0x3d0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d040      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a2b      	ldr	r2, [pc, #172]	; (8004434 <HAL_DMA_Abort_IT+0x3d4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d03b      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a2a      	ldr	r2, [pc, #168]	; (8004438 <HAL_DMA_Abort_IT+0x3d8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d036      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a28      	ldr	r2, [pc, #160]	; (800443c <HAL_DMA_Abort_IT+0x3dc>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d031      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a27      	ldr	r2, [pc, #156]	; (8004440 <HAL_DMA_Abort_IT+0x3e0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d02c      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a25      	ldr	r2, [pc, #148]	; (8004444 <HAL_DMA_Abort_IT+0x3e4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d027      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a24      	ldr	r2, [pc, #144]	; (8004448 <HAL_DMA_Abort_IT+0x3e8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d022      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a22      	ldr	r2, [pc, #136]	; (800444c <HAL_DMA_Abort_IT+0x3ec>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01d      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a21      	ldr	r2, [pc, #132]	; (8004450 <HAL_DMA_Abort_IT+0x3f0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d018      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a1f      	ldr	r2, [pc, #124]	; (8004454 <HAL_DMA_Abort_IT+0x3f4>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d013      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1e      	ldr	r2, [pc, #120]	; (8004458 <HAL_DMA_Abort_IT+0x3f8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00e      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a1c      	ldr	r2, [pc, #112]	; (800445c <HAL_DMA_Abort_IT+0x3fc>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d009      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1b      	ldr	r2, [pc, #108]	; (8004460 <HAL_DMA_Abort_IT+0x400>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d004      	beq.n	8004402 <HAL_DMA_Abort_IT+0x3a2>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a19      	ldr	r2, [pc, #100]	; (8004464 <HAL_DMA_Abort_IT+0x404>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d132      	bne.n	8004468 <HAL_DMA_Abort_IT+0x408>
 8004402:	2301      	movs	r3, #1
 8004404:	e031      	b.n	800446a <HAL_DMA_Abort_IT+0x40a>
 8004406:	bf00      	nop
 8004408:	40020010 	.word	0x40020010
 800440c:	40020028 	.word	0x40020028
 8004410:	40020040 	.word	0x40020040
 8004414:	40020058 	.word	0x40020058
 8004418:	40020070 	.word	0x40020070
 800441c:	40020088 	.word	0x40020088
 8004420:	400200a0 	.word	0x400200a0
 8004424:	400200b8 	.word	0x400200b8
 8004428:	40020410 	.word	0x40020410
 800442c:	40020428 	.word	0x40020428
 8004430:	40020440 	.word	0x40020440
 8004434:	40020458 	.word	0x40020458
 8004438:	40020470 	.word	0x40020470
 800443c:	40020488 	.word	0x40020488
 8004440:	400204a0 	.word	0x400204a0
 8004444:	400204b8 	.word	0x400204b8
 8004448:	58025408 	.word	0x58025408
 800444c:	5802541c 	.word	0x5802541c
 8004450:	58025430 	.word	0x58025430
 8004454:	58025444 	.word	0x58025444
 8004458:	58025458 	.word	0x58025458
 800445c:	5802546c 	.word	0x5802546c
 8004460:	58025480 	.word	0x58025480
 8004464:	58025494 	.word	0x58025494
 8004468:	2300      	movs	r3, #0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d028      	beq.n	80044c0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800447c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004482:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004488:	f003 031f 	and.w	r3, r3, #31
 800448c:	2201      	movs	r2, #1
 800448e:	409a      	lsls	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800449c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00c      	beq.n	80044c0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80044be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop

080044ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08a      	sub	sp, #40	; 0x28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80044f8:	4b67      	ldr	r3, [pc, #412]	; (8004698 <HAL_DMA_IRQHandler+0x1ac>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a67      	ldr	r2, [pc, #412]	; (800469c <HAL_DMA_IRQHandler+0x1b0>)
 80044fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004502:	0a9b      	lsrs	r3, r3, #10
 8004504:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004510:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a5f      	ldr	r2, [pc, #380]	; (80046a0 <HAL_DMA_IRQHandler+0x1b4>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d04a      	beq.n	80045be <HAL_DMA_IRQHandler+0xd2>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a5d      	ldr	r2, [pc, #372]	; (80046a4 <HAL_DMA_IRQHandler+0x1b8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d045      	beq.n	80045be <HAL_DMA_IRQHandler+0xd2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a5c      	ldr	r2, [pc, #368]	; (80046a8 <HAL_DMA_IRQHandler+0x1bc>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d040      	beq.n	80045be <HAL_DMA_IRQHandler+0xd2>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a5a      	ldr	r2, [pc, #360]	; (80046ac <HAL_DMA_IRQHandler+0x1c0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d03b      	beq.n	80045be <HAL_DMA_IRQHandler+0xd2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a59      	ldr	r2, [pc, #356]	; (80046b0 <HAL_DMA_IRQHandler+0x1c4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d036      	beq.n	80045be <HAL_DMA_IRQHandler+0xd2>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a57      	ldr	r2, [pc, #348]	; (80046b4 <HAL_DMA_IRQHandler+0x1c8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d031      	beq.n	80045be <HAL_DMA_IRQHandler+0xd2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a56      	ldr	r2, [pc, #344]	; (80046b8 <HAL_DMA_IRQHandler+0x1cc>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d02c      	beq.n	80045be <HAL_DMA_IRQHandler+0xd2>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a54      	ldr	r2, [pc, #336]	; (80046bc <HAL_DMA_IRQHandler+0x1d0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d027      	beq.n	80045be <HAL_DMA_IRQHandler+0xd2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a53      	ldr	r2, [pc, #332]	; (80046c0 <HAL_DMA_IRQHandler+0x1d4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d022      	beq.n	80045be <HAL_DMA_IRQHandler+0xd2>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a51      	ldr	r2, [pc, #324]	; (80046c4 <HAL_DMA_IRQHandler+0x1d8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d01d      	beq.n	80045be <HAL_DMA_IRQHandler+0xd2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a50      	ldr	r2, [pc, #320]	; (80046c8 <HAL_DMA_IRQHandler+0x1dc>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d018      	beq.n	80045be <HAL_DMA_IRQHandler+0xd2>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a4e      	ldr	r2, [pc, #312]	; (80046cc <HAL_DMA_IRQHandler+0x1e0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d013      	beq.n	80045be <HAL_DMA_IRQHandler+0xd2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a4d      	ldr	r2, [pc, #308]	; (80046d0 <HAL_DMA_IRQHandler+0x1e4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d00e      	beq.n	80045be <HAL_DMA_IRQHandler+0xd2>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a4b      	ldr	r2, [pc, #300]	; (80046d4 <HAL_DMA_IRQHandler+0x1e8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d009      	beq.n	80045be <HAL_DMA_IRQHandler+0xd2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a4a      	ldr	r2, [pc, #296]	; (80046d8 <HAL_DMA_IRQHandler+0x1ec>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d004      	beq.n	80045be <HAL_DMA_IRQHandler+0xd2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a48      	ldr	r2, [pc, #288]	; (80046dc <HAL_DMA_IRQHandler+0x1f0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d101      	bne.n	80045c2 <HAL_DMA_IRQHandler+0xd6>
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <HAL_DMA_IRQHandler+0xd8>
 80045c2:	2300      	movs	r3, #0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 842b 	beq.w	8004e20 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	2208      	movs	r2, #8
 80045d4:	409a      	lsls	r2, r3
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	4013      	ands	r3, r2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 80a2 	beq.w	8004724 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a2e      	ldr	r2, [pc, #184]	; (80046a0 <HAL_DMA_IRQHandler+0x1b4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d04a      	beq.n	8004680 <HAL_DMA_IRQHandler+0x194>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a2d      	ldr	r2, [pc, #180]	; (80046a4 <HAL_DMA_IRQHandler+0x1b8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d045      	beq.n	8004680 <HAL_DMA_IRQHandler+0x194>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a2b      	ldr	r2, [pc, #172]	; (80046a8 <HAL_DMA_IRQHandler+0x1bc>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d040      	beq.n	8004680 <HAL_DMA_IRQHandler+0x194>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a2a      	ldr	r2, [pc, #168]	; (80046ac <HAL_DMA_IRQHandler+0x1c0>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d03b      	beq.n	8004680 <HAL_DMA_IRQHandler+0x194>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a28      	ldr	r2, [pc, #160]	; (80046b0 <HAL_DMA_IRQHandler+0x1c4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d036      	beq.n	8004680 <HAL_DMA_IRQHandler+0x194>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a27      	ldr	r2, [pc, #156]	; (80046b4 <HAL_DMA_IRQHandler+0x1c8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d031      	beq.n	8004680 <HAL_DMA_IRQHandler+0x194>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a25      	ldr	r2, [pc, #148]	; (80046b8 <HAL_DMA_IRQHandler+0x1cc>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d02c      	beq.n	8004680 <HAL_DMA_IRQHandler+0x194>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a24      	ldr	r2, [pc, #144]	; (80046bc <HAL_DMA_IRQHandler+0x1d0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d027      	beq.n	8004680 <HAL_DMA_IRQHandler+0x194>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a22      	ldr	r2, [pc, #136]	; (80046c0 <HAL_DMA_IRQHandler+0x1d4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d022      	beq.n	8004680 <HAL_DMA_IRQHandler+0x194>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a21      	ldr	r2, [pc, #132]	; (80046c4 <HAL_DMA_IRQHandler+0x1d8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d01d      	beq.n	8004680 <HAL_DMA_IRQHandler+0x194>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1f      	ldr	r2, [pc, #124]	; (80046c8 <HAL_DMA_IRQHandler+0x1dc>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d018      	beq.n	8004680 <HAL_DMA_IRQHandler+0x194>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a1e      	ldr	r2, [pc, #120]	; (80046cc <HAL_DMA_IRQHandler+0x1e0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d013      	beq.n	8004680 <HAL_DMA_IRQHandler+0x194>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1c      	ldr	r2, [pc, #112]	; (80046d0 <HAL_DMA_IRQHandler+0x1e4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00e      	beq.n	8004680 <HAL_DMA_IRQHandler+0x194>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1b      	ldr	r2, [pc, #108]	; (80046d4 <HAL_DMA_IRQHandler+0x1e8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d009      	beq.n	8004680 <HAL_DMA_IRQHandler+0x194>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a19      	ldr	r2, [pc, #100]	; (80046d8 <HAL_DMA_IRQHandler+0x1ec>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d004      	beq.n	8004680 <HAL_DMA_IRQHandler+0x194>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a18      	ldr	r2, [pc, #96]	; (80046dc <HAL_DMA_IRQHandler+0x1f0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d12f      	bne.n	80046e0 <HAL_DMA_IRQHandler+0x1f4>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	bf14      	ite	ne
 800468e:	2301      	movne	r3, #1
 8004690:	2300      	moveq	r3, #0
 8004692:	b2db      	uxtb	r3, r3
 8004694:	e02e      	b.n	80046f4 <HAL_DMA_IRQHandler+0x208>
 8004696:	bf00      	nop
 8004698:	24000000 	.word	0x24000000
 800469c:	1b4e81b5 	.word	0x1b4e81b5
 80046a0:	40020010 	.word	0x40020010
 80046a4:	40020028 	.word	0x40020028
 80046a8:	40020040 	.word	0x40020040
 80046ac:	40020058 	.word	0x40020058
 80046b0:	40020070 	.word	0x40020070
 80046b4:	40020088 	.word	0x40020088
 80046b8:	400200a0 	.word	0x400200a0
 80046bc:	400200b8 	.word	0x400200b8
 80046c0:	40020410 	.word	0x40020410
 80046c4:	40020428 	.word	0x40020428
 80046c8:	40020440 	.word	0x40020440
 80046cc:	40020458 	.word	0x40020458
 80046d0:	40020470 	.word	0x40020470
 80046d4:	40020488 	.word	0x40020488
 80046d8:	400204a0 	.word	0x400204a0
 80046dc:	400204b8 	.word	0x400204b8
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	bf14      	ite	ne
 80046ee:	2301      	movne	r3, #1
 80046f0:	2300      	moveq	r3, #0
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d015      	beq.n	8004724 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0204 	bic.w	r2, r2, #4
 8004706:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800470c:	f003 031f 	and.w	r3, r3, #31
 8004710:	2208      	movs	r2, #8
 8004712:	409a      	lsls	r2, r3
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471c:	f043 0201 	orr.w	r2, r3, #1
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004728:	f003 031f 	and.w	r3, r3, #31
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	fa22 f303 	lsr.w	r3, r2, r3
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d06e      	beq.n	8004818 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a69      	ldr	r2, [pc, #420]	; (80048e4 <HAL_DMA_IRQHandler+0x3f8>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d04a      	beq.n	80047da <HAL_DMA_IRQHandler+0x2ee>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a67      	ldr	r2, [pc, #412]	; (80048e8 <HAL_DMA_IRQHandler+0x3fc>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d045      	beq.n	80047da <HAL_DMA_IRQHandler+0x2ee>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a66      	ldr	r2, [pc, #408]	; (80048ec <HAL_DMA_IRQHandler+0x400>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d040      	beq.n	80047da <HAL_DMA_IRQHandler+0x2ee>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a64      	ldr	r2, [pc, #400]	; (80048f0 <HAL_DMA_IRQHandler+0x404>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d03b      	beq.n	80047da <HAL_DMA_IRQHandler+0x2ee>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a63      	ldr	r2, [pc, #396]	; (80048f4 <HAL_DMA_IRQHandler+0x408>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d036      	beq.n	80047da <HAL_DMA_IRQHandler+0x2ee>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a61      	ldr	r2, [pc, #388]	; (80048f8 <HAL_DMA_IRQHandler+0x40c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d031      	beq.n	80047da <HAL_DMA_IRQHandler+0x2ee>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a60      	ldr	r2, [pc, #384]	; (80048fc <HAL_DMA_IRQHandler+0x410>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d02c      	beq.n	80047da <HAL_DMA_IRQHandler+0x2ee>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a5e      	ldr	r2, [pc, #376]	; (8004900 <HAL_DMA_IRQHandler+0x414>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d027      	beq.n	80047da <HAL_DMA_IRQHandler+0x2ee>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a5d      	ldr	r2, [pc, #372]	; (8004904 <HAL_DMA_IRQHandler+0x418>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d022      	beq.n	80047da <HAL_DMA_IRQHandler+0x2ee>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a5b      	ldr	r2, [pc, #364]	; (8004908 <HAL_DMA_IRQHandler+0x41c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d01d      	beq.n	80047da <HAL_DMA_IRQHandler+0x2ee>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a5a      	ldr	r2, [pc, #360]	; (800490c <HAL_DMA_IRQHandler+0x420>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d018      	beq.n	80047da <HAL_DMA_IRQHandler+0x2ee>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a58      	ldr	r2, [pc, #352]	; (8004910 <HAL_DMA_IRQHandler+0x424>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d013      	beq.n	80047da <HAL_DMA_IRQHandler+0x2ee>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a57      	ldr	r2, [pc, #348]	; (8004914 <HAL_DMA_IRQHandler+0x428>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00e      	beq.n	80047da <HAL_DMA_IRQHandler+0x2ee>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a55      	ldr	r2, [pc, #340]	; (8004918 <HAL_DMA_IRQHandler+0x42c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d009      	beq.n	80047da <HAL_DMA_IRQHandler+0x2ee>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a54      	ldr	r2, [pc, #336]	; (800491c <HAL_DMA_IRQHandler+0x430>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d004      	beq.n	80047da <HAL_DMA_IRQHandler+0x2ee>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a52      	ldr	r2, [pc, #328]	; (8004920 <HAL_DMA_IRQHandler+0x434>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d10a      	bne.n	80047f0 <HAL_DMA_IRQHandler+0x304>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	bf14      	ite	ne
 80047e8:	2301      	movne	r3, #1
 80047ea:	2300      	moveq	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	e003      	b.n	80047f8 <HAL_DMA_IRQHandler+0x30c>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2300      	movs	r3, #0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00d      	beq.n	8004818 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004800:	f003 031f 	and.w	r3, r3, #31
 8004804:	2201      	movs	r2, #1
 8004806:	409a      	lsls	r2, r3
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004810:	f043 0202 	orr.w	r2, r3, #2
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481c:	f003 031f 	and.w	r3, r3, #31
 8004820:	2204      	movs	r2, #4
 8004822:	409a      	lsls	r2, r3
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 808f 	beq.w	800494c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a2c      	ldr	r2, [pc, #176]	; (80048e4 <HAL_DMA_IRQHandler+0x3f8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d04a      	beq.n	80048ce <HAL_DMA_IRQHandler+0x3e2>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a2a      	ldr	r2, [pc, #168]	; (80048e8 <HAL_DMA_IRQHandler+0x3fc>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d045      	beq.n	80048ce <HAL_DMA_IRQHandler+0x3e2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a29      	ldr	r2, [pc, #164]	; (80048ec <HAL_DMA_IRQHandler+0x400>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d040      	beq.n	80048ce <HAL_DMA_IRQHandler+0x3e2>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a27      	ldr	r2, [pc, #156]	; (80048f0 <HAL_DMA_IRQHandler+0x404>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d03b      	beq.n	80048ce <HAL_DMA_IRQHandler+0x3e2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a26      	ldr	r2, [pc, #152]	; (80048f4 <HAL_DMA_IRQHandler+0x408>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d036      	beq.n	80048ce <HAL_DMA_IRQHandler+0x3e2>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a24      	ldr	r2, [pc, #144]	; (80048f8 <HAL_DMA_IRQHandler+0x40c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d031      	beq.n	80048ce <HAL_DMA_IRQHandler+0x3e2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a23      	ldr	r2, [pc, #140]	; (80048fc <HAL_DMA_IRQHandler+0x410>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d02c      	beq.n	80048ce <HAL_DMA_IRQHandler+0x3e2>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a21      	ldr	r2, [pc, #132]	; (8004900 <HAL_DMA_IRQHandler+0x414>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d027      	beq.n	80048ce <HAL_DMA_IRQHandler+0x3e2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a20      	ldr	r2, [pc, #128]	; (8004904 <HAL_DMA_IRQHandler+0x418>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d022      	beq.n	80048ce <HAL_DMA_IRQHandler+0x3e2>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a1e      	ldr	r2, [pc, #120]	; (8004908 <HAL_DMA_IRQHandler+0x41c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d01d      	beq.n	80048ce <HAL_DMA_IRQHandler+0x3e2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a1d      	ldr	r2, [pc, #116]	; (800490c <HAL_DMA_IRQHandler+0x420>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d018      	beq.n	80048ce <HAL_DMA_IRQHandler+0x3e2>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1b      	ldr	r2, [pc, #108]	; (8004910 <HAL_DMA_IRQHandler+0x424>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <HAL_DMA_IRQHandler+0x3e2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1a      	ldr	r2, [pc, #104]	; (8004914 <HAL_DMA_IRQHandler+0x428>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00e      	beq.n	80048ce <HAL_DMA_IRQHandler+0x3e2>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a18      	ldr	r2, [pc, #96]	; (8004918 <HAL_DMA_IRQHandler+0x42c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d009      	beq.n	80048ce <HAL_DMA_IRQHandler+0x3e2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a17      	ldr	r2, [pc, #92]	; (800491c <HAL_DMA_IRQHandler+0x430>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_DMA_IRQHandler+0x3e2>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a15      	ldr	r2, [pc, #84]	; (8004920 <HAL_DMA_IRQHandler+0x434>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d12a      	bne.n	8004924 <HAL_DMA_IRQHandler+0x438>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	e023      	b.n	800492c <HAL_DMA_IRQHandler+0x440>
 80048e4:	40020010 	.word	0x40020010
 80048e8:	40020028 	.word	0x40020028
 80048ec:	40020040 	.word	0x40020040
 80048f0:	40020058 	.word	0x40020058
 80048f4:	40020070 	.word	0x40020070
 80048f8:	40020088 	.word	0x40020088
 80048fc:	400200a0 	.word	0x400200a0
 8004900:	400200b8 	.word	0x400200b8
 8004904:	40020410 	.word	0x40020410
 8004908:	40020428 	.word	0x40020428
 800490c:	40020440 	.word	0x40020440
 8004910:	40020458 	.word	0x40020458
 8004914:	40020470 	.word	0x40020470
 8004918:	40020488 	.word	0x40020488
 800491c:	400204a0 	.word	0x400204a0
 8004920:	400204b8 	.word	0x400204b8
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2300      	movs	r3, #0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00d      	beq.n	800494c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004934:	f003 031f 	and.w	r3, r3, #31
 8004938:	2204      	movs	r2, #4
 800493a:	409a      	lsls	r2, r3
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004944:	f043 0204 	orr.w	r2, r3, #4
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	2210      	movs	r2, #16
 8004956:	409a      	lsls	r2, r3
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	4013      	ands	r3, r2
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80a6 	beq.w	8004aae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a85      	ldr	r2, [pc, #532]	; (8004b7c <HAL_DMA_IRQHandler+0x690>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d04a      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x516>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a83      	ldr	r2, [pc, #524]	; (8004b80 <HAL_DMA_IRQHandler+0x694>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d045      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x516>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a82      	ldr	r2, [pc, #520]	; (8004b84 <HAL_DMA_IRQHandler+0x698>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d040      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x516>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a80      	ldr	r2, [pc, #512]	; (8004b88 <HAL_DMA_IRQHandler+0x69c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d03b      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x516>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a7f      	ldr	r2, [pc, #508]	; (8004b8c <HAL_DMA_IRQHandler+0x6a0>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d036      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x516>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a7d      	ldr	r2, [pc, #500]	; (8004b90 <HAL_DMA_IRQHandler+0x6a4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d031      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x516>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a7c      	ldr	r2, [pc, #496]	; (8004b94 <HAL_DMA_IRQHandler+0x6a8>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d02c      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x516>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a7a      	ldr	r2, [pc, #488]	; (8004b98 <HAL_DMA_IRQHandler+0x6ac>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d027      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x516>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a79      	ldr	r2, [pc, #484]	; (8004b9c <HAL_DMA_IRQHandler+0x6b0>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d022      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x516>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a77      	ldr	r2, [pc, #476]	; (8004ba0 <HAL_DMA_IRQHandler+0x6b4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d01d      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x516>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a76      	ldr	r2, [pc, #472]	; (8004ba4 <HAL_DMA_IRQHandler+0x6b8>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d018      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x516>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a74      	ldr	r2, [pc, #464]	; (8004ba8 <HAL_DMA_IRQHandler+0x6bc>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d013      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x516>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a73      	ldr	r2, [pc, #460]	; (8004bac <HAL_DMA_IRQHandler+0x6c0>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d00e      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x516>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a71      	ldr	r2, [pc, #452]	; (8004bb0 <HAL_DMA_IRQHandler+0x6c4>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d009      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x516>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a70      	ldr	r2, [pc, #448]	; (8004bb4 <HAL_DMA_IRQHandler+0x6c8>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d004      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x516>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a6e      	ldr	r2, [pc, #440]	; (8004bb8 <HAL_DMA_IRQHandler+0x6cc>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d10a      	bne.n	8004a18 <HAL_DMA_IRQHandler+0x52c>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bf14      	ite	ne
 8004a10:	2301      	movne	r3, #1
 8004a12:	2300      	moveq	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e009      	b.n	8004a2c <HAL_DMA_IRQHandler+0x540>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	bf14      	ite	ne
 8004a26:	2301      	movne	r3, #1
 8004a28:	2300      	moveq	r3, #0
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d03e      	beq.n	8004aae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a34:	f003 031f 	and.w	r3, r3, #31
 8004a38:	2210      	movs	r2, #16
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d018      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d108      	bne.n	8004a6e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d024      	beq.n	8004aae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	4798      	blx	r3
 8004a6c:	e01f      	b.n	8004aae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d01b      	beq.n	8004aae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	4798      	blx	r3
 8004a7e:	e016      	b.n	8004aae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d107      	bne.n	8004a9e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0208 	bic.w	r2, r2, #8
 8004a9c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	409a      	lsls	r2, r3
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	4013      	ands	r3, r2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 8110 	beq.w	8004ce4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a2c      	ldr	r2, [pc, #176]	; (8004b7c <HAL_DMA_IRQHandler+0x690>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d04a      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x678>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a2b      	ldr	r2, [pc, #172]	; (8004b80 <HAL_DMA_IRQHandler+0x694>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d045      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x678>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a29      	ldr	r2, [pc, #164]	; (8004b84 <HAL_DMA_IRQHandler+0x698>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d040      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x678>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a28      	ldr	r2, [pc, #160]	; (8004b88 <HAL_DMA_IRQHandler+0x69c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d03b      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x678>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a26      	ldr	r2, [pc, #152]	; (8004b8c <HAL_DMA_IRQHandler+0x6a0>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d036      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x678>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a25      	ldr	r2, [pc, #148]	; (8004b90 <HAL_DMA_IRQHandler+0x6a4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d031      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x678>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a23      	ldr	r2, [pc, #140]	; (8004b94 <HAL_DMA_IRQHandler+0x6a8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d02c      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x678>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a22      	ldr	r2, [pc, #136]	; (8004b98 <HAL_DMA_IRQHandler+0x6ac>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d027      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x678>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a20      	ldr	r2, [pc, #128]	; (8004b9c <HAL_DMA_IRQHandler+0x6b0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d022      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x678>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a1f      	ldr	r2, [pc, #124]	; (8004ba0 <HAL_DMA_IRQHandler+0x6b4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d01d      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x678>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a1d      	ldr	r2, [pc, #116]	; (8004ba4 <HAL_DMA_IRQHandler+0x6b8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d018      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x678>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a1c      	ldr	r2, [pc, #112]	; (8004ba8 <HAL_DMA_IRQHandler+0x6bc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d013      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x678>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1a      	ldr	r2, [pc, #104]	; (8004bac <HAL_DMA_IRQHandler+0x6c0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d00e      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x678>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a19      	ldr	r2, [pc, #100]	; (8004bb0 <HAL_DMA_IRQHandler+0x6c4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d009      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x678>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a17      	ldr	r2, [pc, #92]	; (8004bb4 <HAL_DMA_IRQHandler+0x6c8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d004      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x678>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a16      	ldr	r2, [pc, #88]	; (8004bb8 <HAL_DMA_IRQHandler+0x6cc>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d12b      	bne.n	8004bbc <HAL_DMA_IRQHandler+0x6d0>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0310 	and.w	r3, r3, #16
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	bf14      	ite	ne
 8004b72:	2301      	movne	r3, #1
 8004b74:	2300      	moveq	r3, #0
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	e02a      	b.n	8004bd0 <HAL_DMA_IRQHandler+0x6e4>
 8004b7a:	bf00      	nop
 8004b7c:	40020010 	.word	0x40020010
 8004b80:	40020028 	.word	0x40020028
 8004b84:	40020040 	.word	0x40020040
 8004b88:	40020058 	.word	0x40020058
 8004b8c:	40020070 	.word	0x40020070
 8004b90:	40020088 	.word	0x40020088
 8004b94:	400200a0 	.word	0x400200a0
 8004b98:	400200b8 	.word	0x400200b8
 8004b9c:	40020410 	.word	0x40020410
 8004ba0:	40020428 	.word	0x40020428
 8004ba4:	40020440 	.word	0x40020440
 8004ba8:	40020458 	.word	0x40020458
 8004bac:	40020470 	.word	0x40020470
 8004bb0:	40020488 	.word	0x40020488
 8004bb4:	400204a0 	.word	0x400204a0
 8004bb8:	400204b8 	.word	0x400204b8
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	bf14      	ite	ne
 8004bca:	2301      	movne	r3, #1
 8004bcc:	2300      	moveq	r3, #0
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8087 	beq.w	8004ce4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bda:	f003 031f 	and.w	r3, r3, #31
 8004bde:	2220      	movs	r2, #32
 8004be0:	409a      	lsls	r2, r3
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d139      	bne.n	8004c66 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0216 	bic.w	r2, r2, #22
 8004c00:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695a      	ldr	r2, [r3, #20]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c10:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d103      	bne.n	8004c22 <HAL_DMA_IRQHandler+0x736>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d007      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0208 	bic.w	r2, r2, #8
 8004c30:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c36:	f003 031f 	and.w	r3, r3, #31
 8004c3a:	223f      	movs	r2, #63	; 0x3f
 8004c3c:	409a      	lsls	r2, r3
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 834a 	beq.w	80052f0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	4798      	blx	r3
          }
          return;
 8004c64:	e344      	b.n	80052f0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d018      	beq.n	8004ca6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d108      	bne.n	8004c94 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d02c      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	4798      	blx	r3
 8004c92:	e027      	b.n	8004ce4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d023      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	4798      	blx	r3
 8004ca4:	e01e      	b.n	8004ce4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10f      	bne.n	8004cd4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0210 	bic.w	r2, r2, #16
 8004cc2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 8306 	beq.w	80052fa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 8088 	beq.w	8004e0c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2204      	movs	r2, #4
 8004d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a7a      	ldr	r2, [pc, #488]	; (8004ef4 <HAL_DMA_IRQHandler+0xa08>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d04a      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x8b8>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a79      	ldr	r2, [pc, #484]	; (8004ef8 <HAL_DMA_IRQHandler+0xa0c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d045      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x8b8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a77      	ldr	r2, [pc, #476]	; (8004efc <HAL_DMA_IRQHandler+0xa10>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d040      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x8b8>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a76      	ldr	r2, [pc, #472]	; (8004f00 <HAL_DMA_IRQHandler+0xa14>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d03b      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x8b8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a74      	ldr	r2, [pc, #464]	; (8004f04 <HAL_DMA_IRQHandler+0xa18>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d036      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x8b8>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a73      	ldr	r2, [pc, #460]	; (8004f08 <HAL_DMA_IRQHandler+0xa1c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d031      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x8b8>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a71      	ldr	r2, [pc, #452]	; (8004f0c <HAL_DMA_IRQHandler+0xa20>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d02c      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x8b8>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a70      	ldr	r2, [pc, #448]	; (8004f10 <HAL_DMA_IRQHandler+0xa24>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d027      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x8b8>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a6e      	ldr	r2, [pc, #440]	; (8004f14 <HAL_DMA_IRQHandler+0xa28>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d022      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x8b8>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a6d      	ldr	r2, [pc, #436]	; (8004f18 <HAL_DMA_IRQHandler+0xa2c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d01d      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x8b8>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a6b      	ldr	r2, [pc, #428]	; (8004f1c <HAL_DMA_IRQHandler+0xa30>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d018      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x8b8>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a6a      	ldr	r2, [pc, #424]	; (8004f20 <HAL_DMA_IRQHandler+0xa34>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d013      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x8b8>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a68      	ldr	r2, [pc, #416]	; (8004f24 <HAL_DMA_IRQHandler+0xa38>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00e      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x8b8>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a67      	ldr	r2, [pc, #412]	; (8004f28 <HAL_DMA_IRQHandler+0xa3c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d009      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x8b8>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a65      	ldr	r2, [pc, #404]	; (8004f2c <HAL_DMA_IRQHandler+0xa40>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d004      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x8b8>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a64      	ldr	r2, [pc, #400]	; (8004f30 <HAL_DMA_IRQHandler+0xa44>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d108      	bne.n	8004db6 <HAL_DMA_IRQHandler+0x8ca>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0201 	bic.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	e007      	b.n	8004dc6 <HAL_DMA_IRQHandler+0x8da>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0201 	bic.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d307      	bcc.n	8004de2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1f2      	bne.n	8004dc6 <HAL_DMA_IRQHandler+0x8da>
 8004de0:	e000      	b.n	8004de4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004de2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d004      	beq.n	8004dfc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2203      	movs	r2, #3
 8004df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004dfa:	e003      	b.n	8004e04 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 8272 	beq.w	80052fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	4798      	blx	r3
 8004e1e:	e26c      	b.n	80052fa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a43      	ldr	r2, [pc, #268]	; (8004f34 <HAL_DMA_IRQHandler+0xa48>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d022      	beq.n	8004e70 <HAL_DMA_IRQHandler+0x984>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a42      	ldr	r2, [pc, #264]	; (8004f38 <HAL_DMA_IRQHandler+0xa4c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d01d      	beq.n	8004e70 <HAL_DMA_IRQHandler+0x984>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a40      	ldr	r2, [pc, #256]	; (8004f3c <HAL_DMA_IRQHandler+0xa50>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d018      	beq.n	8004e70 <HAL_DMA_IRQHandler+0x984>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a3f      	ldr	r2, [pc, #252]	; (8004f40 <HAL_DMA_IRQHandler+0xa54>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d013      	beq.n	8004e70 <HAL_DMA_IRQHandler+0x984>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a3d      	ldr	r2, [pc, #244]	; (8004f44 <HAL_DMA_IRQHandler+0xa58>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00e      	beq.n	8004e70 <HAL_DMA_IRQHandler+0x984>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a3c      	ldr	r2, [pc, #240]	; (8004f48 <HAL_DMA_IRQHandler+0xa5c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d009      	beq.n	8004e70 <HAL_DMA_IRQHandler+0x984>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a3a      	ldr	r2, [pc, #232]	; (8004f4c <HAL_DMA_IRQHandler+0xa60>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d004      	beq.n	8004e70 <HAL_DMA_IRQHandler+0x984>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a39      	ldr	r2, [pc, #228]	; (8004f50 <HAL_DMA_IRQHandler+0xa64>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d101      	bne.n	8004e74 <HAL_DMA_IRQHandler+0x988>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <HAL_DMA_IRQHandler+0x98a>
 8004e74:	2300      	movs	r3, #0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 823f 	beq.w	80052fa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e88:	f003 031f 	and.w	r3, r3, #31
 8004e8c:	2204      	movs	r2, #4
 8004e8e:	409a      	lsls	r2, r3
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	4013      	ands	r3, r2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 80cd 	beq.w	8005034 <HAL_DMA_IRQHandler+0xb48>
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 80c7 	beq.w	8005034 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eaa:	f003 031f 	and.w	r3, r3, #31
 8004eae:	2204      	movs	r2, #4
 8004eb0:	409a      	lsls	r2, r3
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d049      	beq.n	8004f54 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d109      	bne.n	8004ede <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 8210 	beq.w	80052f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004edc:	e20a      	b.n	80052f4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 8206 	beq.w	80052f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ef0:	e200      	b.n	80052f4 <HAL_DMA_IRQHandler+0xe08>
 8004ef2:	bf00      	nop
 8004ef4:	40020010 	.word	0x40020010
 8004ef8:	40020028 	.word	0x40020028
 8004efc:	40020040 	.word	0x40020040
 8004f00:	40020058 	.word	0x40020058
 8004f04:	40020070 	.word	0x40020070
 8004f08:	40020088 	.word	0x40020088
 8004f0c:	400200a0 	.word	0x400200a0
 8004f10:	400200b8 	.word	0x400200b8
 8004f14:	40020410 	.word	0x40020410
 8004f18:	40020428 	.word	0x40020428
 8004f1c:	40020440 	.word	0x40020440
 8004f20:	40020458 	.word	0x40020458
 8004f24:	40020470 	.word	0x40020470
 8004f28:	40020488 	.word	0x40020488
 8004f2c:	400204a0 	.word	0x400204a0
 8004f30:	400204b8 	.word	0x400204b8
 8004f34:	58025408 	.word	0x58025408
 8004f38:	5802541c 	.word	0x5802541c
 8004f3c:	58025430 	.word	0x58025430
 8004f40:	58025444 	.word	0x58025444
 8004f44:	58025458 	.word	0x58025458
 8004f48:	5802546c 	.word	0x5802546c
 8004f4c:	58025480 	.word	0x58025480
 8004f50:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f003 0320 	and.w	r3, r3, #32
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d160      	bne.n	8005020 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a7f      	ldr	r2, [pc, #508]	; (8005160 <HAL_DMA_IRQHandler+0xc74>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d04a      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xb12>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a7d      	ldr	r2, [pc, #500]	; (8005164 <HAL_DMA_IRQHandler+0xc78>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d045      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xb12>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a7c      	ldr	r2, [pc, #496]	; (8005168 <HAL_DMA_IRQHandler+0xc7c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d040      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xb12>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a7a      	ldr	r2, [pc, #488]	; (800516c <HAL_DMA_IRQHandler+0xc80>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d03b      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xb12>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a79      	ldr	r2, [pc, #484]	; (8005170 <HAL_DMA_IRQHandler+0xc84>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d036      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xb12>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a77      	ldr	r2, [pc, #476]	; (8005174 <HAL_DMA_IRQHandler+0xc88>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d031      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xb12>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a76      	ldr	r2, [pc, #472]	; (8005178 <HAL_DMA_IRQHandler+0xc8c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d02c      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xb12>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a74      	ldr	r2, [pc, #464]	; (800517c <HAL_DMA_IRQHandler+0xc90>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d027      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xb12>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a73      	ldr	r2, [pc, #460]	; (8005180 <HAL_DMA_IRQHandler+0xc94>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d022      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xb12>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a71      	ldr	r2, [pc, #452]	; (8005184 <HAL_DMA_IRQHandler+0xc98>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d01d      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xb12>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a70      	ldr	r2, [pc, #448]	; (8005188 <HAL_DMA_IRQHandler+0xc9c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d018      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xb12>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a6e      	ldr	r2, [pc, #440]	; (800518c <HAL_DMA_IRQHandler+0xca0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d013      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xb12>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a6d      	ldr	r2, [pc, #436]	; (8005190 <HAL_DMA_IRQHandler+0xca4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00e      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xb12>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a6b      	ldr	r2, [pc, #428]	; (8005194 <HAL_DMA_IRQHandler+0xca8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d009      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xb12>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a6a      	ldr	r2, [pc, #424]	; (8005198 <HAL_DMA_IRQHandler+0xcac>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d004      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xb12>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a68      	ldr	r2, [pc, #416]	; (800519c <HAL_DMA_IRQHandler+0xcb0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d108      	bne.n	8005010 <HAL_DMA_IRQHandler+0xb24>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0208 	bic.w	r2, r2, #8
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e007      	b.n	8005020 <HAL_DMA_IRQHandler+0xb34>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0204 	bic.w	r2, r2, #4
 800501e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8165 	beq.w	80052f4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005032:	e15f      	b.n	80052f4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	2202      	movs	r2, #2
 800503e:	409a      	lsls	r2, r3
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	4013      	ands	r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 80c5 	beq.w	80051d4 <HAL_DMA_IRQHandler+0xce8>
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 80bf 	beq.w	80051d4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800505a:	f003 031f 	and.w	r3, r3, #31
 800505e:	2202      	movs	r2, #2
 8005060:	409a      	lsls	r2, r3
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d018      	beq.n	80050a2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d109      	bne.n	800508e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 813a 	beq.w	80052f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800508c:	e134      	b.n	80052f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 8130 	beq.w	80052f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050a0:	e12a      	b.n	80052f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f003 0320 	and.w	r3, r3, #32
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f040 8089 	bne.w	80051c0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a2b      	ldr	r2, [pc, #172]	; (8005160 <HAL_DMA_IRQHandler+0xc74>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d04a      	beq.n	800514e <HAL_DMA_IRQHandler+0xc62>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a29      	ldr	r2, [pc, #164]	; (8005164 <HAL_DMA_IRQHandler+0xc78>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d045      	beq.n	800514e <HAL_DMA_IRQHandler+0xc62>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a28      	ldr	r2, [pc, #160]	; (8005168 <HAL_DMA_IRQHandler+0xc7c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d040      	beq.n	800514e <HAL_DMA_IRQHandler+0xc62>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a26      	ldr	r2, [pc, #152]	; (800516c <HAL_DMA_IRQHandler+0xc80>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d03b      	beq.n	800514e <HAL_DMA_IRQHandler+0xc62>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a25      	ldr	r2, [pc, #148]	; (8005170 <HAL_DMA_IRQHandler+0xc84>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d036      	beq.n	800514e <HAL_DMA_IRQHandler+0xc62>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a23      	ldr	r2, [pc, #140]	; (8005174 <HAL_DMA_IRQHandler+0xc88>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d031      	beq.n	800514e <HAL_DMA_IRQHandler+0xc62>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a22      	ldr	r2, [pc, #136]	; (8005178 <HAL_DMA_IRQHandler+0xc8c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d02c      	beq.n	800514e <HAL_DMA_IRQHandler+0xc62>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a20      	ldr	r2, [pc, #128]	; (800517c <HAL_DMA_IRQHandler+0xc90>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d027      	beq.n	800514e <HAL_DMA_IRQHandler+0xc62>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a1f      	ldr	r2, [pc, #124]	; (8005180 <HAL_DMA_IRQHandler+0xc94>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d022      	beq.n	800514e <HAL_DMA_IRQHandler+0xc62>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a1d      	ldr	r2, [pc, #116]	; (8005184 <HAL_DMA_IRQHandler+0xc98>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d01d      	beq.n	800514e <HAL_DMA_IRQHandler+0xc62>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1c      	ldr	r2, [pc, #112]	; (8005188 <HAL_DMA_IRQHandler+0xc9c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d018      	beq.n	800514e <HAL_DMA_IRQHandler+0xc62>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a1a      	ldr	r2, [pc, #104]	; (800518c <HAL_DMA_IRQHandler+0xca0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d013      	beq.n	800514e <HAL_DMA_IRQHandler+0xc62>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a19      	ldr	r2, [pc, #100]	; (8005190 <HAL_DMA_IRQHandler+0xca4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00e      	beq.n	800514e <HAL_DMA_IRQHandler+0xc62>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a17      	ldr	r2, [pc, #92]	; (8005194 <HAL_DMA_IRQHandler+0xca8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d009      	beq.n	800514e <HAL_DMA_IRQHandler+0xc62>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a16      	ldr	r2, [pc, #88]	; (8005198 <HAL_DMA_IRQHandler+0xcac>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d004      	beq.n	800514e <HAL_DMA_IRQHandler+0xc62>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a14      	ldr	r2, [pc, #80]	; (800519c <HAL_DMA_IRQHandler+0xcb0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d128      	bne.n	80051a0 <HAL_DMA_IRQHandler+0xcb4>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0214 	bic.w	r2, r2, #20
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	e027      	b.n	80051b0 <HAL_DMA_IRQHandler+0xcc4>
 8005160:	40020010 	.word	0x40020010
 8005164:	40020028 	.word	0x40020028
 8005168:	40020040 	.word	0x40020040
 800516c:	40020058 	.word	0x40020058
 8005170:	40020070 	.word	0x40020070
 8005174:	40020088 	.word	0x40020088
 8005178:	400200a0 	.word	0x400200a0
 800517c:	400200b8 	.word	0x400200b8
 8005180:	40020410 	.word	0x40020410
 8005184:	40020428 	.word	0x40020428
 8005188:	40020440 	.word	0x40020440
 800518c:	40020458 	.word	0x40020458
 8005190:	40020470 	.word	0x40020470
 8005194:	40020488 	.word	0x40020488
 8005198:	400204a0 	.word	0x400204a0
 800519c:	400204b8 	.word	0x400204b8
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 020a 	bic.w	r2, r2, #10
 80051ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 8097 	beq.w	80052f8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051d2:	e091      	b.n	80052f8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d8:	f003 031f 	and.w	r3, r3, #31
 80051dc:	2208      	movs	r2, #8
 80051de:	409a      	lsls	r2, r3
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	4013      	ands	r3, r2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 8088 	beq.w	80052fa <HAL_DMA_IRQHandler+0xe0e>
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 8082 	beq.w	80052fa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a41      	ldr	r2, [pc, #260]	; (8005300 <HAL_DMA_IRQHandler+0xe14>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d04a      	beq.n	8005296 <HAL_DMA_IRQHandler+0xdaa>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a3f      	ldr	r2, [pc, #252]	; (8005304 <HAL_DMA_IRQHandler+0xe18>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d045      	beq.n	8005296 <HAL_DMA_IRQHandler+0xdaa>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a3e      	ldr	r2, [pc, #248]	; (8005308 <HAL_DMA_IRQHandler+0xe1c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d040      	beq.n	8005296 <HAL_DMA_IRQHandler+0xdaa>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a3c      	ldr	r2, [pc, #240]	; (800530c <HAL_DMA_IRQHandler+0xe20>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d03b      	beq.n	8005296 <HAL_DMA_IRQHandler+0xdaa>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a3b      	ldr	r2, [pc, #236]	; (8005310 <HAL_DMA_IRQHandler+0xe24>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d036      	beq.n	8005296 <HAL_DMA_IRQHandler+0xdaa>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a39      	ldr	r2, [pc, #228]	; (8005314 <HAL_DMA_IRQHandler+0xe28>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d031      	beq.n	8005296 <HAL_DMA_IRQHandler+0xdaa>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a38      	ldr	r2, [pc, #224]	; (8005318 <HAL_DMA_IRQHandler+0xe2c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d02c      	beq.n	8005296 <HAL_DMA_IRQHandler+0xdaa>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a36      	ldr	r2, [pc, #216]	; (800531c <HAL_DMA_IRQHandler+0xe30>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d027      	beq.n	8005296 <HAL_DMA_IRQHandler+0xdaa>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a35      	ldr	r2, [pc, #212]	; (8005320 <HAL_DMA_IRQHandler+0xe34>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d022      	beq.n	8005296 <HAL_DMA_IRQHandler+0xdaa>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a33      	ldr	r2, [pc, #204]	; (8005324 <HAL_DMA_IRQHandler+0xe38>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d01d      	beq.n	8005296 <HAL_DMA_IRQHandler+0xdaa>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a32      	ldr	r2, [pc, #200]	; (8005328 <HAL_DMA_IRQHandler+0xe3c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d018      	beq.n	8005296 <HAL_DMA_IRQHandler+0xdaa>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a30      	ldr	r2, [pc, #192]	; (800532c <HAL_DMA_IRQHandler+0xe40>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d013      	beq.n	8005296 <HAL_DMA_IRQHandler+0xdaa>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a2f      	ldr	r2, [pc, #188]	; (8005330 <HAL_DMA_IRQHandler+0xe44>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00e      	beq.n	8005296 <HAL_DMA_IRQHandler+0xdaa>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a2d      	ldr	r2, [pc, #180]	; (8005334 <HAL_DMA_IRQHandler+0xe48>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d009      	beq.n	8005296 <HAL_DMA_IRQHandler+0xdaa>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a2c      	ldr	r2, [pc, #176]	; (8005338 <HAL_DMA_IRQHandler+0xe4c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d004      	beq.n	8005296 <HAL_DMA_IRQHandler+0xdaa>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a2a      	ldr	r2, [pc, #168]	; (800533c <HAL_DMA_IRQHandler+0xe50>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d108      	bne.n	80052a8 <HAL_DMA_IRQHandler+0xdbc>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 021c 	bic.w	r2, r2, #28
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	e007      	b.n	80052b8 <HAL_DMA_IRQHandler+0xdcc>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 020e 	bic.w	r2, r2, #14
 80052b6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052bc:	f003 031f 	and.w	r3, r3, #31
 80052c0:	2201      	movs	r2, #1
 80052c2:	409a      	lsls	r2, r3
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d009      	beq.n	80052fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	4798      	blx	r3
 80052ee:	e004      	b.n	80052fa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80052f0:	bf00      	nop
 80052f2:	e002      	b.n	80052fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052f4:	bf00      	nop
 80052f6:	e000      	b.n	80052fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052f8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80052fa:	3728      	adds	r7, #40	; 0x28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40020010 	.word	0x40020010
 8005304:	40020028 	.word	0x40020028
 8005308:	40020040 	.word	0x40020040
 800530c:	40020058 	.word	0x40020058
 8005310:	40020070 	.word	0x40020070
 8005314:	40020088 	.word	0x40020088
 8005318:	400200a0 	.word	0x400200a0
 800531c:	400200b8 	.word	0x400200b8
 8005320:	40020410 	.word	0x40020410
 8005324:	40020428 	.word	0x40020428
 8005328:	40020440 	.word	0x40020440
 800532c:	40020458 	.word	0x40020458
 8005330:	40020470 	.word	0x40020470
 8005334:	40020488 	.word	0x40020488
 8005338:	400204a0 	.word	0x400204a0
 800533c:	400204b8 	.word	0x400204b8

08005340 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e04f      	b.n	80053f2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f84e 	bl	8005408 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	4b20      	ldr	r3, [pc, #128]	; (80053fc <HAL_DMA2D_Init+0xbc>)
 800537c:	4013      	ands	r3, r2
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6851      	ldr	r1, [r2, #4]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	69d2      	ldr	r2, [r2, #28]
 8005386:	4311      	orrs	r1, r2
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6812      	ldr	r2, [r2, #0]
 800538c:	430b      	orrs	r3, r1
 800538e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005396:	4b1a      	ldr	r3, [pc, #104]	; (8005400 <HAL_DMA2D_Init+0xc0>)
 8005398:	4013      	ands	r3, r2
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6891      	ldr	r1, [r2, #8]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	6992      	ldr	r2, [r2, #24]
 80053a2:	4311      	orrs	r1, r2
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	430b      	orrs	r3, r1
 80053aa:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053b2:	4b14      	ldr	r3, [pc, #80]	; (8005404 <HAL_DMA2D_Init+0xc4>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	68d1      	ldr	r1, [r2, #12]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	6812      	ldr	r2, [r2, #0]
 80053be:	430b      	orrs	r3, r1
 80053c0:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	051a      	lsls	r2, r3, #20
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	055b      	lsls	r3, r3, #21
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	fff8ffbf 	.word	0xfff8ffbf
 8005400:	fffffef8 	.word	0xfffffef8
 8005404:	ffff0000 	.word	0xffff0000

08005408 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af02      	add	r7, sp, #8
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005430:	2b01      	cmp	r3, #1
 8005432:	d101      	bne.n	8005438 <HAL_DMA2D_Start+0x1c>
 8005434:	2302      	movs	r3, #2
 8005436:	e018      	b.n	800546a <HAL_DMA2D_Start+0x4e>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	68b9      	ldr	r1, [r7, #8]
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 f9a4 	bl	80057a0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b086      	sub	sp, #24
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d056      	beq.n	800553c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800548e:	f7fe f991 	bl	80037b4 <HAL_GetTick>
 8005492:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005494:	e04b      	b.n	800552e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d023      	beq.n	80054f0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054b6:	f043 0202 	orr.w	r2, r3, #2
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054cc:	f043 0201 	orr.w	r2, r3, #1
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2221      	movs	r2, #33	; 0x21
 80054da:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2204      	movs	r2, #4
 80054e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e0a5      	b.n	800563c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054f6:	d01a      	beq.n	800552e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054f8:	f7fe f95c 	bl	80037b4 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	429a      	cmp	r2, r3
 8005506:	d302      	bcc.n	800550e <HAL_DMA2D_PollForTransfer+0x9c>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10f      	bne.n	800552e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005512:	f043 0220 	orr.w	r2, r3, #32
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2203      	movs	r2, #3
 800551e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e086      	b.n	800563c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0ac      	beq.n	8005496 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	f003 0320 	and.w	r3, r3, #32
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	4313      	orrs	r3, r2
 8005556:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d061      	beq.n	8005622 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800555e:	f7fe f929 	bl	80037b4 <HAL_GetTick>
 8005562:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005564:	e056      	b.n	8005614 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005574:	2b00      	cmp	r3, #0
 8005576:	d02e      	beq.n	80055d6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d005      	beq.n	800558e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005586:	f043 0204 	orr.w	r2, r3, #4
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f003 0320 	and.w	r3, r3, #32
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800559c:	f043 0202 	orr.w	r2, r3, #2
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055b2:	f043 0201 	orr.w	r2, r3, #1
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2229      	movs	r2, #41	; 0x29
 80055c0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2204      	movs	r2, #4
 80055c6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e032      	b.n	800563c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055dc:	d01a      	beq.n	8005614 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055de:	f7fe f8e9 	bl	80037b4 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d302      	bcc.n	80055f4 <HAL_DMA2D_PollForTransfer+0x182>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10f      	bne.n	8005614 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055f8:	f043 0220 	orr.w	r2, r3, #32
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2203      	movs	r2, #3
 8005604:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e013      	b.n	800563c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f003 0310 	and.w	r3, r3, #16
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0a1      	beq.n	8005566 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2212      	movs	r2, #18
 8005628:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_DMA2D_ConfigLayer+0x24>
 8005664:	2302      	movs	r3, #2
 8005666:	e092      	b.n	800578e <HAL_DMA2D_ConfigLayer+0x14a>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	4613      	mov	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	1a9b      	subs	r3, r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	3328      	adds	r3, #40	; 0x28
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	4413      	add	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	041b      	lsls	r3, r3, #16
 8005694:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800569c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80056a4:	4313      	orrs	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80056a8:	4b3c      	ldr	r3, [pc, #240]	; (800579c <HAL_DMA2D_ConfigLayer+0x158>)
 80056aa:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	2b0a      	cmp	r3, #10
 80056b2:	d003      	beq.n	80056bc <HAL_DMA2D_ConfigLayer+0x78>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	2b09      	cmp	r3, #9
 80056ba:	d107      	bne.n	80056cc <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	e005      	b.n	80056d8 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	061b      	lsls	r3, r3, #24
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d120      	bne.n	8005720 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	43db      	mvns	r3, r3
 80056e8:	ea02 0103 	and.w	r1, r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	6812      	ldr	r2, [r2, #0]
 80056fe:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2b0a      	cmp	r3, #10
 8005706:	d003      	beq.n	8005710 <HAL_DMA2D_ConfigLayer+0xcc>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b09      	cmp	r3, #9
 800570e:	d135      	bne.n	800577c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	68da      	ldr	r2, [r3, #12]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800571c:	629a      	str	r2, [r3, #40]	; 0x28
 800571e:	e02d      	b.n	800577c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2b0b      	cmp	r3, #11
 8005726:	d109      	bne.n	800573c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	049b      	lsls	r3, r3, #18
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	4313      	orrs	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800573a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	69da      	ldr	r2, [r3, #28]
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	43db      	mvns	r3, r3
 8005746:	ea02 0103 	and.w	r1, r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	430a      	orrs	r2, r1
 8005752:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	6812      	ldr	r2, [r2, #0]
 800575c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2b0a      	cmp	r3, #10
 8005764:	d003      	beq.n	800576e <HAL_DMA2D_ConfigLayer+0x12a>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2b09      	cmp	r3, #9
 800576c:	d106      	bne.n	800577c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800577a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	ff33000f 	.word	0xff33000f

080057a0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b08b      	sub	sp, #44	; 0x2c
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
 80057ac:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	041a      	lsls	r2, r3, #16
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	431a      	orrs	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057d8:	d174      	bne.n	80058c4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80057e0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057e8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80057f0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d108      	bne.n	8005812 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	431a      	orrs	r2, r3
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	4313      	orrs	r3, r2
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	4313      	orrs	r3, r2
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
 8005810:	e053      	b.n	80058ba <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d106      	bne.n	8005828 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	4313      	orrs	r3, r2
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
 8005826:	e048      	b.n	80058ba <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	2b02      	cmp	r3, #2
 800582e:	d111      	bne.n	8005854 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	0cdb      	lsrs	r3, r3, #19
 8005834:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	0a9b      	lsrs	r3, r3, #10
 800583a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	08db      	lsrs	r3, r3, #3
 8005840:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	02db      	lsls	r3, r3, #11
 800584a:	4313      	orrs	r3, r2
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	627b      	str	r3, [r7, #36]	; 0x24
 8005852:	e032      	b.n	80058ba <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	2b03      	cmp	r3, #3
 800585a:	d117      	bne.n	800588c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	0fdb      	lsrs	r3, r3, #31
 8005860:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	0cdb      	lsrs	r3, r3, #19
 8005866:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	0adb      	lsrs	r3, r3, #11
 800586c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	08db      	lsrs	r3, r3, #3
 8005872:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	029b      	lsls	r3, r3, #10
 800587c:	431a      	orrs	r2, r3
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	03db      	lsls	r3, r3, #15
 8005882:	4313      	orrs	r3, r2
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	4313      	orrs	r3, r2
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
 800588a:	e016      	b.n	80058ba <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	0f1b      	lsrs	r3, r3, #28
 8005890:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	0d1b      	lsrs	r3, r3, #20
 8005896:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	0b1b      	lsrs	r3, r3, #12
 800589c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	091b      	lsrs	r3, r3, #4
 80058a2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	011a      	lsls	r2, r3, #4
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	021b      	lsls	r3, r3, #8
 80058ac:	431a      	orrs	r2, r3
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	031b      	lsls	r3, r3, #12
 80058b2:	4313      	orrs	r3, r2
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058c0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80058c2:	e00d      	b.n	80058e0 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058cc:	d104      	bne.n	80058d8 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	615a      	str	r2, [r3, #20]
}
 80058d6:	e003      	b.n	80058e0 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	60da      	str	r2, [r3, #12]
}
 80058e0:	bf00      	nop
 80058e2:	372c      	adds	r7, #44	; 0x2c
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	0c1b      	lsrs	r3, r3, #16
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 031f 	and.w	r3, r3, #31
 8005908:	2201      	movs	r2, #1
 800590a:	fa02 f303 	lsl.w	r3, r2, r3
 800590e:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	011a      	lsls	r2, r3, #4
 8005914:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <HAL_EXTI_IRQHandler+0x5c>)
 8005916:	4413      	add	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	4013      	ands	r3, r2
 8005922:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d009      	beq.n	800593e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	4798      	blx	r3
    }
  }
}
 800593e:	bf00      	nop
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	58000088 	.word	0x58000088

0800594c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800594c:	b480      	push	{r7}
 800594e:	b089      	sub	sp, #36	; 0x24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005956:	2300      	movs	r3, #0
 8005958:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800595a:	4b89      	ldr	r3, [pc, #548]	; (8005b80 <HAL_GPIO_Init+0x234>)
 800595c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800595e:	e194      	b.n	8005c8a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	2101      	movs	r1, #1
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	fa01 f303 	lsl.w	r3, r1, r3
 800596c:	4013      	ands	r3, r2
 800596e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 8186 	beq.w	8005c84 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f003 0303 	and.w	r3, r3, #3
 8005980:	2b01      	cmp	r3, #1
 8005982:	d005      	beq.n	8005990 <HAL_GPIO_Init+0x44>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f003 0303 	and.w	r3, r3, #3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d130      	bne.n	80059f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	2203      	movs	r2, #3
 800599c:	fa02 f303 	lsl.w	r3, r2, r3
 80059a0:	43db      	mvns	r3, r3
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	4013      	ands	r3, r2
 80059a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	fa02 f303 	lsl.w	r3, r2, r3
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059c6:	2201      	movs	r2, #1
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	fa02 f303 	lsl.w	r3, r2, r3
 80059ce:	43db      	mvns	r3, r3
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	4013      	ands	r3, r2
 80059d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	091b      	lsrs	r3, r3, #4
 80059dc:	f003 0201 	and.w	r2, r3, #1
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d017      	beq.n	8005a2e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	2203      	movs	r2, #3
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	43db      	mvns	r3, r3
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	4013      	ands	r3, r2
 8005a14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	689a      	ldr	r2, [r3, #8]
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f003 0303 	and.w	r3, r3, #3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d123      	bne.n	8005a82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	08da      	lsrs	r2, r3, #3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	3208      	adds	r2, #8
 8005a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	220f      	movs	r2, #15
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	43db      	mvns	r3, r3
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	691a      	ldr	r2, [r3, #16]
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	f003 0307 	and.w	r3, r3, #7
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	08da      	lsrs	r2, r3, #3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3208      	adds	r2, #8
 8005a7c:	69b9      	ldr	r1, [r7, #24]
 8005a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	2203      	movs	r2, #3
 8005a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a92:	43db      	mvns	r3, r3
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	4013      	ands	r3, r2
 8005a98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f003 0203 	and.w	r2, r3, #3
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 80e0 	beq.w	8005c84 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ac4:	4b2f      	ldr	r3, [pc, #188]	; (8005b84 <HAL_GPIO_Init+0x238>)
 8005ac6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005aca:	4a2e      	ldr	r2, [pc, #184]	; (8005b84 <HAL_GPIO_Init+0x238>)
 8005acc:	f043 0302 	orr.w	r3, r3, #2
 8005ad0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005ad4:	4b2b      	ldr	r3, [pc, #172]	; (8005b84 <HAL_GPIO_Init+0x238>)
 8005ad6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ae2:	4a29      	ldr	r2, [pc, #164]	; (8005b88 <HAL_GPIO_Init+0x23c>)
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	089b      	lsrs	r3, r3, #2
 8005ae8:	3302      	adds	r3, #2
 8005aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f003 0303 	and.w	r3, r3, #3
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	220f      	movs	r2, #15
 8005afa:	fa02 f303 	lsl.w	r3, r2, r3
 8005afe:	43db      	mvns	r3, r3
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	4013      	ands	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a20      	ldr	r2, [pc, #128]	; (8005b8c <HAL_GPIO_Init+0x240>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d052      	beq.n	8005bb4 <HAL_GPIO_Init+0x268>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a1f      	ldr	r2, [pc, #124]	; (8005b90 <HAL_GPIO_Init+0x244>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d031      	beq.n	8005b7a <HAL_GPIO_Init+0x22e>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a1e      	ldr	r2, [pc, #120]	; (8005b94 <HAL_GPIO_Init+0x248>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d02b      	beq.n	8005b76 <HAL_GPIO_Init+0x22a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a1d      	ldr	r2, [pc, #116]	; (8005b98 <HAL_GPIO_Init+0x24c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d025      	beq.n	8005b72 <HAL_GPIO_Init+0x226>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a1c      	ldr	r2, [pc, #112]	; (8005b9c <HAL_GPIO_Init+0x250>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d01f      	beq.n	8005b6e <HAL_GPIO_Init+0x222>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a1b      	ldr	r2, [pc, #108]	; (8005ba0 <HAL_GPIO_Init+0x254>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d019      	beq.n	8005b6a <HAL_GPIO_Init+0x21e>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a1a      	ldr	r2, [pc, #104]	; (8005ba4 <HAL_GPIO_Init+0x258>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d013      	beq.n	8005b66 <HAL_GPIO_Init+0x21a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a19      	ldr	r2, [pc, #100]	; (8005ba8 <HAL_GPIO_Init+0x25c>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d00d      	beq.n	8005b62 <HAL_GPIO_Init+0x216>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a18      	ldr	r2, [pc, #96]	; (8005bac <HAL_GPIO_Init+0x260>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d007      	beq.n	8005b5e <HAL_GPIO_Init+0x212>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a17      	ldr	r2, [pc, #92]	; (8005bb0 <HAL_GPIO_Init+0x264>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d101      	bne.n	8005b5a <HAL_GPIO_Init+0x20e>
 8005b56:	2309      	movs	r3, #9
 8005b58:	e02d      	b.n	8005bb6 <HAL_GPIO_Init+0x26a>
 8005b5a:	230a      	movs	r3, #10
 8005b5c:	e02b      	b.n	8005bb6 <HAL_GPIO_Init+0x26a>
 8005b5e:	2308      	movs	r3, #8
 8005b60:	e029      	b.n	8005bb6 <HAL_GPIO_Init+0x26a>
 8005b62:	2307      	movs	r3, #7
 8005b64:	e027      	b.n	8005bb6 <HAL_GPIO_Init+0x26a>
 8005b66:	2306      	movs	r3, #6
 8005b68:	e025      	b.n	8005bb6 <HAL_GPIO_Init+0x26a>
 8005b6a:	2305      	movs	r3, #5
 8005b6c:	e023      	b.n	8005bb6 <HAL_GPIO_Init+0x26a>
 8005b6e:	2304      	movs	r3, #4
 8005b70:	e021      	b.n	8005bb6 <HAL_GPIO_Init+0x26a>
 8005b72:	2303      	movs	r3, #3
 8005b74:	e01f      	b.n	8005bb6 <HAL_GPIO_Init+0x26a>
 8005b76:	2302      	movs	r3, #2
 8005b78:	e01d      	b.n	8005bb6 <HAL_GPIO_Init+0x26a>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e01b      	b.n	8005bb6 <HAL_GPIO_Init+0x26a>
 8005b7e:	bf00      	nop
 8005b80:	58000080 	.word	0x58000080
 8005b84:	58024400 	.word	0x58024400
 8005b88:	58000400 	.word	0x58000400
 8005b8c:	58020000 	.word	0x58020000
 8005b90:	58020400 	.word	0x58020400
 8005b94:	58020800 	.word	0x58020800
 8005b98:	58020c00 	.word	0x58020c00
 8005b9c:	58021000 	.word	0x58021000
 8005ba0:	58021400 	.word	0x58021400
 8005ba4:	58021800 	.word	0x58021800
 8005ba8:	58021c00 	.word	0x58021c00
 8005bac:	58022000 	.word	0x58022000
 8005bb0:	58022400 	.word	0x58022400
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	f002 0203 	and.w	r2, r2, #3
 8005bbc:	0092      	lsls	r2, r2, #2
 8005bbe:	4093      	lsls	r3, r2
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bc6:	4938      	ldr	r1, [pc, #224]	; (8005ca8 <HAL_GPIO_Init+0x35c>)
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	089b      	lsrs	r3, r3, #2
 8005bcc:	3302      	adds	r3, #2
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	43db      	mvns	r3, r3
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	4013      	ands	r3, r2
 8005be4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005bfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	4013      	ands	r3, r2
 8005c12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	43db      	mvns	r3, r3
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	4013      	ands	r3, r2
 8005c68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	3301      	adds	r3, #1
 8005c88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	fa22 f303 	lsr.w	r3, r2, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f47f ae63 	bne.w	8005960 <HAL_GPIO_Init+0x14>
  }
}
 8005c9a:	bf00      	nop
 8005c9c:	bf00      	nop
 8005c9e:	3724      	adds	r7, #36	; 0x24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	58000400 	.word	0x58000400

08005cac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005cba:	4b75      	ldr	r3, [pc, #468]	; (8005e90 <HAL_GPIO_DeInit+0x1e4>)
 8005cbc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8005cbe:	e0d9      	b.n	8005e74 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 80cc 	beq.w	8005e6e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005cd6:	4a6f      	ldr	r2, [pc, #444]	; (8005e94 <HAL_GPIO_DeInit+0x1e8>)
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	089b      	lsrs	r3, r3, #2
 8005cdc:	3302      	adds	r3, #2
 8005cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ce2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f003 0303 	and.w	r3, r3, #3
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	220f      	movs	r2, #15
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a67      	ldr	r2, [pc, #412]	; (8005e98 <HAL_GPIO_DeInit+0x1ec>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d037      	beq.n	8005d70 <HAL_GPIO_DeInit+0xc4>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a66      	ldr	r2, [pc, #408]	; (8005e9c <HAL_GPIO_DeInit+0x1f0>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d031      	beq.n	8005d6c <HAL_GPIO_DeInit+0xc0>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a65      	ldr	r2, [pc, #404]	; (8005ea0 <HAL_GPIO_DeInit+0x1f4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d02b      	beq.n	8005d68 <HAL_GPIO_DeInit+0xbc>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a64      	ldr	r2, [pc, #400]	; (8005ea4 <HAL_GPIO_DeInit+0x1f8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d025      	beq.n	8005d64 <HAL_GPIO_DeInit+0xb8>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a63      	ldr	r2, [pc, #396]	; (8005ea8 <HAL_GPIO_DeInit+0x1fc>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d01f      	beq.n	8005d60 <HAL_GPIO_DeInit+0xb4>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a62      	ldr	r2, [pc, #392]	; (8005eac <HAL_GPIO_DeInit+0x200>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d019      	beq.n	8005d5c <HAL_GPIO_DeInit+0xb0>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a61      	ldr	r2, [pc, #388]	; (8005eb0 <HAL_GPIO_DeInit+0x204>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d013      	beq.n	8005d58 <HAL_GPIO_DeInit+0xac>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a60      	ldr	r2, [pc, #384]	; (8005eb4 <HAL_GPIO_DeInit+0x208>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00d      	beq.n	8005d54 <HAL_GPIO_DeInit+0xa8>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a5f      	ldr	r2, [pc, #380]	; (8005eb8 <HAL_GPIO_DeInit+0x20c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d007      	beq.n	8005d50 <HAL_GPIO_DeInit+0xa4>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a5e      	ldr	r2, [pc, #376]	; (8005ebc <HAL_GPIO_DeInit+0x210>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d101      	bne.n	8005d4c <HAL_GPIO_DeInit+0xa0>
 8005d48:	2309      	movs	r3, #9
 8005d4a:	e012      	b.n	8005d72 <HAL_GPIO_DeInit+0xc6>
 8005d4c:	230a      	movs	r3, #10
 8005d4e:	e010      	b.n	8005d72 <HAL_GPIO_DeInit+0xc6>
 8005d50:	2308      	movs	r3, #8
 8005d52:	e00e      	b.n	8005d72 <HAL_GPIO_DeInit+0xc6>
 8005d54:	2307      	movs	r3, #7
 8005d56:	e00c      	b.n	8005d72 <HAL_GPIO_DeInit+0xc6>
 8005d58:	2306      	movs	r3, #6
 8005d5a:	e00a      	b.n	8005d72 <HAL_GPIO_DeInit+0xc6>
 8005d5c:	2305      	movs	r3, #5
 8005d5e:	e008      	b.n	8005d72 <HAL_GPIO_DeInit+0xc6>
 8005d60:	2304      	movs	r3, #4
 8005d62:	e006      	b.n	8005d72 <HAL_GPIO_DeInit+0xc6>
 8005d64:	2303      	movs	r3, #3
 8005d66:	e004      	b.n	8005d72 <HAL_GPIO_DeInit+0xc6>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e002      	b.n	8005d72 <HAL_GPIO_DeInit+0xc6>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e000      	b.n	8005d72 <HAL_GPIO_DeInit+0xc6>
 8005d70:	2300      	movs	r3, #0
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	f002 0203 	and.w	r2, r2, #3
 8005d78:	0092      	lsls	r2, r2, #2
 8005d7a:	4093      	lsls	r3, r2
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d136      	bne.n	8005df0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	43db      	mvns	r3, r3
 8005d8a:	401a      	ands	r2, r3
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	43db      	mvns	r3, r3
 8005d98:	401a      	ands	r2, r3
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	43db      	mvns	r3, r3
 8005da8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dac:	4013      	ands	r3, r2
 8005dae:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	43db      	mvns	r3, r3
 8005dba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f003 0303 	and.w	r3, r3, #3
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	220f      	movs	r2, #15
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005dd2:	4a30      	ldr	r2, [pc, #192]	; (8005e94 <HAL_GPIO_DeInit+0x1e8>)
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	089b      	lsrs	r3, r3, #2
 8005dd8:	3302      	adds	r3, #2
 8005dda:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	43da      	mvns	r2, r3
 8005de2:	482c      	ldr	r0, [pc, #176]	; (8005e94 <HAL_GPIO_DeInit+0x1e8>)
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	089b      	lsrs	r3, r3, #2
 8005de8:	400a      	ands	r2, r1
 8005dea:	3302      	adds	r3, #2
 8005dec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	2103      	movs	r1, #3
 8005dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	08da      	lsrs	r2, r3, #3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3208      	adds	r2, #8
 8005e0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	220f      	movs	r2, #15
 8005e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1e:	43db      	mvns	r3, r3
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	08d2      	lsrs	r2, r2, #3
 8005e24:	4019      	ands	r1, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	3208      	adds	r2, #8
 8005e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	2103      	movs	r1, #3
 8005e38:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	401a      	ands	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	2101      	movs	r1, #1
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e50:	43db      	mvns	r3, r3
 8005e52:	401a      	ands	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689a      	ldr	r2, [r3, #8]
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	2103      	movs	r1, #3
 8005e62:	fa01 f303 	lsl.w	r3, r1, r3
 8005e66:	43db      	mvns	r3, r3
 8005e68:	401a      	ands	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	609a      	str	r2, [r3, #8]
    }

    position++;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	3301      	adds	r3, #1
 8005e72:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	fa22 f303 	lsr.w	r3, r2, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f47f af1f 	bne.w	8005cc0 <HAL_GPIO_DeInit+0x14>
  }
}
 8005e82:	bf00      	nop
 8005e84:	bf00      	nop
 8005e86:	371c      	adds	r7, #28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	58000080 	.word	0x58000080
 8005e94:	58000400 	.word	0x58000400
 8005e98:	58020000 	.word	0x58020000
 8005e9c:	58020400 	.word	0x58020400
 8005ea0:	58020800 	.word	0x58020800
 8005ea4:	58020c00 	.word	0x58020c00
 8005ea8:	58021000 	.word	0x58021000
 8005eac:	58021400 	.word	0x58021400
 8005eb0:	58021800 	.word	0x58021800
 8005eb4:	58021c00 	.word	0x58021c00
 8005eb8:	58022000 	.word	0x58022000
 8005ebc:	58022400 	.word	0x58022400

08005ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	807b      	strh	r3, [r7, #2]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ed0:	787b      	ldrb	r3, [r7, #1]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ed6:	887a      	ldrh	r2, [r7, #2]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005edc:	e003      	b.n	8005ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ede:	887b      	ldrh	r3, [r7, #2]
 8005ee0:	041a      	lsls	r2, r3, #16
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	619a      	str	r2, [r3, #24]
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
	...

08005ef4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e07f      	b.n	8006006 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f8a9 	bl	8006072 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2224      	movs	r2, #36	; 0x24
 8005f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0201 	bic.w	r2, r2, #1
 8005f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d107      	bne.n	8005f6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f6a:	609a      	str	r2, [r3, #8]
 8005f6c:	e006      	b.n	8005f7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005f7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d104      	bne.n	8005f8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6859      	ldr	r1, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	4b1d      	ldr	r3, [pc, #116]	; (8006010 <HAL_I2C_Init+0x11c>)
 8005f9a:	430b      	orrs	r3, r1
 8005f9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	691a      	ldr	r2, [r3, #16]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	69d9      	ldr	r1, [r3, #28]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a1a      	ldr	r2, [r3, #32]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0201 	orr.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	02008000 	.word	0x02008000

08006014 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e021      	b.n	800606a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2224      	movs	r2, #36	; 0x24
 800602a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0201 	bic.w	r2, r2, #1
 800603c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f821 	bl	8006086 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006072:	b480      	push	{r7}
 8006074:	b083      	sub	sp, #12
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
	...

0800609c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b088      	sub	sp, #32
 80060a0:	af02      	add	r7, sp, #8
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	4608      	mov	r0, r1
 80060a6:	4611      	mov	r1, r2
 80060a8:	461a      	mov	r2, r3
 80060aa:	4603      	mov	r3, r0
 80060ac:	817b      	strh	r3, [r7, #10]
 80060ae:	460b      	mov	r3, r1
 80060b0:	813b      	strh	r3, [r7, #8]
 80060b2:	4613      	mov	r3, r2
 80060b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b20      	cmp	r3, #32
 80060c0:	f040 80f9 	bne.w	80062b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <HAL_I2C_Mem_Write+0x34>
 80060ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d105      	bne.n	80060dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e0ed      	b.n	80062b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d101      	bne.n	80060ea <HAL_I2C_Mem_Write+0x4e>
 80060e6:	2302      	movs	r3, #2
 80060e8:	e0e6      	b.n	80062b8 <HAL_I2C_Mem_Write+0x21c>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060f2:	f7fd fb5f 	bl	80037b4 <HAL_GetTick>
 80060f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	2319      	movs	r3, #25
 80060fe:	2201      	movs	r2, #1
 8006100:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 fadd 	bl	80066c4 <I2C_WaitOnFlagUntilTimeout>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e0d1      	b.n	80062b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2221      	movs	r2, #33	; 0x21
 8006118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2240      	movs	r2, #64	; 0x40
 8006120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a3a      	ldr	r2, [r7, #32]
 800612e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006134:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800613c:	88f8      	ldrh	r0, [r7, #6]
 800613e:	893a      	ldrh	r2, [r7, #8]
 8006140:	8979      	ldrh	r1, [r7, #10]
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	9301      	str	r3, [sp, #4]
 8006146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	4603      	mov	r3, r0
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 f9ed 	bl	800652c <I2C_RequestMemoryWrite>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d005      	beq.n	8006164 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e0a9      	b.n	80062b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006168:	b29b      	uxth	r3, r3
 800616a:	2bff      	cmp	r3, #255	; 0xff
 800616c:	d90e      	bls.n	800618c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	22ff      	movs	r2, #255	; 0xff
 8006172:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006178:	b2da      	uxtb	r2, r3
 800617a:	8979      	ldrh	r1, [r7, #10]
 800617c:	2300      	movs	r3, #0
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 fc57 	bl	8006a38 <I2C_TransferConfig>
 800618a:	e00f      	b.n	80061ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006190:	b29a      	uxth	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619a:	b2da      	uxtb	r2, r3
 800619c:	8979      	ldrh	r1, [r7, #10]
 800619e:	2300      	movs	r3, #0
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 fc46 	bl	8006a38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 fad6 	bl	8006762 <I2C_WaitOnTXISFlagUntilTimeout>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e07b      	b.n	80062b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	781a      	ldrb	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061da:	b29b      	uxth	r3, r3
 80061dc:	3b01      	subs	r3, #1
 80061de:	b29a      	uxth	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d034      	beq.n	8006264 <HAL_I2C_Mem_Write+0x1c8>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d130      	bne.n	8006264 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006208:	2200      	movs	r2, #0
 800620a:	2180      	movs	r1, #128	; 0x80
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 fa59 	bl	80066c4 <I2C_WaitOnFlagUntilTimeout>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e04d      	b.n	80062b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006220:	b29b      	uxth	r3, r3
 8006222:	2bff      	cmp	r3, #255	; 0xff
 8006224:	d90e      	bls.n	8006244 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	22ff      	movs	r2, #255	; 0xff
 800622a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006230:	b2da      	uxtb	r2, r3
 8006232:	8979      	ldrh	r1, [r7, #10]
 8006234:	2300      	movs	r3, #0
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 fbfb 	bl	8006a38 <I2C_TransferConfig>
 8006242:	e00f      	b.n	8006264 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006248:	b29a      	uxth	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006252:	b2da      	uxtb	r2, r3
 8006254:	8979      	ldrh	r1, [r7, #10]
 8006256:	2300      	movs	r3, #0
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 fbea 	bl	8006a38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d19e      	bne.n	80061ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 fabc 	bl	80067f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e01a      	b.n	80062b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2220      	movs	r2, #32
 8006288:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6859      	ldr	r1, [r3, #4]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <HAL_I2C_Mem_Write+0x224>)
 8006296:	400b      	ands	r3, r1
 8006298:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2220      	movs	r2, #32
 800629e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	e000      	b.n	80062b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80062b6:	2302      	movs	r3, #2
  }
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	fe00e800 	.word	0xfe00e800

080062c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	4608      	mov	r0, r1
 80062ce:	4611      	mov	r1, r2
 80062d0:	461a      	mov	r2, r3
 80062d2:	4603      	mov	r3, r0
 80062d4:	817b      	strh	r3, [r7, #10]
 80062d6:	460b      	mov	r3, r1
 80062d8:	813b      	strh	r3, [r7, #8]
 80062da:	4613      	mov	r3, r2
 80062dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b20      	cmp	r3, #32
 80062e8:	f040 80fd 	bne.w	80064e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <HAL_I2C_Mem_Read+0x34>
 80062f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d105      	bne.n	8006304 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e0f1      	b.n	80064e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800630a:	2b01      	cmp	r3, #1
 800630c:	d101      	bne.n	8006312 <HAL_I2C_Mem_Read+0x4e>
 800630e:	2302      	movs	r3, #2
 8006310:	e0ea      	b.n	80064e8 <HAL_I2C_Mem_Read+0x224>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800631a:	f7fd fa4b 	bl	80037b4 <HAL_GetTick>
 800631e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	2319      	movs	r3, #25
 8006326:	2201      	movs	r2, #1
 8006328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 f9c9 	bl	80066c4 <I2C_WaitOnFlagUntilTimeout>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e0d5      	b.n	80064e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2222      	movs	r2, #34	; 0x22
 8006340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2240      	movs	r2, #64	; 0x40
 8006348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a3a      	ldr	r2, [r7, #32]
 8006356:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800635c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006364:	88f8      	ldrh	r0, [r7, #6]
 8006366:	893a      	ldrh	r2, [r7, #8]
 8006368:	8979      	ldrh	r1, [r7, #10]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	4603      	mov	r3, r0
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 f92d 	bl	80065d4 <I2C_RequestMemoryRead>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d005      	beq.n	800638c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e0ad      	b.n	80064e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006390:	b29b      	uxth	r3, r3
 8006392:	2bff      	cmp	r3, #255	; 0xff
 8006394:	d90e      	bls.n	80063b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	22ff      	movs	r2, #255	; 0xff
 800639a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	8979      	ldrh	r1, [r7, #10]
 80063a4:	4b52      	ldr	r3, [pc, #328]	; (80064f0 <HAL_I2C_Mem_Read+0x22c>)
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 fb43 	bl	8006a38 <I2C_TransferConfig>
 80063b2:	e00f      	b.n	80063d4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	8979      	ldrh	r1, [r7, #10]
 80063c6:	4b4a      	ldr	r3, [pc, #296]	; (80064f0 <HAL_I2C_Mem_Read+0x22c>)
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 fb32 	bl	8006a38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	2200      	movs	r2, #0
 80063dc:	2104      	movs	r1, #4
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 f970 	bl	80066c4 <I2C_WaitOnFlagUntilTimeout>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e07c      	b.n	80064e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	b2d2      	uxtb	r2, r2
 80063fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640a:	3b01      	subs	r3, #1
 800640c:	b29a      	uxth	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006416:	b29b      	uxth	r3, r3
 8006418:	3b01      	subs	r3, #1
 800641a:	b29a      	uxth	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006424:	b29b      	uxth	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d034      	beq.n	8006494 <HAL_I2C_Mem_Read+0x1d0>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800642e:	2b00      	cmp	r3, #0
 8006430:	d130      	bne.n	8006494 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006438:	2200      	movs	r2, #0
 800643a:	2180      	movs	r1, #128	; 0x80
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 f941 	bl	80066c4 <I2C_WaitOnFlagUntilTimeout>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e04d      	b.n	80064e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006450:	b29b      	uxth	r3, r3
 8006452:	2bff      	cmp	r3, #255	; 0xff
 8006454:	d90e      	bls.n	8006474 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	22ff      	movs	r2, #255	; 0xff
 800645a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006460:	b2da      	uxtb	r2, r3
 8006462:	8979      	ldrh	r1, [r7, #10]
 8006464:	2300      	movs	r3, #0
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 fae3 	bl	8006a38 <I2C_TransferConfig>
 8006472:	e00f      	b.n	8006494 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006482:	b2da      	uxtb	r2, r3
 8006484:	8979      	ldrh	r1, [r7, #10]
 8006486:	2300      	movs	r3, #0
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 fad2 	bl	8006a38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d19a      	bne.n	80063d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 f9a4 	bl	80067f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e01a      	b.n	80064e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2220      	movs	r2, #32
 80064b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6859      	ldr	r1, [r3, #4]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <HAL_I2C_Mem_Read+0x230>)
 80064c6:	400b      	ands	r3, r1
 80064c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	e000      	b.n	80064e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80064e6:	2302      	movs	r3, #2
  }
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3718      	adds	r7, #24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	80002400 	.word	0x80002400
 80064f4:	fe00e800 	.word	0xfe00e800

080064f8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006506:	b2db      	uxtb	r3, r3
}
 8006508:	4618      	mov	r0, r3
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af02      	add	r7, sp, #8
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	4608      	mov	r0, r1
 8006536:	4611      	mov	r1, r2
 8006538:	461a      	mov	r2, r3
 800653a:	4603      	mov	r3, r0
 800653c:	817b      	strh	r3, [r7, #10]
 800653e:	460b      	mov	r3, r1
 8006540:	813b      	strh	r3, [r7, #8]
 8006542:	4613      	mov	r3, r2
 8006544:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006546:	88fb      	ldrh	r3, [r7, #6]
 8006548:	b2da      	uxtb	r2, r3
 800654a:	8979      	ldrh	r1, [r7, #10]
 800654c:	4b20      	ldr	r3, [pc, #128]	; (80065d0 <I2C_RequestMemoryWrite+0xa4>)
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 fa6f 	bl	8006a38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800655a:	69fa      	ldr	r2, [r7, #28]
 800655c:	69b9      	ldr	r1, [r7, #24]
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 f8ff 	bl	8006762 <I2C_WaitOnTXISFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e02c      	b.n	80065c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800656e:	88fb      	ldrh	r3, [r7, #6]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d105      	bne.n	8006580 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006574:	893b      	ldrh	r3, [r7, #8]
 8006576:	b2da      	uxtb	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	629a      	str	r2, [r3, #40]	; 0x28
 800657e:	e015      	b.n	80065ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006580:	893b      	ldrh	r3, [r7, #8]
 8006582:	0a1b      	lsrs	r3, r3, #8
 8006584:	b29b      	uxth	r3, r3
 8006586:	b2da      	uxtb	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800658e:	69fa      	ldr	r2, [r7, #28]
 8006590:	69b9      	ldr	r1, [r7, #24]
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f000 f8e5 	bl	8006762 <I2C_WaitOnTXISFlagUntilTimeout>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e012      	b.n	80065c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065a2:	893b      	ldrh	r3, [r7, #8]
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	2200      	movs	r2, #0
 80065b4:	2180      	movs	r1, #128	; 0x80
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 f884 	bl	80066c4 <I2C_WaitOnFlagUntilTimeout>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	80002000 	.word	0x80002000

080065d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af02      	add	r7, sp, #8
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	4608      	mov	r0, r1
 80065de:	4611      	mov	r1, r2
 80065e0:	461a      	mov	r2, r3
 80065e2:	4603      	mov	r3, r0
 80065e4:	817b      	strh	r3, [r7, #10]
 80065e6:	460b      	mov	r3, r1
 80065e8:	813b      	strh	r3, [r7, #8]
 80065ea:	4613      	mov	r3, r2
 80065ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80065ee:	88fb      	ldrh	r3, [r7, #6]
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	8979      	ldrh	r1, [r7, #10]
 80065f4:	4b20      	ldr	r3, [pc, #128]	; (8006678 <I2C_RequestMemoryRead+0xa4>)
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	2300      	movs	r3, #0
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f000 fa1c 	bl	8006a38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006600:	69fa      	ldr	r2, [r7, #28]
 8006602:	69b9      	ldr	r1, [r7, #24]
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 f8ac 	bl	8006762 <I2C_WaitOnTXISFlagUntilTimeout>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e02c      	b.n	800666e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006614:	88fb      	ldrh	r3, [r7, #6]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d105      	bne.n	8006626 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800661a:	893b      	ldrh	r3, [r7, #8]
 800661c:	b2da      	uxtb	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	629a      	str	r2, [r3, #40]	; 0x28
 8006624:	e015      	b.n	8006652 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006626:	893b      	ldrh	r3, [r7, #8]
 8006628:	0a1b      	lsrs	r3, r3, #8
 800662a:	b29b      	uxth	r3, r3
 800662c:	b2da      	uxtb	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006634:	69fa      	ldr	r2, [r7, #28]
 8006636:	69b9      	ldr	r1, [r7, #24]
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 f892 	bl	8006762 <I2C_WaitOnTXISFlagUntilTimeout>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e012      	b.n	800666e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006648:	893b      	ldrh	r3, [r7, #8]
 800664a:	b2da      	uxtb	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	2200      	movs	r2, #0
 800665a:	2140      	movs	r1, #64	; 0x40
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 f831 	bl	80066c4 <I2C_WaitOnFlagUntilTimeout>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e000      	b.n	800666e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	80002000 	.word	0x80002000

0800667c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b02      	cmp	r3, #2
 8006690:	d103      	bne.n	800669a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2200      	movs	r2, #0
 8006698:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d007      	beq.n	80066b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699a      	ldr	r2, [r3, #24]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0201 	orr.w	r2, r2, #1
 80066b6:	619a      	str	r2, [r3, #24]
  }
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	603b      	str	r3, [r7, #0]
 80066d0:	4613      	mov	r3, r2
 80066d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066d4:	e031      	b.n	800673a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066dc:	d02d      	beq.n	800673a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066de:	f7fd f869 	bl	80037b4 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d302      	bcc.n	80066f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d122      	bne.n	800673a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699a      	ldr	r2, [r3, #24]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	4013      	ands	r3, r2
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	429a      	cmp	r2, r3
 8006702:	bf0c      	ite	eq
 8006704:	2301      	moveq	r3, #1
 8006706:	2300      	movne	r3, #0
 8006708:	b2db      	uxtb	r3, r3
 800670a:	461a      	mov	r2, r3
 800670c:	79fb      	ldrb	r3, [r7, #7]
 800670e:	429a      	cmp	r2, r3
 8006710:	d113      	bne.n	800673a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006716:	f043 0220 	orr.w	r2, r3, #32
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2220      	movs	r2, #32
 8006722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e00f      	b.n	800675a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	699a      	ldr	r2, [r3, #24]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4013      	ands	r3, r2
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	429a      	cmp	r2, r3
 8006748:	bf0c      	ite	eq
 800674a:	2301      	moveq	r3, #1
 800674c:	2300      	movne	r3, #0
 800674e:	b2db      	uxtb	r3, r3
 8006750:	461a      	mov	r2, r3
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	429a      	cmp	r2, r3
 8006756:	d0be      	beq.n	80066d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b084      	sub	sp, #16
 8006766:	af00      	add	r7, sp, #0
 8006768:	60f8      	str	r0, [r7, #12]
 800676a:	60b9      	str	r1, [r7, #8]
 800676c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800676e:	e033      	b.n	80067d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	68b9      	ldr	r1, [r7, #8]
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 f87f 	bl	8006878 <I2C_IsErrorOccurred>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e031      	b.n	80067e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800678a:	d025      	beq.n	80067d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800678c:	f7fd f812 	bl	80037b4 <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	429a      	cmp	r2, r3
 800679a:	d302      	bcc.n	80067a2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d11a      	bne.n	80067d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d013      	beq.n	80067d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b4:	f043 0220 	orr.w	r2, r3, #32
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2220      	movs	r2, #32
 80067c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e007      	b.n	80067e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d1c4      	bne.n	8006770 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067fc:	e02f      	b.n	800685e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	68b9      	ldr	r1, [r7, #8]
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f000 f838 	bl	8006878 <I2C_IsErrorOccurred>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e02d      	b.n	800686e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006812:	f7fc ffcf 	bl	80037b4 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	429a      	cmp	r2, r3
 8006820:	d302      	bcc.n	8006828 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d11a      	bne.n	800685e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b20      	cmp	r3, #32
 8006834:	d013      	beq.n	800685e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683a:	f043 0220 	orr.w	r2, r3, #32
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2220      	movs	r2, #32
 8006846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e007      	b.n	800686e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	f003 0320 	and.w	r3, r3, #32
 8006868:	2b20      	cmp	r3, #32
 800686a:	d1c8      	bne.n	80067fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
	...

08006878 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b08a      	sub	sp, #40	; 0x28
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006884:	2300      	movs	r3, #0
 8006886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006892:	2300      	movs	r3, #0
 8006894:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	f003 0310 	and.w	r3, r3, #16
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d068      	beq.n	8006976 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2210      	movs	r2, #16
 80068aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80068ac:	e049      	b.n	8006942 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068b4:	d045      	beq.n	8006942 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80068b6:	f7fc ff7d 	bl	80037b4 <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d302      	bcc.n	80068cc <I2C_IsErrorOccurred+0x54>
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d13a      	bne.n	8006942 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ee:	d121      	bne.n	8006934 <I2C_IsErrorOccurred+0xbc>
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068f6:	d01d      	beq.n	8006934 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80068f8:	7cfb      	ldrb	r3, [r7, #19]
 80068fa:	2b20      	cmp	r3, #32
 80068fc:	d01a      	beq.n	8006934 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800690c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800690e:	f7fc ff51 	bl	80037b4 <HAL_GetTick>
 8006912:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006914:	e00e      	b.n	8006934 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006916:	f7fc ff4d 	bl	80037b4 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	2b19      	cmp	r3, #25
 8006922:	d907      	bls.n	8006934 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	f043 0320 	orr.w	r3, r3, #32
 800692a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006932:	e006      	b.n	8006942 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b20      	cmp	r3, #32
 8006940:	d1e9      	bne.n	8006916 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	f003 0320 	and.w	r3, r3, #32
 800694c:	2b20      	cmp	r3, #32
 800694e:	d003      	beq.n	8006958 <I2C_IsErrorOccurred+0xe0>
 8006950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0aa      	beq.n	80068ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800695c:	2b00      	cmp	r3, #0
 800695e:	d103      	bne.n	8006968 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2220      	movs	r2, #32
 8006966:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006968:	6a3b      	ldr	r3, [r7, #32]
 800696a:	f043 0304 	orr.w	r3, r3, #4
 800696e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00b      	beq.n	80069a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	f043 0301 	orr.w	r3, r3, #1
 800698e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006998:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00b      	beq.n	80069c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80069aa:	6a3b      	ldr	r3, [r7, #32]
 80069ac:	f043 0308 	orr.w	r3, r3, #8
 80069b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00b      	beq.n	80069e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	f043 0302 	orr.w	r3, r3, #2
 80069d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80069e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d01c      	beq.n	8006a26 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f7ff fe45 	bl	800667c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6859      	ldr	r1, [r3, #4]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	4b0d      	ldr	r3, [pc, #52]	; (8006a34 <I2C_IsErrorOccurred+0x1bc>)
 80069fe:	400b      	ands	r3, r1
 8006a00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2220      	movs	r2, #32
 8006a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006a26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3728      	adds	r7, #40	; 0x28
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	fe00e800 	.word	0xfe00e800

08006a38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	607b      	str	r3, [r7, #4]
 8006a42:	460b      	mov	r3, r1
 8006a44:	817b      	strh	r3, [r7, #10]
 8006a46:	4613      	mov	r3, r2
 8006a48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a4a:	897b      	ldrh	r3, [r7, #10]
 8006a4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a50:	7a7b      	ldrb	r3, [r7, #9]
 8006a52:	041b      	lsls	r3, r3, #16
 8006a54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	0d5b      	lsrs	r3, r3, #21
 8006a72:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006a76:	4b08      	ldr	r3, [pc, #32]	; (8006a98 <I2C_TransferConfig+0x60>)
 8006a78:	430b      	orrs	r3, r1
 8006a7a:	43db      	mvns	r3, r3
 8006a7c:	ea02 0103 	and.w	r1, r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006a8a:	bf00      	nop
 8006a8c:	371c      	adds	r7, #28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	03ff63ff 	.word	0x03ff63ff

08006a9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	d138      	bne.n	8006b24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d101      	bne.n	8006ac0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006abc:	2302      	movs	r3, #2
 8006abe:	e032      	b.n	8006b26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2224      	movs	r2, #36	; 0x24
 8006acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 0201 	bic.w	r2, r2, #1
 8006ade:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006aee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6819      	ldr	r1, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	430a      	orrs	r2, r1
 8006afe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f042 0201 	orr.w	r2, r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b20:	2300      	movs	r3, #0
 8006b22:	e000      	b.n	8006b26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b24:	2302      	movs	r3, #2
  }
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b085      	sub	sp, #20
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b20      	cmp	r3, #32
 8006b46:	d139      	bne.n	8006bbc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d101      	bne.n	8006b56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b52:	2302      	movs	r3, #2
 8006b54:	e033      	b.n	8006bbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2224      	movs	r2, #36	; 0x24
 8006b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 0201 	bic.w	r2, r2, #1
 8006b74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	021b      	lsls	r3, r3, #8
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f042 0201 	orr.w	r2, r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e000      	b.n	8006bbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006bbc:	2302      	movs	r3, #2
  }
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
	...

08006bcc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e0bf      	b.n	8006d5e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d106      	bne.n	8006bf8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f8ba 	bl	8006d6c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699a      	ldr	r2, [r3, #24]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006c0e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6999      	ldr	r1, [r3, #24]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c24:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6899      	ldr	r1, [r3, #8]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	4b4a      	ldr	r3, [pc, #296]	; (8006d68 <HAL_LTDC_Init+0x19c>)
 8006c40:	400b      	ands	r3, r1
 8006c42:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	041b      	lsls	r3, r3, #16
 8006c4a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6899      	ldr	r1, [r3, #8]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	699a      	ldr	r2, [r3, #24]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68d9      	ldr	r1, [r3, #12]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	4b3e      	ldr	r3, [pc, #248]	; (8006d68 <HAL_LTDC_Init+0x19c>)
 8006c6e:	400b      	ands	r3, r1
 8006c70:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	041b      	lsls	r3, r3, #16
 8006c78:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68d9      	ldr	r1, [r3, #12]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a1a      	ldr	r2, [r3, #32]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	431a      	orrs	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6919      	ldr	r1, [r3, #16]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	4b33      	ldr	r3, [pc, #204]	; (8006d68 <HAL_LTDC_Init+0x19c>)
 8006c9c:	400b      	ands	r3, r1
 8006c9e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	041b      	lsls	r3, r3, #16
 8006ca6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6919      	ldr	r1, [r3, #16]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	431a      	orrs	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6959      	ldr	r1, [r3, #20]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	4b27      	ldr	r3, [pc, #156]	; (8006d68 <HAL_LTDC_Init+0x19c>)
 8006cca:	400b      	ands	r3, r1
 8006ccc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd2:	041b      	lsls	r3, r3, #16
 8006cd4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6959      	ldr	r1, [r3, #20]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cf2:	021b      	lsls	r3, r3, #8
 8006cf4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006cfc:	041b      	lsls	r3, r3, #16
 8006cfe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006d22:	431a      	orrs	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f042 0206 	orr.w	r2, r2, #6
 8006d3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699a      	ldr	r2, [r3, #24]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0201 	orr.w	r2, r2, #1
 8006d4a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	f000f800 	.word	0xf000f800

08006d6c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006d80:	b5b0      	push	{r4, r5, r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d101      	bne.n	8006d9a <HAL_LTDC_ConfigLayer+0x1a>
 8006d96:	2302      	movs	r3, #2
 8006d98:	e02c      	b.n	8006df4 <HAL_LTDC_ConfigLayer+0x74>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2202      	movs	r2, #2
 8006da6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2134      	movs	r1, #52	; 0x34
 8006db0:	fb01 f303 	mul.w	r3, r1, r3
 8006db4:	4413      	add	r3, r2
 8006db6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	4614      	mov	r4, r2
 8006dbe:	461d      	mov	r5, r3
 8006dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	68b9      	ldr	r1, [r7, #8]
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 f811 	bl	8006dfc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2201      	movs	r2, #1
 8006de0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bdb0      	pop	{r4, r5, r7, pc}

08006dfc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b089      	sub	sp, #36	; 0x24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	0c1b      	lsrs	r3, r3, #16
 8006e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e18:	4413      	add	r3, r2
 8006e1a:	041b      	lsls	r3, r3, #16
 8006e1c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	01db      	lsls	r3, r3, #7
 8006e28:	4413      	add	r3, r2
 8006e2a:	3384      	adds	r3, #132	; 0x84
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	6812      	ldr	r2, [r2, #0]
 8006e32:	4611      	mov	r1, r2
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	01d2      	lsls	r2, r2, #7
 8006e38:	440a      	add	r2, r1
 8006e3a:	3284      	adds	r2, #132	; 0x84
 8006e3c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006e40:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	0c1b      	lsrs	r3, r3, #16
 8006e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006e52:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006e54:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	01db      	lsls	r3, r3, #7
 8006e60:	440b      	add	r3, r1
 8006e62:	3384      	adds	r3, #132	; 0x84
 8006e64:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006e6a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	68da      	ldr	r2, [r3, #12]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e7a:	4413      	add	r3, r2
 8006e7c:	041b      	lsls	r3, r3, #16
 8006e7e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	461a      	mov	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	01db      	lsls	r3, r3, #7
 8006e8a:	4413      	add	r3, r2
 8006e8c:	3384      	adds	r3, #132	; 0x84
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	6812      	ldr	r2, [r2, #0]
 8006e94:	4611      	mov	r1, r2
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	01d2      	lsls	r2, r2, #7
 8006e9a:	440a      	add	r2, r1
 8006e9c:	3284      	adds	r2, #132	; 0x84
 8006e9e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006ea2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006eb2:	4413      	add	r3, r2
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	01db      	lsls	r3, r3, #7
 8006ec0:	440b      	add	r3, r1
 8006ec2:	3384      	adds	r3, #132	; 0x84
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	01db      	lsls	r3, r3, #7
 8006ed6:	4413      	add	r3, r2
 8006ed8:	3384      	adds	r3, #132	; 0x84
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	6812      	ldr	r2, [r2, #0]
 8006ee0:	4611      	mov	r1, r2
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	01d2      	lsls	r2, r2, #7
 8006ee6:	440a      	add	r2, r1
 8006ee8:	3284      	adds	r2, #132	; 0x84
 8006eea:	f023 0307 	bic.w	r3, r3, #7
 8006eee:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	01db      	lsls	r3, r3, #7
 8006efa:	4413      	add	r3, r2
 8006efc:	3384      	adds	r3, #132	; 0x84
 8006efe:	461a      	mov	r2, r3
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006f0c:	021b      	lsls	r3, r3, #8
 8006f0e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006f16:	041b      	lsls	r3, r3, #16
 8006f18:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	061b      	lsls	r3, r3, #24
 8006f20:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	01db      	lsls	r3, r3, #7
 8006f2c:	4413      	add	r3, r2
 8006f2e:	3384      	adds	r3, #132	; 0x84
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	01db      	lsls	r3, r3, #7
 8006f3c:	4413      	add	r3, r2
 8006f3e:	3384      	adds	r3, #132	; 0x84
 8006f40:	461a      	mov	r2, r3
 8006f42:	2300      	movs	r3, #0
 8006f44:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	431a      	orrs	r2, r3
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	431a      	orrs	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	01db      	lsls	r3, r3, #7
 8006f60:	440b      	add	r3, r1
 8006f62:	3384      	adds	r3, #132	; 0x84
 8006f64:	4619      	mov	r1, r3
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	461a      	mov	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	01db      	lsls	r3, r3, #7
 8006f76:	4413      	add	r3, r2
 8006f78:	3384      	adds	r3, #132	; 0x84
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	6812      	ldr	r2, [r2, #0]
 8006f80:	4611      	mov	r1, r2
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	01d2      	lsls	r2, r2, #7
 8006f86:	440a      	add	r2, r1
 8006f88:	3284      	adds	r2, #132	; 0x84
 8006f8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f8e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	461a      	mov	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	01db      	lsls	r3, r3, #7
 8006f9a:	4413      	add	r3, r2
 8006f9c:	3384      	adds	r3, #132	; 0x84
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	01db      	lsls	r3, r3, #7
 8006fb0:	4413      	add	r3, r2
 8006fb2:	3384      	adds	r3, #132	; 0x84
 8006fb4:	69da      	ldr	r2, [r3, #28]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	01db      	lsls	r3, r3, #7
 8006fc0:	440b      	add	r3, r1
 8006fc2:	3384      	adds	r3, #132	; 0x84
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	4b58      	ldr	r3, [pc, #352]	; (8007128 <LTDC_SetConfig+0x32c>)
 8006fc8:	4013      	ands	r3, r2
 8006fca:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	69da      	ldr	r2, [r3, #28]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	68f9      	ldr	r1, [r7, #12]
 8006fd6:	6809      	ldr	r1, [r1, #0]
 8006fd8:	4608      	mov	r0, r1
 8006fda:	6879      	ldr	r1, [r7, #4]
 8006fdc:	01c9      	lsls	r1, r1, #7
 8006fde:	4401      	add	r1, r0
 8006fe0:	3184      	adds	r1, #132	; 0x84
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	01db      	lsls	r3, r3, #7
 8006ff0:	4413      	add	r3, r2
 8006ff2:	3384      	adds	r3, #132	; 0x84
 8006ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	01db      	lsls	r3, r3, #7
 8007000:	4413      	add	r3, r2
 8007002:	3384      	adds	r3, #132	; 0x84
 8007004:	461a      	mov	r2, r3
 8007006:	2300      	movs	r3, #0
 8007008:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	01db      	lsls	r3, r3, #7
 8007014:	4413      	add	r3, r2
 8007016:	3384      	adds	r3, #132	; 0x84
 8007018:	461a      	mov	r2, r3
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d102      	bne.n	800702e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007028:	2304      	movs	r3, #4
 800702a:	61fb      	str	r3, [r7, #28]
 800702c:	e01b      	b.n	8007066 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d102      	bne.n	800703c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007036:	2303      	movs	r3, #3
 8007038:	61fb      	str	r3, [r7, #28]
 800703a:	e014      	b.n	8007066 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	2b04      	cmp	r3, #4
 8007042:	d00b      	beq.n	800705c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007048:	2b02      	cmp	r3, #2
 800704a:	d007      	beq.n	800705c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007050:	2b03      	cmp	r3, #3
 8007052:	d003      	beq.n	800705c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007058:	2b07      	cmp	r3, #7
 800705a:	d102      	bne.n	8007062 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800705c:	2302      	movs	r3, #2
 800705e:	61fb      	str	r3, [r7, #28]
 8007060:	e001      	b.n	8007066 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007062:	2301      	movs	r3, #1
 8007064:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	01db      	lsls	r3, r3, #7
 8007070:	4413      	add	r3, r2
 8007072:	3384      	adds	r3, #132	; 0x84
 8007074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	6812      	ldr	r2, [r2, #0]
 800707a:	4611      	mov	r1, r2
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	01d2      	lsls	r2, r2, #7
 8007080:	440a      	add	r2, r1
 8007082:	3284      	adds	r2, #132	; 0x84
 8007084:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007088:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708e:	69fa      	ldr	r2, [r7, #28]
 8007090:	fb02 f303 	mul.w	r3, r2, r3
 8007094:	041a      	lsls	r2, r3, #16
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	6859      	ldr	r1, [r3, #4]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	1acb      	subs	r3, r1, r3
 80070a0:	69f9      	ldr	r1, [r7, #28]
 80070a2:	fb01 f303 	mul.w	r3, r1, r3
 80070a6:	3307      	adds	r3, #7
 80070a8:	68f9      	ldr	r1, [r7, #12]
 80070aa:	6809      	ldr	r1, [r1, #0]
 80070ac:	4608      	mov	r0, r1
 80070ae:	6879      	ldr	r1, [r7, #4]
 80070b0:	01c9      	lsls	r1, r1, #7
 80070b2:	4401      	add	r1, r0
 80070b4:	3184      	adds	r1, #132	; 0x84
 80070b6:	4313      	orrs	r3, r2
 80070b8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	01db      	lsls	r3, r3, #7
 80070c4:	4413      	add	r3, r2
 80070c6:	3384      	adds	r3, #132	; 0x84
 80070c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4619      	mov	r1, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	01db      	lsls	r3, r3, #7
 80070d4:	440b      	add	r3, r1
 80070d6:	3384      	adds	r3, #132	; 0x84
 80070d8:	4619      	mov	r1, r3
 80070da:	4b14      	ldr	r3, [pc, #80]	; (800712c <LTDC_SetConfig+0x330>)
 80070dc:	4013      	ands	r3, r2
 80070de:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	461a      	mov	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	01db      	lsls	r3, r3, #7
 80070ea:	4413      	add	r3, r2
 80070ec:	3384      	adds	r3, #132	; 0x84
 80070ee:	461a      	mov	r2, r3
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	461a      	mov	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	01db      	lsls	r3, r3, #7
 8007100:	4413      	add	r3, r2
 8007102:	3384      	adds	r3, #132	; 0x84
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	6812      	ldr	r2, [r2, #0]
 800710a:	4611      	mov	r1, r2
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	01d2      	lsls	r2, r2, #7
 8007110:	440a      	add	r2, r1
 8007112:	3284      	adds	r2, #132	; 0x84
 8007114:	f043 0301 	orr.w	r3, r3, #1
 8007118:	6013      	str	r3, [r2, #0]
}
 800711a:	bf00      	nop
 800711c:	3724      	adds	r7, #36	; 0x24
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	fffff8f8 	.word	0xfffff8f8
 800712c:	fffff800 	.word	0xfffff800

08007130 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007138:	f7fc fb3c 	bl	80037b4 <HAL_GetTick>
 800713c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e03b      	b.n	80071c0 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0201 	bic.w	r2, r2, #1
 8007166:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007168:	e00f      	b.n	800718a <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800716a:	f7fc fb23 	bl	80037b4 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	2b05      	cmp	r3, #5
 8007176:	d908      	bls.n	800718a <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2240      	movs	r2, #64	; 0x40
 800717c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2203      	movs	r2, #3
 8007182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e01a      	b.n	80071c0 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1e8      	bne.n	800716a <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f9c1 	bl	8007520 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d101      	bne.n	80071da <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e048      	b.n	800726c <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68da      	ldr	r2, [r3, #12]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 0201 	bic.w	r2, r2, #1
 80071e8:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2200      	movs	r2, #0
 80071f0:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2200      	movs	r2, #0
 80071f8:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2200      	movs	r2, #0
 8007200:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2200      	movs	r2, #0
 8007208:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2200      	movs	r2, #0
 8007210:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2200      	movs	r2, #0
 8007218:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2200      	movs	r2, #0
 8007220:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2200      	movs	r2, #0
 8007228:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2200      	movs	r2, #0
 8007230:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2200      	movs	r2, #0
 8007238:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	221f      	movs	r2, #31
 8007240:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8007280:	2300      	movs	r3, #0
 8007282:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007284:	4b91      	ldr	r3, [pc, #580]	; (80074cc <HAL_MDMA_IRQHandler+0x254>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a91      	ldr	r2, [pc, #580]	; (80074d0 <HAL_MDMA_IRQHandler+0x258>)
 800728a:	fba2 2303 	umull	r2, r3, r2, r3
 800728e:	0a9b      	lsrs	r3, r3, #10
 8007290:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	461a      	mov	r2, r3
 8007298:	4b8e      	ldr	r3, [pc, #568]	; (80074d4 <HAL_MDMA_IRQHandler+0x25c>)
 800729a:	4413      	add	r3, r2
 800729c:	099b      	lsrs	r3, r3, #6
 800729e:	f003 031f 	and.w	r3, r3, #31
 80072a2:	2201      	movs	r2, #1
 80072a4:	fa02 f303 	lsl.w	r3, r2, r3
 80072a8:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80072aa:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	4013      	ands	r3, r2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f000 812d 	beq.w	8007514 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d054      	beq.n	8007372 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f003 0302 	and.w	r3, r3, #2
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d04d      	beq.n	8007372 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68da      	ldr	r2, [r3, #12]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0202 	bic.w	r2, r2, #2
 80072e4:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d106      	bne.n	8007306 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072fc:	f043 0201 	orr.w	r2, r3, #1
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	669a      	str	r2, [r3, #104]	; 0x68
 8007304:	e005      	b.n	8007312 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800730a:	f043 0202 	orr.w	r2, r3, #2
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007318:	2b00      	cmp	r3, #0
 800731a:	d005      	beq.n	8007328 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007320:	f043 0204 	orr.w	r2, r3, #4
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800732e:	2b00      	cmp	r3, #0
 8007330:	d005      	beq.n	800733e <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007336:	f043 0208 	orr.w	r2, r3, #8
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007344:	2b00      	cmp	r3, #0
 8007346:	d005      	beq.n	8007354 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800734c:	f043 0210 	orr.w	r2, r3, #16
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800735a:	2b00      	cmp	r3, #0
 800735c:	d005      	beq.n	800736a <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007362:	f043 0220 	orr.w	r2, r3, #32
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2201      	movs	r2, #1
 8007370:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0310 	and.w	r3, r3, #16
 800737c:	2b00      	cmp	r3, #0
 800737e:	d012      	beq.n	80073a6 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00b      	beq.n	80073a6 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2210      	movs	r2, #16
 8007394:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800739a:	2b00      	cmp	r3, #0
 800739c:	d003      	beq.n	80073a6 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0308 	and.w	r3, r3, #8
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d012      	beq.n	80073da <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f003 0310 	and.w	r3, r3, #16
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00b      	beq.n	80073da <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2208      	movs	r2, #8
 80073c8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0304 	and.w	r3, r3, #4
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d012      	beq.n	800740e <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f003 0308 	and.w	r3, r3, #8
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00b      	beq.n	800740e <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2204      	movs	r2, #4
 80073fc:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b00      	cmp	r3, #0
 800741a:	d039      	beq.n	8007490 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	f003 0304 	and.w	r3, r3, #4
 8007426:	2b00      	cmp	r3, #0
 8007428:	d032      	beq.n	8007490 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68da      	ldr	r2, [r3, #12]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8007438:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b04      	cmp	r3, #4
 8007444:	d110      	bne.n	8007468 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800745a:	2b00      	cmp	r3, #0
 800745c:	d05c      	beq.n	8007518 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	4798      	blx	r3
        }
        return;
 8007466:	e057      	b.n	8007518 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2202      	movs	r2, #2
 800746e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007484:	2b00      	cmp	r3, #0
 8007486:	d003      	beq.n	8007490 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007494:	2b00      	cmp	r3, #0
 8007496:	d040      	beq.n	800751a <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2204      	movs	r2, #4
 800749c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68da      	ldr	r2, [r3, #12]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 0201 	bic.w	r2, r2, #1
 80074ae:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	3301      	adds	r3, #1
 80074b4:	60bb      	str	r3, [r7, #8]
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d30d      	bcc.n	80074d8 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1f2      	bne.n	80074b0 <HAL_MDMA_IRQHandler+0x238>
 80074ca:	e006      	b.n	80074da <HAL_MDMA_IRQHandler+0x262>
 80074cc:	24000000 	.word	0x24000000
 80074d0:	1b4e81b5 	.word	0x1b4e81b5
 80074d4:	adffffc0 	.word	0xadffffc0
        break;
 80074d8:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d004      	beq.n	80074fa <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2203      	movs	r2, #3
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80074f8:	e003      	b.n	8007502 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007506:	2b00      	cmp	r3, #0
 8007508:	d007      	beq.n	800751a <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	4798      	blx	r3
 8007512:	e002      	b.n	800751a <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8007514:	bf00      	nop
 8007516:	e000      	b.n	800751a <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8007518:	bf00      	nop
    }
  }
}
 800751a:	3718      	adds	r7, #24
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	68d9      	ldr	r1, [r3, #12]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691a      	ldr	r2, [r3, #16]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	430a      	orrs	r2, r1
 8007536:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	695a      	ldr	r2, [r3, #20]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007546:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a1b      	ldr	r3, [r3, #32]
 800754c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007552:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007558:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800755e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007564:	3b01      	subs	r3, #1
 8007566:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8007568:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007574:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007576:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007580:	d107      	bne.n	8007592 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	691a      	ldr	r2, [r3, #16]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8007590:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2200      	movs	r2, #0
 8007598:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800759e:	2b00      	cmp	r3, #0
 80075a0:	da11      	bge.n	80075c6 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	695a      	ldr	r2, [r3, #20]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80075b0:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b6:	425b      	negs	r3, r3
 80075b8:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	b292      	uxth	r2, r2
 80075c2:	621a      	str	r2, [r3, #32]
 80075c4:	e006      	b.n	80075d4 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ca:	461a      	mov	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	b292      	uxth	r2, r2
 80075d2:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	2b00      	cmp	r3, #0
 80075da:	da15      	bge.n	8007608 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	695a      	ldr	r2, [r3, #20]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80075ea:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f0:	425b      	negs	r3, r3
 80075f2:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6a19      	ldr	r1, [r3, #32]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	041a      	lsls	r2, r3, #16
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	621a      	str	r2, [r3, #32]
 8007606:	e009      	b.n	800761c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6a19      	ldr	r1, [r3, #32]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007612:	041a      	lsls	r2, r3, #16
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007624:	d006      	beq.n	8007634 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	b2d2      	uxtb	r2, r2
 8007630:	629a      	str	r2, [r3, #40]	; 0x28
 8007632:	e003      	b.n	800763c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2200      	movs	r2, #0
 800763a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2200      	movs	r2, #0
 8007642:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007644:	bf00      	nop
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007658:	4b19      	ldr	r3, [pc, #100]	; (80076c0 <HAL_PWREx_ConfigSupply+0x70>)
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f003 0304 	and.w	r3, r3, #4
 8007660:	2b04      	cmp	r3, #4
 8007662:	d00a      	beq.n	800767a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007664:	4b16      	ldr	r3, [pc, #88]	; (80076c0 <HAL_PWREx_ConfigSupply+0x70>)
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f003 0307 	and.w	r3, r3, #7
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	429a      	cmp	r2, r3
 8007670:	d001      	beq.n	8007676 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e01f      	b.n	80076b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	e01d      	b.n	80076b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800767a:	4b11      	ldr	r3, [pc, #68]	; (80076c0 <HAL_PWREx_ConfigSupply+0x70>)
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	f023 0207 	bic.w	r2, r3, #7
 8007682:	490f      	ldr	r1, [pc, #60]	; (80076c0 <HAL_PWREx_ConfigSupply+0x70>)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4313      	orrs	r3, r2
 8007688:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800768a:	f7fc f893 	bl	80037b4 <HAL_GetTick>
 800768e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007690:	e009      	b.n	80076a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007692:	f7fc f88f 	bl	80037b4 <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076a0:	d901      	bls.n	80076a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e007      	b.n	80076b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80076a6:	4b06      	ldr	r3, [pc, #24]	; (80076c0 <HAL_PWREx_ConfigSupply+0x70>)
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076b2:	d1ee      	bne.n	8007692 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	58024800 	.word	0x58024800

080076c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b08c      	sub	sp, #48	; 0x30
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d102      	bne.n	80076d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	f000 bc48 	b.w	8007f68 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 8088 	beq.w	80077f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076e6:	4b99      	ldr	r3, [pc, #612]	; (800794c <HAL_RCC_OscConfig+0x288>)
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80076f0:	4b96      	ldr	r3, [pc, #600]	; (800794c <HAL_RCC_OscConfig+0x288>)
 80076f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80076f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f8:	2b10      	cmp	r3, #16
 80076fa:	d007      	beq.n	800770c <HAL_RCC_OscConfig+0x48>
 80076fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fe:	2b18      	cmp	r3, #24
 8007700:	d111      	bne.n	8007726 <HAL_RCC_OscConfig+0x62>
 8007702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007704:	f003 0303 	and.w	r3, r3, #3
 8007708:	2b02      	cmp	r3, #2
 800770a:	d10c      	bne.n	8007726 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800770c:	4b8f      	ldr	r3, [pc, #572]	; (800794c <HAL_RCC_OscConfig+0x288>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d06d      	beq.n	80077f4 <HAL_RCC_OscConfig+0x130>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d169      	bne.n	80077f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	f000 bc21 	b.w	8007f68 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800772e:	d106      	bne.n	800773e <HAL_RCC_OscConfig+0x7a>
 8007730:	4b86      	ldr	r3, [pc, #536]	; (800794c <HAL_RCC_OscConfig+0x288>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a85      	ldr	r2, [pc, #532]	; (800794c <HAL_RCC_OscConfig+0x288>)
 8007736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800773a:	6013      	str	r3, [r2, #0]
 800773c:	e02e      	b.n	800779c <HAL_RCC_OscConfig+0xd8>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10c      	bne.n	8007760 <HAL_RCC_OscConfig+0x9c>
 8007746:	4b81      	ldr	r3, [pc, #516]	; (800794c <HAL_RCC_OscConfig+0x288>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a80      	ldr	r2, [pc, #512]	; (800794c <HAL_RCC_OscConfig+0x288>)
 800774c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007750:	6013      	str	r3, [r2, #0]
 8007752:	4b7e      	ldr	r3, [pc, #504]	; (800794c <HAL_RCC_OscConfig+0x288>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a7d      	ldr	r2, [pc, #500]	; (800794c <HAL_RCC_OscConfig+0x288>)
 8007758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800775c:	6013      	str	r3, [r2, #0]
 800775e:	e01d      	b.n	800779c <HAL_RCC_OscConfig+0xd8>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007768:	d10c      	bne.n	8007784 <HAL_RCC_OscConfig+0xc0>
 800776a:	4b78      	ldr	r3, [pc, #480]	; (800794c <HAL_RCC_OscConfig+0x288>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a77      	ldr	r2, [pc, #476]	; (800794c <HAL_RCC_OscConfig+0x288>)
 8007770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	4b75      	ldr	r3, [pc, #468]	; (800794c <HAL_RCC_OscConfig+0x288>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a74      	ldr	r2, [pc, #464]	; (800794c <HAL_RCC_OscConfig+0x288>)
 800777c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007780:	6013      	str	r3, [r2, #0]
 8007782:	e00b      	b.n	800779c <HAL_RCC_OscConfig+0xd8>
 8007784:	4b71      	ldr	r3, [pc, #452]	; (800794c <HAL_RCC_OscConfig+0x288>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a70      	ldr	r2, [pc, #448]	; (800794c <HAL_RCC_OscConfig+0x288>)
 800778a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	4b6e      	ldr	r3, [pc, #440]	; (800794c <HAL_RCC_OscConfig+0x288>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a6d      	ldr	r2, [pc, #436]	; (800794c <HAL_RCC_OscConfig+0x288>)
 8007796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800779a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d013      	beq.n	80077cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a4:	f7fc f806 	bl	80037b4 <HAL_GetTick>
 80077a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077aa:	e008      	b.n	80077be <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077ac:	f7fc f802 	bl	80037b4 <HAL_GetTick>
 80077b0:	4602      	mov	r2, r0
 80077b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	2b64      	cmp	r3, #100	; 0x64
 80077b8:	d901      	bls.n	80077be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e3d4      	b.n	8007f68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077be:	4b63      	ldr	r3, [pc, #396]	; (800794c <HAL_RCC_OscConfig+0x288>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0f0      	beq.n	80077ac <HAL_RCC_OscConfig+0xe8>
 80077ca:	e014      	b.n	80077f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077cc:	f7fb fff2 	bl	80037b4 <HAL_GetTick>
 80077d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80077d2:	e008      	b.n	80077e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077d4:	f7fb ffee 	bl	80037b4 <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	2b64      	cmp	r3, #100	; 0x64
 80077e0:	d901      	bls.n	80077e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e3c0      	b.n	8007f68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80077e6:	4b59      	ldr	r3, [pc, #356]	; (800794c <HAL_RCC_OscConfig+0x288>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1f0      	bne.n	80077d4 <HAL_RCC_OscConfig+0x110>
 80077f2:	e000      	b.n	80077f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 80ca 	beq.w	8007998 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007804:	4b51      	ldr	r3, [pc, #324]	; (800794c <HAL_RCC_OscConfig+0x288>)
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800780c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800780e:	4b4f      	ldr	r3, [pc, #316]	; (800794c <HAL_RCC_OscConfig+0x288>)
 8007810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007812:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d007      	beq.n	800782a <HAL_RCC_OscConfig+0x166>
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	2b18      	cmp	r3, #24
 800781e:	d156      	bne.n	80078ce <HAL_RCC_OscConfig+0x20a>
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	f003 0303 	and.w	r3, r3, #3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d151      	bne.n	80078ce <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800782a:	4b48      	ldr	r3, [pc, #288]	; (800794c <HAL_RCC_OscConfig+0x288>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0304 	and.w	r3, r3, #4
 8007832:	2b00      	cmp	r3, #0
 8007834:	d005      	beq.n	8007842 <HAL_RCC_OscConfig+0x17e>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e392      	b.n	8007f68 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007842:	4b42      	ldr	r3, [pc, #264]	; (800794c <HAL_RCC_OscConfig+0x288>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f023 0219 	bic.w	r2, r3, #25
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	493f      	ldr	r1, [pc, #252]	; (800794c <HAL_RCC_OscConfig+0x288>)
 8007850:	4313      	orrs	r3, r2
 8007852:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007854:	f7fb ffae 	bl	80037b4 <HAL_GetTick>
 8007858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800785a:	e008      	b.n	800786e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800785c:	f7fb ffaa 	bl	80037b4 <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	2b02      	cmp	r3, #2
 8007868:	d901      	bls.n	800786e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e37c      	b.n	8007f68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800786e:	4b37      	ldr	r3, [pc, #220]	; (800794c <HAL_RCC_OscConfig+0x288>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0304 	and.w	r3, r3, #4
 8007876:	2b00      	cmp	r3, #0
 8007878:	d0f0      	beq.n	800785c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800787a:	f7fb ffa7 	bl	80037cc <HAL_GetREVID>
 800787e:	4603      	mov	r3, r0
 8007880:	f241 0203 	movw	r2, #4099	; 0x1003
 8007884:	4293      	cmp	r3, r2
 8007886:	d817      	bhi.n	80078b8 <HAL_RCC_OscConfig+0x1f4>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	2b40      	cmp	r3, #64	; 0x40
 800788e:	d108      	bne.n	80078a2 <HAL_RCC_OscConfig+0x1de>
 8007890:	4b2e      	ldr	r3, [pc, #184]	; (800794c <HAL_RCC_OscConfig+0x288>)
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007898:	4a2c      	ldr	r2, [pc, #176]	; (800794c <HAL_RCC_OscConfig+0x288>)
 800789a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800789e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078a0:	e07a      	b.n	8007998 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078a2:	4b2a      	ldr	r3, [pc, #168]	; (800794c <HAL_RCC_OscConfig+0x288>)
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	031b      	lsls	r3, r3, #12
 80078b0:	4926      	ldr	r1, [pc, #152]	; (800794c <HAL_RCC_OscConfig+0x288>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078b6:	e06f      	b.n	8007998 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078b8:	4b24      	ldr	r3, [pc, #144]	; (800794c <HAL_RCC_OscConfig+0x288>)
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	061b      	lsls	r3, r3, #24
 80078c6:	4921      	ldr	r1, [pc, #132]	; (800794c <HAL_RCC_OscConfig+0x288>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078cc:	e064      	b.n	8007998 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d047      	beq.n	8007966 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80078d6:	4b1d      	ldr	r3, [pc, #116]	; (800794c <HAL_RCC_OscConfig+0x288>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f023 0219 	bic.w	r2, r3, #25
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	491a      	ldr	r1, [pc, #104]	; (800794c <HAL_RCC_OscConfig+0x288>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e8:	f7fb ff64 	bl	80037b4 <HAL_GetTick>
 80078ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078ee:	e008      	b.n	8007902 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078f0:	f7fb ff60 	bl	80037b4 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d901      	bls.n	8007902 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e332      	b.n	8007f68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007902:	4b12      	ldr	r3, [pc, #72]	; (800794c <HAL_RCC_OscConfig+0x288>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0304 	and.w	r3, r3, #4
 800790a:	2b00      	cmp	r3, #0
 800790c:	d0f0      	beq.n	80078f0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800790e:	f7fb ff5d 	bl	80037cc <HAL_GetREVID>
 8007912:	4603      	mov	r3, r0
 8007914:	f241 0203 	movw	r2, #4099	; 0x1003
 8007918:	4293      	cmp	r3, r2
 800791a:	d819      	bhi.n	8007950 <HAL_RCC_OscConfig+0x28c>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	2b40      	cmp	r3, #64	; 0x40
 8007922:	d108      	bne.n	8007936 <HAL_RCC_OscConfig+0x272>
 8007924:	4b09      	ldr	r3, [pc, #36]	; (800794c <HAL_RCC_OscConfig+0x288>)
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800792c:	4a07      	ldr	r2, [pc, #28]	; (800794c <HAL_RCC_OscConfig+0x288>)
 800792e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007932:	6053      	str	r3, [r2, #4]
 8007934:	e030      	b.n	8007998 <HAL_RCC_OscConfig+0x2d4>
 8007936:	4b05      	ldr	r3, [pc, #20]	; (800794c <HAL_RCC_OscConfig+0x288>)
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	031b      	lsls	r3, r3, #12
 8007944:	4901      	ldr	r1, [pc, #4]	; (800794c <HAL_RCC_OscConfig+0x288>)
 8007946:	4313      	orrs	r3, r2
 8007948:	604b      	str	r3, [r1, #4]
 800794a:	e025      	b.n	8007998 <HAL_RCC_OscConfig+0x2d4>
 800794c:	58024400 	.word	0x58024400
 8007950:	4b9a      	ldr	r3, [pc, #616]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	061b      	lsls	r3, r3, #24
 800795e:	4997      	ldr	r1, [pc, #604]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007960:	4313      	orrs	r3, r2
 8007962:	604b      	str	r3, [r1, #4]
 8007964:	e018      	b.n	8007998 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007966:	4b95      	ldr	r3, [pc, #596]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a94      	ldr	r2, [pc, #592]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 800796c:	f023 0301 	bic.w	r3, r3, #1
 8007970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007972:	f7fb ff1f 	bl	80037b4 <HAL_GetTick>
 8007976:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007978:	e008      	b.n	800798c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800797a:	f7fb ff1b 	bl	80037b4 <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	2b02      	cmp	r3, #2
 8007986:	d901      	bls.n	800798c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e2ed      	b.n	8007f68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800798c:	4b8b      	ldr	r3, [pc, #556]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 0304 	and.w	r3, r3, #4
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1f0      	bne.n	800797a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 0310 	and.w	r3, r3, #16
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 80a9 	beq.w	8007af8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079a6:	4b85      	ldr	r3, [pc, #532]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80079b0:	4b82      	ldr	r3, [pc, #520]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 80079b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	2b08      	cmp	r3, #8
 80079ba:	d007      	beq.n	80079cc <HAL_RCC_OscConfig+0x308>
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	2b18      	cmp	r3, #24
 80079c0:	d13a      	bne.n	8007a38 <HAL_RCC_OscConfig+0x374>
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f003 0303 	and.w	r3, r3, #3
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d135      	bne.n	8007a38 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079cc:	4b7b      	ldr	r3, [pc, #492]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d005      	beq.n	80079e4 <HAL_RCC_OscConfig+0x320>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	69db      	ldr	r3, [r3, #28]
 80079dc:	2b80      	cmp	r3, #128	; 0x80
 80079de:	d001      	beq.n	80079e4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e2c1      	b.n	8007f68 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80079e4:	f7fb fef2 	bl	80037cc <HAL_GetREVID>
 80079e8:	4603      	mov	r3, r0
 80079ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d817      	bhi.n	8007a22 <HAL_RCC_OscConfig+0x35e>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	2b20      	cmp	r3, #32
 80079f8:	d108      	bne.n	8007a0c <HAL_RCC_OscConfig+0x348>
 80079fa:	4b70      	ldr	r3, [pc, #448]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007a02:	4a6e      	ldr	r2, [pc, #440]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007a04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a08:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a0a:	e075      	b.n	8007af8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a0c:	4b6b      	ldr	r3, [pc, #428]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a1b      	ldr	r3, [r3, #32]
 8007a18:	069b      	lsls	r3, r3, #26
 8007a1a:	4968      	ldr	r1, [pc, #416]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a20:	e06a      	b.n	8007af8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a22:	4b66      	ldr	r3, [pc, #408]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	061b      	lsls	r3, r3, #24
 8007a30:	4962      	ldr	r1, [pc, #392]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a36:	e05f      	b.n	8007af8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d042      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007a40:	4b5e      	ldr	r3, [pc, #376]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a5d      	ldr	r2, [pc, #372]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a4c:	f7fb feb2 	bl	80037b4 <HAL_GetTick>
 8007a50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a52:	e008      	b.n	8007a66 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007a54:	f7fb feae 	bl	80037b4 <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d901      	bls.n	8007a66 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e280      	b.n	8007f68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a66:	4b55      	ldr	r3, [pc, #340]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d0f0      	beq.n	8007a54 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a72:	f7fb feab 	bl	80037cc <HAL_GetREVID>
 8007a76:	4603      	mov	r3, r0
 8007a78:	f241 0203 	movw	r2, #4099	; 0x1003
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d817      	bhi.n	8007ab0 <HAL_RCC_OscConfig+0x3ec>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a1b      	ldr	r3, [r3, #32]
 8007a84:	2b20      	cmp	r3, #32
 8007a86:	d108      	bne.n	8007a9a <HAL_RCC_OscConfig+0x3d6>
 8007a88:	4b4c      	ldr	r3, [pc, #304]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007a90:	4a4a      	ldr	r2, [pc, #296]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007a92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a96:	6053      	str	r3, [r2, #4]
 8007a98:	e02e      	b.n	8007af8 <HAL_RCC_OscConfig+0x434>
 8007a9a:	4b48      	ldr	r3, [pc, #288]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	069b      	lsls	r3, r3, #26
 8007aa8:	4944      	ldr	r1, [pc, #272]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	604b      	str	r3, [r1, #4]
 8007aae:	e023      	b.n	8007af8 <HAL_RCC_OscConfig+0x434>
 8007ab0:	4b42      	ldr	r3, [pc, #264]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a1b      	ldr	r3, [r3, #32]
 8007abc:	061b      	lsls	r3, r3, #24
 8007abe:	493f      	ldr	r1, [pc, #252]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	60cb      	str	r3, [r1, #12]
 8007ac4:	e018      	b.n	8007af8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007ac6:	4b3d      	ldr	r3, [pc, #244]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a3c      	ldr	r2, [pc, #240]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007acc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad2:	f7fb fe6f 	bl	80037b4 <HAL_GetTick>
 8007ad6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ad8:	e008      	b.n	8007aec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007ada:	f7fb fe6b 	bl	80037b4 <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d901      	bls.n	8007aec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e23d      	b.n	8007f68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007aec:	4b33      	ldr	r3, [pc, #204]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1f0      	bne.n	8007ada <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0308 	and.w	r3, r3, #8
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d036      	beq.n	8007b72 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d019      	beq.n	8007b40 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b0c:	4b2b      	ldr	r3, [pc, #172]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b10:	4a2a      	ldr	r2, [pc, #168]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007b12:	f043 0301 	orr.w	r3, r3, #1
 8007b16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b18:	f7fb fe4c 	bl	80037b4 <HAL_GetTick>
 8007b1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b1e:	e008      	b.n	8007b32 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b20:	f7fb fe48 	bl	80037b4 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d901      	bls.n	8007b32 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e21a      	b.n	8007f68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b32:	4b22      	ldr	r3, [pc, #136]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d0f0      	beq.n	8007b20 <HAL_RCC_OscConfig+0x45c>
 8007b3e:	e018      	b.n	8007b72 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b40:	4b1e      	ldr	r3, [pc, #120]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b44:	4a1d      	ldr	r2, [pc, #116]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007b46:	f023 0301 	bic.w	r3, r3, #1
 8007b4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b4c:	f7fb fe32 	bl	80037b4 <HAL_GetTick>
 8007b50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b52:	e008      	b.n	8007b66 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b54:	f7fb fe2e 	bl	80037b4 <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d901      	bls.n	8007b66 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e200      	b.n	8007f68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b66:	4b15      	ldr	r3, [pc, #84]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b6a:	f003 0302 	and.w	r3, r3, #2
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1f0      	bne.n	8007b54 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0320 	and.w	r3, r3, #32
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d039      	beq.n	8007bf2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d01c      	beq.n	8007bc0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007b86:	4b0d      	ldr	r3, [pc, #52]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a0c      	ldr	r2, [pc, #48]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007b8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007b92:	f7fb fe0f 	bl	80037b4 <HAL_GetTick>
 8007b96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007b98:	e008      	b.n	8007bac <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b9a:	f7fb fe0b 	bl	80037b4 <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d901      	bls.n	8007bac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e1dd      	b.n	8007f68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007bac:	4b03      	ldr	r3, [pc, #12]	; (8007bbc <HAL_RCC_OscConfig+0x4f8>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d0f0      	beq.n	8007b9a <HAL_RCC_OscConfig+0x4d6>
 8007bb8:	e01b      	b.n	8007bf2 <HAL_RCC_OscConfig+0x52e>
 8007bba:	bf00      	nop
 8007bbc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007bc0:	4b9b      	ldr	r3, [pc, #620]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a9a      	ldr	r2, [pc, #616]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007bc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007bcc:	f7fb fdf2 	bl	80037b4 <HAL_GetTick>
 8007bd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007bd2:	e008      	b.n	8007be6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007bd4:	f7fb fdee 	bl	80037b4 <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d901      	bls.n	8007be6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e1c0      	b.n	8007f68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007be6:	4b92      	ldr	r3, [pc, #584]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1f0      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 0304 	and.w	r3, r3, #4
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f000 8081 	beq.w	8007d02 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007c00:	4b8c      	ldr	r3, [pc, #560]	; (8007e34 <HAL_RCC_OscConfig+0x770>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a8b      	ldr	r2, [pc, #556]	; (8007e34 <HAL_RCC_OscConfig+0x770>)
 8007c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c0c:	f7fb fdd2 	bl	80037b4 <HAL_GetTick>
 8007c10:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c12:	e008      	b.n	8007c26 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c14:	f7fb fdce 	bl	80037b4 <HAL_GetTick>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	2b64      	cmp	r3, #100	; 0x64
 8007c20:	d901      	bls.n	8007c26 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e1a0      	b.n	8007f68 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c26:	4b83      	ldr	r3, [pc, #524]	; (8007e34 <HAL_RCC_OscConfig+0x770>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0f0      	beq.n	8007c14 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d106      	bne.n	8007c48 <HAL_RCC_OscConfig+0x584>
 8007c3a:	4b7d      	ldr	r3, [pc, #500]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c3e:	4a7c      	ldr	r2, [pc, #496]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007c40:	f043 0301 	orr.w	r3, r3, #1
 8007c44:	6713      	str	r3, [r2, #112]	; 0x70
 8007c46:	e02d      	b.n	8007ca4 <HAL_RCC_OscConfig+0x5e0>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10c      	bne.n	8007c6a <HAL_RCC_OscConfig+0x5a6>
 8007c50:	4b77      	ldr	r3, [pc, #476]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c54:	4a76      	ldr	r2, [pc, #472]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007c56:	f023 0301 	bic.w	r3, r3, #1
 8007c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8007c5c:	4b74      	ldr	r3, [pc, #464]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c60:	4a73      	ldr	r2, [pc, #460]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007c62:	f023 0304 	bic.w	r3, r3, #4
 8007c66:	6713      	str	r3, [r2, #112]	; 0x70
 8007c68:	e01c      	b.n	8007ca4 <HAL_RCC_OscConfig+0x5e0>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	2b05      	cmp	r3, #5
 8007c70:	d10c      	bne.n	8007c8c <HAL_RCC_OscConfig+0x5c8>
 8007c72:	4b6f      	ldr	r3, [pc, #444]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c76:	4a6e      	ldr	r2, [pc, #440]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007c78:	f043 0304 	orr.w	r3, r3, #4
 8007c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8007c7e:	4b6c      	ldr	r3, [pc, #432]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c82:	4a6b      	ldr	r2, [pc, #428]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007c84:	f043 0301 	orr.w	r3, r3, #1
 8007c88:	6713      	str	r3, [r2, #112]	; 0x70
 8007c8a:	e00b      	b.n	8007ca4 <HAL_RCC_OscConfig+0x5e0>
 8007c8c:	4b68      	ldr	r3, [pc, #416]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c90:	4a67      	ldr	r2, [pc, #412]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007c92:	f023 0301 	bic.w	r3, r3, #1
 8007c96:	6713      	str	r3, [r2, #112]	; 0x70
 8007c98:	4b65      	ldr	r3, [pc, #404]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9c:	4a64      	ldr	r2, [pc, #400]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007c9e:	f023 0304 	bic.w	r3, r3, #4
 8007ca2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d015      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cac:	f7fb fd82 	bl	80037b4 <HAL_GetTick>
 8007cb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cb2:	e00a      	b.n	8007cca <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cb4:	f7fb fd7e 	bl	80037b4 <HAL_GetTick>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d901      	bls.n	8007cca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e14e      	b.n	8007f68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cca:	4b59      	ldr	r3, [pc, #356]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0ee      	beq.n	8007cb4 <HAL_RCC_OscConfig+0x5f0>
 8007cd6:	e014      	b.n	8007d02 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cd8:	f7fb fd6c 	bl	80037b4 <HAL_GetTick>
 8007cdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007cde:	e00a      	b.n	8007cf6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ce0:	f7fb fd68 	bl	80037b4 <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d901      	bls.n	8007cf6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e138      	b.n	8007f68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007cf6:	4b4e      	ldr	r3, [pc, #312]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfa:	f003 0302 	and.w	r3, r3, #2
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1ee      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f000 812d 	beq.w	8007f66 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007d0c:	4b48      	ldr	r3, [pc, #288]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d14:	2b18      	cmp	r3, #24
 8007d16:	f000 80bd 	beq.w	8007e94 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	f040 809e 	bne.w	8007e60 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d24:	4b42      	ldr	r3, [pc, #264]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a41      	ldr	r2, [pc, #260]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d30:	f7fb fd40 	bl	80037b4 <HAL_GetTick>
 8007d34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d36:	e008      	b.n	8007d4a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d38:	f7fb fd3c 	bl	80037b4 <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d901      	bls.n	8007d4a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e10e      	b.n	8007f68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d4a:	4b39      	ldr	r3, [pc, #228]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1f0      	bne.n	8007d38 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d56:	4b36      	ldr	r3, [pc, #216]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d5a:	4b37      	ldr	r3, [pc, #220]	; (8007e38 <HAL_RCC_OscConfig+0x774>)
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007d66:	0112      	lsls	r2, r2, #4
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	4931      	ldr	r1, [pc, #196]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	628b      	str	r3, [r1, #40]	; 0x28
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d74:	3b01      	subs	r3, #1
 8007d76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	025b      	lsls	r3, r3, #9
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	431a      	orrs	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	041b      	lsls	r3, r3, #16
 8007d8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d92:	431a      	orrs	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	061b      	lsls	r3, r3, #24
 8007d9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007da0:	4923      	ldr	r1, [pc, #140]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007da6:	4b22      	ldr	r3, [pc, #136]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007daa:	4a21      	ldr	r2, [pc, #132]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007dac:	f023 0301 	bic.w	r3, r3, #1
 8007db0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007db2:	4b1f      	ldr	r3, [pc, #124]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007db6:	4b21      	ldr	r3, [pc, #132]	; (8007e3c <HAL_RCC_OscConfig+0x778>)
 8007db8:	4013      	ands	r3, r2
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007dbe:	00d2      	lsls	r2, r2, #3
 8007dc0:	491b      	ldr	r1, [pc, #108]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007dc6:	4b1a      	ldr	r3, [pc, #104]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dca:	f023 020c 	bic.w	r2, r3, #12
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd2:	4917      	ldr	r1, [pc, #92]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007dd8:	4b15      	ldr	r3, [pc, #84]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ddc:	f023 0202 	bic.w	r2, r3, #2
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de4:	4912      	ldr	r1, [pc, #72]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007de6:	4313      	orrs	r3, r2
 8007de8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007dea:	4b11      	ldr	r3, [pc, #68]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dee:	4a10      	ldr	r2, [pc, #64]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007df4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df6:	4b0e      	ldr	r3, [pc, #56]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfa:	4a0d      	ldr	r2, [pc, #52]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007e02:	4b0b      	ldr	r3, [pc, #44]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e06:	4a0a      	ldr	r2, [pc, #40]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007e0e:	4b08      	ldr	r3, [pc, #32]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e12:	4a07      	ldr	r2, [pc, #28]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007e14:	f043 0301 	orr.w	r3, r3, #1
 8007e18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e1a:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a04      	ldr	r2, [pc, #16]	; (8007e30 <HAL_RCC_OscConfig+0x76c>)
 8007e20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e26:	f7fb fcc5 	bl	80037b4 <HAL_GetTick>
 8007e2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e2c:	e011      	b.n	8007e52 <HAL_RCC_OscConfig+0x78e>
 8007e2e:	bf00      	nop
 8007e30:	58024400 	.word	0x58024400
 8007e34:	58024800 	.word	0x58024800
 8007e38:	fffffc0c 	.word	0xfffffc0c
 8007e3c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e40:	f7fb fcb8 	bl	80037b4 <HAL_GetTick>
 8007e44:	4602      	mov	r2, r0
 8007e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d901      	bls.n	8007e52 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e08a      	b.n	8007f68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e52:	4b47      	ldr	r3, [pc, #284]	; (8007f70 <HAL_RCC_OscConfig+0x8ac>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d0f0      	beq.n	8007e40 <HAL_RCC_OscConfig+0x77c>
 8007e5e:	e082      	b.n	8007f66 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e60:	4b43      	ldr	r3, [pc, #268]	; (8007f70 <HAL_RCC_OscConfig+0x8ac>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a42      	ldr	r2, [pc, #264]	; (8007f70 <HAL_RCC_OscConfig+0x8ac>)
 8007e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e6c:	f7fb fca2 	bl	80037b4 <HAL_GetTick>
 8007e70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e72:	e008      	b.n	8007e86 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e74:	f7fb fc9e 	bl	80037b4 <HAL_GetTick>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d901      	bls.n	8007e86 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e070      	b.n	8007f68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e86:	4b3a      	ldr	r3, [pc, #232]	; (8007f70 <HAL_RCC_OscConfig+0x8ac>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1f0      	bne.n	8007e74 <HAL_RCC_OscConfig+0x7b0>
 8007e92:	e068      	b.n	8007f66 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007e94:	4b36      	ldr	r3, [pc, #216]	; (8007f70 <HAL_RCC_OscConfig+0x8ac>)
 8007e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e98:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007e9a:	4b35      	ldr	r3, [pc, #212]	; (8007f70 <HAL_RCC_OscConfig+0x8ac>)
 8007e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e9e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d031      	beq.n	8007f0c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	f003 0203 	and.w	r2, r3, #3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d12a      	bne.n	8007f0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	091b      	lsrs	r3, r3, #4
 8007eba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d122      	bne.n	8007f0c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d11a      	bne.n	8007f0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	0a5b      	lsrs	r3, r3, #9
 8007eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d111      	bne.n	8007f0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	0c1b      	lsrs	r3, r3, #16
 8007eec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d108      	bne.n	8007f0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	0e1b      	lsrs	r3, r3, #24
 8007efe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f06:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d001      	beq.n	8007f10 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e02b      	b.n	8007f68 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007f10:	4b17      	ldr	r3, [pc, #92]	; (8007f70 <HAL_RCC_OscConfig+0x8ac>)
 8007f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f14:	08db      	lsrs	r3, r3, #3
 8007f16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f1a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d01f      	beq.n	8007f66 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007f26:	4b12      	ldr	r3, [pc, #72]	; (8007f70 <HAL_RCC_OscConfig+0x8ac>)
 8007f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2a:	4a11      	ldr	r2, [pc, #68]	; (8007f70 <HAL_RCC_OscConfig+0x8ac>)
 8007f2c:	f023 0301 	bic.w	r3, r3, #1
 8007f30:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007f32:	f7fb fc3f 	bl	80037b4 <HAL_GetTick>
 8007f36:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007f38:	bf00      	nop
 8007f3a:	f7fb fc3b 	bl	80037b4 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d0f9      	beq.n	8007f3a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007f46:	4b0a      	ldr	r3, [pc, #40]	; (8007f70 <HAL_RCC_OscConfig+0x8ac>)
 8007f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f4a:	4b0a      	ldr	r3, [pc, #40]	; (8007f74 <HAL_RCC_OscConfig+0x8b0>)
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007f52:	00d2      	lsls	r2, r2, #3
 8007f54:	4906      	ldr	r1, [pc, #24]	; (8007f70 <HAL_RCC_OscConfig+0x8ac>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007f5a:	4b05      	ldr	r3, [pc, #20]	; (8007f70 <HAL_RCC_OscConfig+0x8ac>)
 8007f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5e:	4a04      	ldr	r2, [pc, #16]	; (8007f70 <HAL_RCC_OscConfig+0x8ac>)
 8007f60:	f043 0301 	orr.w	r3, r3, #1
 8007f64:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3730      	adds	r7, #48	; 0x30
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	58024400 	.word	0x58024400
 8007f74:	ffff0007 	.word	0xffff0007

08007f78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d101      	bne.n	8007f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e19c      	b.n	80082c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f8c:	4b8a      	ldr	r3, [pc, #552]	; (80081b8 <HAL_RCC_ClockConfig+0x240>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 030f 	and.w	r3, r3, #15
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d910      	bls.n	8007fbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f9a:	4b87      	ldr	r3, [pc, #540]	; (80081b8 <HAL_RCC_ClockConfig+0x240>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f023 020f 	bic.w	r2, r3, #15
 8007fa2:	4985      	ldr	r1, [pc, #532]	; (80081b8 <HAL_RCC_ClockConfig+0x240>)
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007faa:	4b83      	ldr	r3, [pc, #524]	; (80081b8 <HAL_RCC_ClockConfig+0x240>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 030f 	and.w	r3, r3, #15
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d001      	beq.n	8007fbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e184      	b.n	80082c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0304 	and.w	r3, r3, #4
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d010      	beq.n	8007fea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	691a      	ldr	r2, [r3, #16]
 8007fcc:	4b7b      	ldr	r3, [pc, #492]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d908      	bls.n	8007fea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007fd8:	4b78      	ldr	r3, [pc, #480]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	4975      	ldr	r1, [pc, #468]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 0308 	and.w	r3, r3, #8
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d010      	beq.n	8008018 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	695a      	ldr	r2, [r3, #20]
 8007ffa:	4b70      	ldr	r3, [pc, #448]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 8007ffc:	69db      	ldr	r3, [r3, #28]
 8007ffe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008002:	429a      	cmp	r2, r3
 8008004:	d908      	bls.n	8008018 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008006:	4b6d      	ldr	r3, [pc, #436]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	496a      	ldr	r1, [pc, #424]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 8008014:	4313      	orrs	r3, r2
 8008016:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0310 	and.w	r3, r3, #16
 8008020:	2b00      	cmp	r3, #0
 8008022:	d010      	beq.n	8008046 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	699a      	ldr	r2, [r3, #24]
 8008028:	4b64      	ldr	r3, [pc, #400]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 800802a:	69db      	ldr	r3, [r3, #28]
 800802c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008030:	429a      	cmp	r2, r3
 8008032:	d908      	bls.n	8008046 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008034:	4b61      	ldr	r3, [pc, #388]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 8008036:	69db      	ldr	r3, [r3, #28]
 8008038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	495e      	ldr	r1, [pc, #376]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 8008042:	4313      	orrs	r3, r2
 8008044:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0320 	and.w	r3, r3, #32
 800804e:	2b00      	cmp	r3, #0
 8008050:	d010      	beq.n	8008074 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	69da      	ldr	r2, [r3, #28]
 8008056:	4b59      	ldr	r3, [pc, #356]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800805e:	429a      	cmp	r2, r3
 8008060:	d908      	bls.n	8008074 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008062:	4b56      	ldr	r3, [pc, #344]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	69db      	ldr	r3, [r3, #28]
 800806e:	4953      	ldr	r1, [pc, #332]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 8008070:	4313      	orrs	r3, r2
 8008072:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0302 	and.w	r3, r3, #2
 800807c:	2b00      	cmp	r3, #0
 800807e:	d010      	beq.n	80080a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68da      	ldr	r2, [r3, #12]
 8008084:	4b4d      	ldr	r3, [pc, #308]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	f003 030f 	and.w	r3, r3, #15
 800808c:	429a      	cmp	r2, r3
 800808e:	d908      	bls.n	80080a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008090:	4b4a      	ldr	r3, [pc, #296]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	f023 020f 	bic.w	r2, r3, #15
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	4947      	ldr	r1, [pc, #284]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d055      	beq.n	800815a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80080ae:	4b43      	ldr	r3, [pc, #268]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	4940      	ldr	r1, [pc, #256]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d107      	bne.n	80080d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080c8:	4b3c      	ldr	r3, [pc, #240]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d121      	bne.n	8008118 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e0f6      	b.n	80082c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	2b03      	cmp	r3, #3
 80080de:	d107      	bne.n	80080f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080e0:	4b36      	ldr	r3, [pc, #216]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d115      	bne.n	8008118 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e0ea      	b.n	80082c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d107      	bne.n	8008108 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080f8:	4b30      	ldr	r3, [pc, #192]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008100:	2b00      	cmp	r3, #0
 8008102:	d109      	bne.n	8008118 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e0de      	b.n	80082c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008108:	4b2c      	ldr	r3, [pc, #176]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0304 	and.w	r3, r3, #4
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e0d6      	b.n	80082c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008118:	4b28      	ldr	r3, [pc, #160]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	f023 0207 	bic.w	r2, r3, #7
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	4925      	ldr	r1, [pc, #148]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 8008126:	4313      	orrs	r3, r2
 8008128:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800812a:	f7fb fb43 	bl	80037b4 <HAL_GetTick>
 800812e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008130:	e00a      	b.n	8008148 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008132:	f7fb fb3f 	bl	80037b4 <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008140:	4293      	cmp	r3, r2
 8008142:	d901      	bls.n	8008148 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008144:	2303      	movs	r3, #3
 8008146:	e0be      	b.n	80082c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008148:	4b1c      	ldr	r3, [pc, #112]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	00db      	lsls	r3, r3, #3
 8008156:	429a      	cmp	r2, r3
 8008158:	d1eb      	bne.n	8008132 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0302 	and.w	r3, r3, #2
 8008162:	2b00      	cmp	r3, #0
 8008164:	d010      	beq.n	8008188 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68da      	ldr	r2, [r3, #12]
 800816a:	4b14      	ldr	r3, [pc, #80]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	f003 030f 	and.w	r3, r3, #15
 8008172:	429a      	cmp	r2, r3
 8008174:	d208      	bcs.n	8008188 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008176:	4b11      	ldr	r3, [pc, #68]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	f023 020f 	bic.w	r2, r3, #15
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	490e      	ldr	r1, [pc, #56]	; (80081bc <HAL_RCC_ClockConfig+0x244>)
 8008184:	4313      	orrs	r3, r2
 8008186:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008188:	4b0b      	ldr	r3, [pc, #44]	; (80081b8 <HAL_RCC_ClockConfig+0x240>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 030f 	and.w	r3, r3, #15
 8008190:	683a      	ldr	r2, [r7, #0]
 8008192:	429a      	cmp	r2, r3
 8008194:	d214      	bcs.n	80081c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008196:	4b08      	ldr	r3, [pc, #32]	; (80081b8 <HAL_RCC_ClockConfig+0x240>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f023 020f 	bic.w	r2, r3, #15
 800819e:	4906      	ldr	r1, [pc, #24]	; (80081b8 <HAL_RCC_ClockConfig+0x240>)
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081a6:	4b04      	ldr	r3, [pc, #16]	; (80081b8 <HAL_RCC_ClockConfig+0x240>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 030f 	and.w	r3, r3, #15
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d005      	beq.n	80081c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e086      	b.n	80082c6 <HAL_RCC_ClockConfig+0x34e>
 80081b8:	52002000 	.word	0x52002000
 80081bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0304 	and.w	r3, r3, #4
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d010      	beq.n	80081ee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	691a      	ldr	r2, [r3, #16]
 80081d0:	4b3f      	ldr	r3, [pc, #252]	; (80082d0 <HAL_RCC_ClockConfig+0x358>)
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081d8:	429a      	cmp	r2, r3
 80081da:	d208      	bcs.n	80081ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80081dc:	4b3c      	ldr	r3, [pc, #240]	; (80082d0 <HAL_RCC_ClockConfig+0x358>)
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	4939      	ldr	r1, [pc, #228]	; (80082d0 <HAL_RCC_ClockConfig+0x358>)
 80081ea:	4313      	orrs	r3, r2
 80081ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0308 	and.w	r3, r3, #8
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d010      	beq.n	800821c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	695a      	ldr	r2, [r3, #20]
 80081fe:	4b34      	ldr	r3, [pc, #208]	; (80082d0 <HAL_RCC_ClockConfig+0x358>)
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008206:	429a      	cmp	r2, r3
 8008208:	d208      	bcs.n	800821c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800820a:	4b31      	ldr	r3, [pc, #196]	; (80082d0 <HAL_RCC_ClockConfig+0x358>)
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	492e      	ldr	r1, [pc, #184]	; (80082d0 <HAL_RCC_ClockConfig+0x358>)
 8008218:	4313      	orrs	r3, r2
 800821a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0310 	and.w	r3, r3, #16
 8008224:	2b00      	cmp	r3, #0
 8008226:	d010      	beq.n	800824a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	699a      	ldr	r2, [r3, #24]
 800822c:	4b28      	ldr	r3, [pc, #160]	; (80082d0 <HAL_RCC_ClockConfig+0x358>)
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008234:	429a      	cmp	r2, r3
 8008236:	d208      	bcs.n	800824a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008238:	4b25      	ldr	r3, [pc, #148]	; (80082d0 <HAL_RCC_ClockConfig+0x358>)
 800823a:	69db      	ldr	r3, [r3, #28]
 800823c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	4922      	ldr	r1, [pc, #136]	; (80082d0 <HAL_RCC_ClockConfig+0x358>)
 8008246:	4313      	orrs	r3, r2
 8008248:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0320 	and.w	r3, r3, #32
 8008252:	2b00      	cmp	r3, #0
 8008254:	d010      	beq.n	8008278 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	69da      	ldr	r2, [r3, #28]
 800825a:	4b1d      	ldr	r3, [pc, #116]	; (80082d0 <HAL_RCC_ClockConfig+0x358>)
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008262:	429a      	cmp	r2, r3
 8008264:	d208      	bcs.n	8008278 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008266:	4b1a      	ldr	r3, [pc, #104]	; (80082d0 <HAL_RCC_ClockConfig+0x358>)
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	4917      	ldr	r1, [pc, #92]	; (80082d0 <HAL_RCC_ClockConfig+0x358>)
 8008274:	4313      	orrs	r3, r2
 8008276:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008278:	f000 f834 	bl	80082e4 <HAL_RCC_GetSysClockFreq>
 800827c:	4602      	mov	r2, r0
 800827e:	4b14      	ldr	r3, [pc, #80]	; (80082d0 <HAL_RCC_ClockConfig+0x358>)
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	0a1b      	lsrs	r3, r3, #8
 8008284:	f003 030f 	and.w	r3, r3, #15
 8008288:	4912      	ldr	r1, [pc, #72]	; (80082d4 <HAL_RCC_ClockConfig+0x35c>)
 800828a:	5ccb      	ldrb	r3, [r1, r3]
 800828c:	f003 031f 	and.w	r3, r3, #31
 8008290:	fa22 f303 	lsr.w	r3, r2, r3
 8008294:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008296:	4b0e      	ldr	r3, [pc, #56]	; (80082d0 <HAL_RCC_ClockConfig+0x358>)
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	f003 030f 	and.w	r3, r3, #15
 800829e:	4a0d      	ldr	r2, [pc, #52]	; (80082d4 <HAL_RCC_ClockConfig+0x35c>)
 80082a0:	5cd3      	ldrb	r3, [r2, r3]
 80082a2:	f003 031f 	and.w	r3, r3, #31
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	fa22 f303 	lsr.w	r3, r2, r3
 80082ac:	4a0a      	ldr	r2, [pc, #40]	; (80082d8 <HAL_RCC_ClockConfig+0x360>)
 80082ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80082b0:	4a0a      	ldr	r2, [pc, #40]	; (80082dc <HAL_RCC_ClockConfig+0x364>)
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80082b6:	4b0a      	ldr	r3, [pc, #40]	; (80082e0 <HAL_RCC_ClockConfig+0x368>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fb fa30 	bl	8003720 <HAL_InitTick>
 80082c0:	4603      	mov	r3, r0
 80082c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3718      	adds	r7, #24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	58024400 	.word	0x58024400
 80082d4:	0800e168 	.word	0x0800e168
 80082d8:	24000004 	.word	0x24000004
 80082dc:	24000000 	.word	0x24000000
 80082e0:	24000040 	.word	0x24000040

080082e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b089      	sub	sp, #36	; 0x24
 80082e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80082ea:	4bb3      	ldr	r3, [pc, #716]	; (80085b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082f2:	2b18      	cmp	r3, #24
 80082f4:	f200 8155 	bhi.w	80085a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80082f8:	a201      	add	r2, pc, #4	; (adr r2, 8008300 <HAL_RCC_GetSysClockFreq+0x1c>)
 80082fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fe:	bf00      	nop
 8008300:	08008365 	.word	0x08008365
 8008304:	080085a3 	.word	0x080085a3
 8008308:	080085a3 	.word	0x080085a3
 800830c:	080085a3 	.word	0x080085a3
 8008310:	080085a3 	.word	0x080085a3
 8008314:	080085a3 	.word	0x080085a3
 8008318:	080085a3 	.word	0x080085a3
 800831c:	080085a3 	.word	0x080085a3
 8008320:	0800838b 	.word	0x0800838b
 8008324:	080085a3 	.word	0x080085a3
 8008328:	080085a3 	.word	0x080085a3
 800832c:	080085a3 	.word	0x080085a3
 8008330:	080085a3 	.word	0x080085a3
 8008334:	080085a3 	.word	0x080085a3
 8008338:	080085a3 	.word	0x080085a3
 800833c:	080085a3 	.word	0x080085a3
 8008340:	08008391 	.word	0x08008391
 8008344:	080085a3 	.word	0x080085a3
 8008348:	080085a3 	.word	0x080085a3
 800834c:	080085a3 	.word	0x080085a3
 8008350:	080085a3 	.word	0x080085a3
 8008354:	080085a3 	.word	0x080085a3
 8008358:	080085a3 	.word	0x080085a3
 800835c:	080085a3 	.word	0x080085a3
 8008360:	08008397 	.word	0x08008397
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008364:	4b94      	ldr	r3, [pc, #592]	; (80085b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 0320 	and.w	r3, r3, #32
 800836c:	2b00      	cmp	r3, #0
 800836e:	d009      	beq.n	8008384 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008370:	4b91      	ldr	r3, [pc, #580]	; (80085b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	08db      	lsrs	r3, r3, #3
 8008376:	f003 0303 	and.w	r3, r3, #3
 800837a:	4a90      	ldr	r2, [pc, #576]	; (80085bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800837c:	fa22 f303 	lsr.w	r3, r2, r3
 8008380:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008382:	e111      	b.n	80085a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008384:	4b8d      	ldr	r3, [pc, #564]	; (80085bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008386:	61bb      	str	r3, [r7, #24]
      break;
 8008388:	e10e      	b.n	80085a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800838a:	4b8d      	ldr	r3, [pc, #564]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800838c:	61bb      	str	r3, [r7, #24]
      break;
 800838e:	e10b      	b.n	80085a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008390:	4b8c      	ldr	r3, [pc, #560]	; (80085c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008392:	61bb      	str	r3, [r7, #24]
      break;
 8008394:	e108      	b.n	80085a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008396:	4b88      	ldr	r3, [pc, #544]	; (80085b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839a:	f003 0303 	and.w	r3, r3, #3
 800839e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80083a0:	4b85      	ldr	r3, [pc, #532]	; (80085b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a4:	091b      	lsrs	r3, r3, #4
 80083a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80083ac:	4b82      	ldr	r3, [pc, #520]	; (80085b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80083b6:	4b80      	ldr	r3, [pc, #512]	; (80085b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ba:	08db      	lsrs	r3, r3, #3
 80083bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	fb02 f303 	mul.w	r3, r2, r3
 80083c6:	ee07 3a90 	vmov	s15, r3
 80083ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f000 80e1 	beq.w	800859c <HAL_RCC_GetSysClockFreq+0x2b8>
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2b02      	cmp	r3, #2
 80083de:	f000 8083 	beq.w	80084e8 <HAL_RCC_GetSysClockFreq+0x204>
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	f200 80a1 	bhi.w	800852c <HAL_RCC_GetSysClockFreq+0x248>
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d003      	beq.n	80083f8 <HAL_RCC_GetSysClockFreq+0x114>
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d056      	beq.n	80084a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80083f6:	e099      	b.n	800852c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083f8:	4b6f      	ldr	r3, [pc, #444]	; (80085b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 0320 	and.w	r3, r3, #32
 8008400:	2b00      	cmp	r3, #0
 8008402:	d02d      	beq.n	8008460 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008404:	4b6c      	ldr	r3, [pc, #432]	; (80085b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	08db      	lsrs	r3, r3, #3
 800840a:	f003 0303 	and.w	r3, r3, #3
 800840e:	4a6b      	ldr	r2, [pc, #428]	; (80085bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008410:	fa22 f303 	lsr.w	r3, r2, r3
 8008414:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	ee07 3a90 	vmov	s15, r3
 800841c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	ee07 3a90 	vmov	s15, r3
 8008426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800842a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800842e:	4b62      	ldr	r3, [pc, #392]	; (80085b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008436:	ee07 3a90 	vmov	s15, r3
 800843a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800843e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008442:	eddf 5a61 	vldr	s11, [pc, #388]	; 80085c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800844a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800844e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800845a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800845e:	e087      	b.n	8008570 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	ee07 3a90 	vmov	s15, r3
 8008466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800846a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80085cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800846e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008472:	4b51      	ldr	r3, [pc, #324]	; (80085b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800847a:	ee07 3a90 	vmov	s15, r3
 800847e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008482:	ed97 6a02 	vldr	s12, [r7, #8]
 8008486:	eddf 5a50 	vldr	s11, [pc, #320]	; 80085c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800848a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800848e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800849a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800849e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80084a2:	e065      	b.n	8008570 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	ee07 3a90 	vmov	s15, r3
 80084aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80085d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80084b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084b6:	4b40      	ldr	r3, [pc, #256]	; (80085b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084be:	ee07 3a90 	vmov	s15, r3
 80084c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80084ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80085c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80084e6:	e043      	b.n	8008570 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	ee07 3a90 	vmov	s15, r3
 80084ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80085d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80084f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084fa:	4b2f      	ldr	r3, [pc, #188]	; (80085b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008502:	ee07 3a90 	vmov	s15, r3
 8008506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800850a:	ed97 6a02 	vldr	s12, [r7, #8]
 800850e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80085c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800851a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800851e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008526:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800852a:	e021      	b.n	8008570 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	ee07 3a90 	vmov	s15, r3
 8008532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008536:	eddf 6a26 	vldr	s13, [pc, #152]	; 80085d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800853a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800853e:	4b1e      	ldr	r3, [pc, #120]	; (80085b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800854e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008552:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80085c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800855a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800855e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800856a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800856e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008570:	4b11      	ldr	r3, [pc, #68]	; (80085b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008574:	0a5b      	lsrs	r3, r3, #9
 8008576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800857a:	3301      	adds	r3, #1
 800857c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	ee07 3a90 	vmov	s15, r3
 8008584:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008588:	edd7 6a07 	vldr	s13, [r7, #28]
 800858c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008594:	ee17 3a90 	vmov	r3, s15
 8008598:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800859a:	e005      	b.n	80085a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800859c:	2300      	movs	r3, #0
 800859e:	61bb      	str	r3, [r7, #24]
      break;
 80085a0:	e002      	b.n	80085a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80085a2:	4b07      	ldr	r3, [pc, #28]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80085a4:	61bb      	str	r3, [r7, #24]
      break;
 80085a6:	bf00      	nop
  }

  return sysclockfreq;
 80085a8:	69bb      	ldr	r3, [r7, #24]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3724      	adds	r7, #36	; 0x24
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	58024400 	.word	0x58024400
 80085bc:	03d09000 	.word	0x03d09000
 80085c0:	003d0900 	.word	0x003d0900
 80085c4:	017d7840 	.word	0x017d7840
 80085c8:	46000000 	.word	0x46000000
 80085cc:	4c742400 	.word	0x4c742400
 80085d0:	4a742400 	.word	0x4a742400
 80085d4:	4bbebc20 	.word	0x4bbebc20

080085d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80085de:	f7ff fe81 	bl	80082e4 <HAL_RCC_GetSysClockFreq>
 80085e2:	4602      	mov	r2, r0
 80085e4:	4b10      	ldr	r3, [pc, #64]	; (8008628 <HAL_RCC_GetHCLKFreq+0x50>)
 80085e6:	699b      	ldr	r3, [r3, #24]
 80085e8:	0a1b      	lsrs	r3, r3, #8
 80085ea:	f003 030f 	and.w	r3, r3, #15
 80085ee:	490f      	ldr	r1, [pc, #60]	; (800862c <HAL_RCC_GetHCLKFreq+0x54>)
 80085f0:	5ccb      	ldrb	r3, [r1, r3]
 80085f2:	f003 031f 	and.w	r3, r3, #31
 80085f6:	fa22 f303 	lsr.w	r3, r2, r3
 80085fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80085fc:	4b0a      	ldr	r3, [pc, #40]	; (8008628 <HAL_RCC_GetHCLKFreq+0x50>)
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	f003 030f 	and.w	r3, r3, #15
 8008604:	4a09      	ldr	r2, [pc, #36]	; (800862c <HAL_RCC_GetHCLKFreq+0x54>)
 8008606:	5cd3      	ldrb	r3, [r2, r3]
 8008608:	f003 031f 	and.w	r3, r3, #31
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	fa22 f303 	lsr.w	r3, r2, r3
 8008612:	4a07      	ldr	r2, [pc, #28]	; (8008630 <HAL_RCC_GetHCLKFreq+0x58>)
 8008614:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008616:	4a07      	ldr	r2, [pc, #28]	; (8008634 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800861c:	4b04      	ldr	r3, [pc, #16]	; (8008630 <HAL_RCC_GetHCLKFreq+0x58>)
 800861e:	681b      	ldr	r3, [r3, #0]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	58024400 	.word	0x58024400
 800862c:	0800e168 	.word	0x0800e168
 8008630:	24000004 	.word	0x24000004
 8008634:	24000000 	.word	0x24000000

08008638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800863c:	f7ff ffcc 	bl	80085d8 <HAL_RCC_GetHCLKFreq>
 8008640:	4602      	mov	r2, r0
 8008642:	4b06      	ldr	r3, [pc, #24]	; (800865c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008644:	69db      	ldr	r3, [r3, #28]
 8008646:	0a1b      	lsrs	r3, r3, #8
 8008648:	f003 0307 	and.w	r3, r3, #7
 800864c:	4904      	ldr	r1, [pc, #16]	; (8008660 <HAL_RCC_GetPCLK2Freq+0x28>)
 800864e:	5ccb      	ldrb	r3, [r1, r3]
 8008650:	f003 031f 	and.w	r3, r3, #31
 8008654:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008658:	4618      	mov	r0, r3
 800865a:	bd80      	pop	{r7, pc}
 800865c:	58024400 	.word	0x58024400
 8008660:	0800e168 	.word	0x0800e168

08008664 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008668:	b0ca      	sub	sp, #296	; 0x128
 800866a:	af00      	add	r7, sp, #0
 800866c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008670:	2300      	movs	r3, #0
 8008672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008676:	2300      	movs	r3, #0
 8008678:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800867c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008684:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008688:	2500      	movs	r5, #0
 800868a:	ea54 0305 	orrs.w	r3, r4, r5
 800868e:	d049      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008694:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008696:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800869a:	d02f      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800869c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086a0:	d828      	bhi.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80086a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086a6:	d01a      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80086a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086ac:	d822      	bhi.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 80086b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086b6:	d007      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80086b8:	e01c      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086ba:	4bb8      	ldr	r3, [pc, #736]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086be:	4ab7      	ldr	r2, [pc, #732]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80086c6:	e01a      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80086c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086cc:	3308      	adds	r3, #8
 80086ce:	2102      	movs	r1, #2
 80086d0:	4618      	mov	r0, r3
 80086d2:	f001 f9d1 	bl	8009a78 <RCCEx_PLL2_Config>
 80086d6:	4603      	mov	r3, r0
 80086d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80086dc:	e00f      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086e2:	3328      	adds	r3, #40	; 0x28
 80086e4:	2102      	movs	r1, #2
 80086e6:	4618      	mov	r0, r3
 80086e8:	f001 fa78 	bl	8009bdc <RCCEx_PLL3_Config>
 80086ec:	4603      	mov	r3, r0
 80086ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80086f2:	e004      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80086fa:	e000      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80086fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10a      	bne.n	800871c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008706:	4ba5      	ldr	r3, [pc, #660]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800870a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800870e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008714:	4aa1      	ldr	r2, [pc, #644]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008716:	430b      	orrs	r3, r1
 8008718:	6513      	str	r3, [r2, #80]	; 0x50
 800871a:	e003      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800871c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008720:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008730:	f04f 0900 	mov.w	r9, #0
 8008734:	ea58 0309 	orrs.w	r3, r8, r9
 8008738:	d047      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800873a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800873e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008740:	2b04      	cmp	r3, #4
 8008742:	d82a      	bhi.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008744:	a201      	add	r2, pc, #4	; (adr r2, 800874c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874a:	bf00      	nop
 800874c:	08008761 	.word	0x08008761
 8008750:	0800876f 	.word	0x0800876f
 8008754:	08008785 	.word	0x08008785
 8008758:	080087a3 	.word	0x080087a3
 800875c:	080087a3 	.word	0x080087a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008760:	4b8e      	ldr	r3, [pc, #568]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008764:	4a8d      	ldr	r2, [pc, #564]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800876a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800876c:	e01a      	b.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800876e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008772:	3308      	adds	r3, #8
 8008774:	2100      	movs	r1, #0
 8008776:	4618      	mov	r0, r3
 8008778:	f001 f97e 	bl	8009a78 <RCCEx_PLL2_Config>
 800877c:	4603      	mov	r3, r0
 800877e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008782:	e00f      	b.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008788:	3328      	adds	r3, #40	; 0x28
 800878a:	2100      	movs	r1, #0
 800878c:	4618      	mov	r0, r3
 800878e:	f001 fa25 	bl	8009bdc <RCCEx_PLL3_Config>
 8008792:	4603      	mov	r3, r0
 8008794:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008798:	e004      	b.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087a0:	e000      	b.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80087a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10a      	bne.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80087ac:	4b7b      	ldr	r3, [pc, #492]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087b0:	f023 0107 	bic.w	r1, r3, #7
 80087b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ba:	4a78      	ldr	r2, [pc, #480]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087bc:	430b      	orrs	r3, r1
 80087be:	6513      	str	r3, [r2, #80]	; 0x50
 80087c0:	e003      	b.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80087ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80087d6:	f04f 0b00 	mov.w	fp, #0
 80087da:	ea5a 030b 	orrs.w	r3, sl, fp
 80087de:	d04c      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80087e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ea:	d030      	beq.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80087ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087f0:	d829      	bhi.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80087f2:	2bc0      	cmp	r3, #192	; 0xc0
 80087f4:	d02d      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80087f6:	2bc0      	cmp	r3, #192	; 0xc0
 80087f8:	d825      	bhi.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80087fa:	2b80      	cmp	r3, #128	; 0x80
 80087fc:	d018      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80087fe:	2b80      	cmp	r3, #128	; 0x80
 8008800:	d821      	bhi.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008802:	2b00      	cmp	r3, #0
 8008804:	d002      	beq.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008806:	2b40      	cmp	r3, #64	; 0x40
 8008808:	d007      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800880a:	e01c      	b.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800880c:	4b63      	ldr	r3, [pc, #396]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800880e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008810:	4a62      	ldr	r2, [pc, #392]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008816:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008818:	e01c      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800881a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800881e:	3308      	adds	r3, #8
 8008820:	2100      	movs	r1, #0
 8008822:	4618      	mov	r0, r3
 8008824:	f001 f928 	bl	8009a78 <RCCEx_PLL2_Config>
 8008828:	4603      	mov	r3, r0
 800882a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800882e:	e011      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008834:	3328      	adds	r3, #40	; 0x28
 8008836:	2100      	movs	r1, #0
 8008838:	4618      	mov	r0, r3
 800883a:	f001 f9cf 	bl	8009bdc <RCCEx_PLL3_Config>
 800883e:	4603      	mov	r3, r0
 8008840:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008844:	e006      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800884c:	e002      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800884e:	bf00      	nop
 8008850:	e000      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008854:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10a      	bne.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800885c:	4b4f      	ldr	r3, [pc, #316]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800885e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008860:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800886a:	4a4c      	ldr	r2, [pc, #304]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800886c:	430b      	orrs	r3, r1
 800886e:	6513      	str	r3, [r2, #80]	; 0x50
 8008870:	e003      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008872:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008876:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800887a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800887e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008882:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008886:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800888a:	2300      	movs	r3, #0
 800888c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008890:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008894:	460b      	mov	r3, r1
 8008896:	4313      	orrs	r3, r2
 8008898:	d053      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800889a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800889e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80088a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088a6:	d035      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80088a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088ac:	d82e      	bhi.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80088ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80088b2:	d031      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80088b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80088b8:	d828      	bhi.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80088ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088be:	d01a      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80088c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088c4:	d822      	bhi.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d003      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80088ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088ce:	d007      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80088d0:	e01c      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088d2:	4b32      	ldr	r3, [pc, #200]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d6:	4a31      	ldr	r2, [pc, #196]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088de:	e01c      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e4:	3308      	adds	r3, #8
 80088e6:	2100      	movs	r1, #0
 80088e8:	4618      	mov	r0, r3
 80088ea:	f001 f8c5 	bl	8009a78 <RCCEx_PLL2_Config>
 80088ee:	4603      	mov	r3, r0
 80088f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80088f4:	e011      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80088f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088fa:	3328      	adds	r3, #40	; 0x28
 80088fc:	2100      	movs	r1, #0
 80088fe:	4618      	mov	r0, r3
 8008900:	f001 f96c 	bl	8009bdc <RCCEx_PLL3_Config>
 8008904:	4603      	mov	r3, r0
 8008906:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800890a:	e006      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008912:	e002      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008914:	bf00      	nop
 8008916:	e000      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800891a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10b      	bne.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008922:	4b1e      	ldr	r3, [pc, #120]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008926:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800892a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800892e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008932:	4a1a      	ldr	r2, [pc, #104]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008934:	430b      	orrs	r3, r1
 8008936:	6593      	str	r3, [r2, #88]	; 0x58
 8008938:	e003      	b.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800893a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800893e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800894e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008952:	2300      	movs	r3, #0
 8008954:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008958:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800895c:	460b      	mov	r3, r1
 800895e:	4313      	orrs	r3, r2
 8008960:	d056      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008966:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800896a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800896e:	d038      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008970:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008974:	d831      	bhi.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008976:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800897a:	d034      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800897c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008980:	d82b      	bhi.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008982:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008986:	d01d      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008988:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800898c:	d825      	bhi.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x376>
 800898e:	2b00      	cmp	r3, #0
 8008990:	d006      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008992:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008996:	d00a      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008998:	e01f      	b.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x376>
 800899a:	bf00      	nop
 800899c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089a0:	4ba2      	ldr	r3, [pc, #648]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a4:	4aa1      	ldr	r2, [pc, #644]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80089ac:	e01c      	b.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089b2:	3308      	adds	r3, #8
 80089b4:	2100      	movs	r1, #0
 80089b6:	4618      	mov	r0, r3
 80089b8:	f001 f85e 	bl	8009a78 <RCCEx_PLL2_Config>
 80089bc:	4603      	mov	r3, r0
 80089be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80089c2:	e011      	b.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089c8:	3328      	adds	r3, #40	; 0x28
 80089ca:	2100      	movs	r1, #0
 80089cc:	4618      	mov	r0, r3
 80089ce:	f001 f905 	bl	8009bdc <RCCEx_PLL3_Config>
 80089d2:	4603      	mov	r3, r0
 80089d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80089d8:	e006      	b.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089e0:	e002      	b.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80089e2:	bf00      	nop
 80089e4:	e000      	b.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80089e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10b      	bne.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80089f0:	4b8e      	ldr	r3, [pc, #568]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089f4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80089f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a00:	4a8a      	ldr	r2, [pc, #552]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a02:	430b      	orrs	r3, r1
 8008a04:	6593      	str	r3, [r2, #88]	; 0x58
 8008a06:	e003      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a18:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008a1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a20:	2300      	movs	r3, #0
 8008a22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008a26:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	d03a      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a36:	2b30      	cmp	r3, #48	; 0x30
 8008a38:	d01f      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008a3a:	2b30      	cmp	r3, #48	; 0x30
 8008a3c:	d819      	bhi.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008a3e:	2b20      	cmp	r3, #32
 8008a40:	d00c      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008a42:	2b20      	cmp	r3, #32
 8008a44:	d815      	bhi.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d019      	beq.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008a4a:	2b10      	cmp	r3, #16
 8008a4c:	d111      	bne.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a4e:	4b77      	ldr	r3, [pc, #476]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a52:	4a76      	ldr	r2, [pc, #472]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008a5a:	e011      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a60:	3308      	adds	r3, #8
 8008a62:	2102      	movs	r1, #2
 8008a64:	4618      	mov	r0, r3
 8008a66:	f001 f807 	bl	8009a78 <RCCEx_PLL2_Config>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008a70:	e006      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a78:	e002      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008a7a:	bf00      	nop
 8008a7c:	e000      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10a      	bne.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008a88:	4b68      	ldr	r3, [pc, #416]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a8c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a96:	4a65      	ldr	r2, [pc, #404]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a98:	430b      	orrs	r3, r1
 8008a9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a9c:	e003      	b.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008aa2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aae:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008ab2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008abc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	d051      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008acc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ad0:	d035      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008ad2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ad6:	d82e      	bhi.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008ad8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008adc:	d031      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008ade:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ae2:	d828      	bhi.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ae8:	d01a      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008aee:	d822      	bhi.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d003      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008af8:	d007      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008afa:	e01c      	b.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008afc:	4b4b      	ldr	r3, [pc, #300]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b00:	4a4a      	ldr	r2, [pc, #296]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b08:	e01c      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b0e:	3308      	adds	r3, #8
 8008b10:	2100      	movs	r1, #0
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 ffb0 	bl	8009a78 <RCCEx_PLL2_Config>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b1e:	e011      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b24:	3328      	adds	r3, #40	; 0x28
 8008b26:	2100      	movs	r1, #0
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f001 f857 	bl	8009bdc <RCCEx_PLL3_Config>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b34:	e006      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b3c:	e002      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008b3e:	bf00      	nop
 8008b40:	e000      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10a      	bne.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008b4c:	4b37      	ldr	r3, [pc, #220]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b50:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b5a:	4a34      	ldr	r2, [pc, #208]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b5c:	430b      	orrs	r3, r1
 8008b5e:	6513      	str	r3, [r2, #80]	; 0x50
 8008b60:	e003      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b72:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008b76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008b80:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008b84:	460b      	mov	r3, r1
 8008b86:	4313      	orrs	r3, r2
 8008b88:	d056      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b94:	d033      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008b96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b9a:	d82c      	bhi.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008b9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ba0:	d02f      	beq.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008ba2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ba6:	d826      	bhi.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008ba8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008bac:	d02b      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008bae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008bb2:	d820      	bhi.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008bb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bb8:	d012      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008bba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bbe:	d81a      	bhi.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d022      	beq.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bc8:	d115      	bne.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bce:	3308      	adds	r3, #8
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 ff50 	bl	8009a78 <RCCEx_PLL2_Config>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008bde:	e015      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008be4:	3328      	adds	r3, #40	; 0x28
 8008be6:	2101      	movs	r1, #1
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 fff7 	bl	8009bdc <RCCEx_PLL3_Config>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008bf4:	e00a      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008bfc:	e006      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008bfe:	bf00      	nop
 8008c00:	e004      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c02:	bf00      	nop
 8008c04:	e002      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c06:	bf00      	nop
 8008c08:	e000      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10d      	bne.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008c14:	4b05      	ldr	r3, [pc, #20]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c18:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c22:	4a02      	ldr	r2, [pc, #8]	; (8008c2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c24:	430b      	orrs	r3, r1
 8008c26:	6513      	str	r3, [r2, #80]	; 0x50
 8008c28:	e006      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008c2a:	bf00      	nop
 8008c2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c40:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008c44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c4e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008c52:	460b      	mov	r3, r1
 8008c54:	4313      	orrs	r3, r2
 8008c56:	d055      	beq.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c64:	d033      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008c66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c6a:	d82c      	bhi.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c70:	d02f      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c76:	d826      	bhi.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008c78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c7c:	d02b      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008c7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c82:	d820      	bhi.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c88:	d012      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008c8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c8e:	d81a      	bhi.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d022      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008c94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c98:	d115      	bne.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c9e:	3308      	adds	r3, #8
 8008ca0:	2101      	movs	r1, #1
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 fee8 	bl	8009a78 <RCCEx_PLL2_Config>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008cae:	e015      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cb4:	3328      	adds	r3, #40	; 0x28
 8008cb6:	2101      	movs	r1, #1
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 ff8f 	bl	8009bdc <RCCEx_PLL3_Config>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008cc4:	e00a      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ccc:	e006      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008cce:	bf00      	nop
 8008cd0:	e004      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008cd2:	bf00      	nop
 8008cd4:	e002      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008cd6:	bf00      	nop
 8008cd8:	e000      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10b      	bne.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008ce4:	4ba3      	ldr	r3, [pc, #652]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ce8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cf0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008cf4:	4a9f      	ldr	r2, [pc, #636]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cf6:	430b      	orrs	r3, r1
 8008cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8008cfa:	e003      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008d10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d14:	2300      	movs	r3, #0
 8008d16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008d1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4313      	orrs	r3, r2
 8008d22:	d037      	beq.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d2e:	d00e      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d34:	d816      	bhi.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d018      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008d3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d3e:	d111      	bne.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d40:	4b8c      	ldr	r3, [pc, #560]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d44:	4a8b      	ldr	r2, [pc, #556]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008d4c:	e00f      	b.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d52:	3308      	adds	r3, #8
 8008d54:	2101      	movs	r1, #1
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 fe8e 	bl	8009a78 <RCCEx_PLL2_Config>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008d62:	e004      	b.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d6a:	e000      	b.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10a      	bne.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008d76:	4b7f      	ldr	r3, [pc, #508]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d7a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d84:	4a7b      	ldr	r2, [pc, #492]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d86:	430b      	orrs	r3, r1
 8008d88:	6513      	str	r3, [r2, #80]	; 0x50
 8008d8a:	e003      	b.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008da0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008da4:	2300      	movs	r3, #0
 8008da6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008daa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008dae:	460b      	mov	r3, r1
 8008db0:	4313      	orrs	r3, r2
 8008db2:	d039      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	d81c      	bhi.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008dbe:	a201      	add	r2, pc, #4	; (adr r2, 8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc4:	08008e01 	.word	0x08008e01
 8008dc8:	08008dd5 	.word	0x08008dd5
 8008dcc:	08008de3 	.word	0x08008de3
 8008dd0:	08008e01 	.word	0x08008e01
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dd4:	4b67      	ldr	r3, [pc, #412]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd8:	4a66      	ldr	r2, [pc, #408]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008de0:	e00f      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008de6:	3308      	adds	r3, #8
 8008de8:	2102      	movs	r1, #2
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 fe44 	bl	8009a78 <RCCEx_PLL2_Config>
 8008df0:	4603      	mov	r3, r0
 8008df2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008df6:	e004      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008dfe:	e000      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10a      	bne.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008e0a:	4b5a      	ldr	r3, [pc, #360]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e0e:	f023 0103 	bic.w	r1, r3, #3
 8008e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e18:	4a56      	ldr	r2, [pc, #344]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e1a:	430b      	orrs	r3, r1
 8008e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e1e:	e003      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e30:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008e34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e3e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008e42:	460b      	mov	r3, r1
 8008e44:	4313      	orrs	r3, r2
 8008e46:	f000 809f 	beq.w	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e4a:	4b4b      	ldr	r3, [pc, #300]	; (8008f78 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a4a      	ldr	r2, [pc, #296]	; (8008f78 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008e56:	f7fa fcad 	bl	80037b4 <HAL_GetTick>
 8008e5a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e5e:	e00b      	b.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e60:	f7fa fca8 	bl	80037b4 <HAL_GetTick>
 8008e64:	4602      	mov	r2, r0
 8008e66:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	2b64      	cmp	r3, #100	; 0x64
 8008e6e:	d903      	bls.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008e70:	2303      	movs	r3, #3
 8008e72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e76:	e005      	b.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e78:	4b3f      	ldr	r3, [pc, #252]	; (8008f78 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d0ed      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008e84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d179      	bne.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008e8c:	4b39      	ldr	r3, [pc, #228]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008e98:	4053      	eors	r3, r2
 8008e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d015      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ea2:	4b34      	ldr	r3, [pc, #208]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eaa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008eae:	4b31      	ldr	r3, [pc, #196]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eb2:	4a30      	ldr	r2, [pc, #192]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008eb8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008eba:	4b2e      	ldr	r3, [pc, #184]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ebe:	4a2d      	ldr	r2, [pc, #180]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ec4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008ec6:	4a2b      	ldr	r2, [pc, #172]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ec8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008ecc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ed2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eda:	d118      	bne.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008edc:	f7fa fc6a 	bl	80037b4 <HAL_GetTick>
 8008ee0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ee4:	e00d      	b.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ee6:	f7fa fc65 	bl	80037b4 <HAL_GetTick>
 8008eea:	4602      	mov	r2, r0
 8008eec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008ef0:	1ad2      	subs	r2, r2, r3
 8008ef2:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d903      	bls.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008f00:	e005      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f02:	4b1c      	ldr	r3, [pc, #112]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f06:	f003 0302 	and.w	r3, r3, #2
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d0eb      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d129      	bne.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f26:	d10e      	bne.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008f28:	4b12      	ldr	r3, [pc, #72]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008f38:	091a      	lsrs	r2, r3, #4
 8008f3a:	4b10      	ldr	r3, [pc, #64]	; (8008f7c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	4a0d      	ldr	r2, [pc, #52]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f40:	430b      	orrs	r3, r1
 8008f42:	6113      	str	r3, [r2, #16]
 8008f44:	e005      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008f46:	4b0b      	ldr	r3, [pc, #44]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	4a0a      	ldr	r2, [pc, #40]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f4c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008f50:	6113      	str	r3, [r2, #16]
 8008f52:	4b08      	ldr	r3, [pc, #32]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f54:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f62:	4a04      	ldr	r2, [pc, #16]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f64:	430b      	orrs	r3, r1
 8008f66:	6713      	str	r3, [r2, #112]	; 0x70
 8008f68:	e00e      	b.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008f72:	e009      	b.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008f74:	58024400 	.word	0x58024400
 8008f78:	58024800 	.word	0x58024800
 8008f7c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f90:	f002 0301 	and.w	r3, r2, #1
 8008f94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f98:	2300      	movs	r3, #0
 8008f9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008f9e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	f000 8089 	beq.w	80090bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fb0:	2b28      	cmp	r3, #40	; 0x28
 8008fb2:	d86b      	bhi.n	800908c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008fb4:	a201      	add	r2, pc, #4	; (adr r2, 8008fbc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fba:	bf00      	nop
 8008fbc:	08009095 	.word	0x08009095
 8008fc0:	0800908d 	.word	0x0800908d
 8008fc4:	0800908d 	.word	0x0800908d
 8008fc8:	0800908d 	.word	0x0800908d
 8008fcc:	0800908d 	.word	0x0800908d
 8008fd0:	0800908d 	.word	0x0800908d
 8008fd4:	0800908d 	.word	0x0800908d
 8008fd8:	0800908d 	.word	0x0800908d
 8008fdc:	08009061 	.word	0x08009061
 8008fe0:	0800908d 	.word	0x0800908d
 8008fe4:	0800908d 	.word	0x0800908d
 8008fe8:	0800908d 	.word	0x0800908d
 8008fec:	0800908d 	.word	0x0800908d
 8008ff0:	0800908d 	.word	0x0800908d
 8008ff4:	0800908d 	.word	0x0800908d
 8008ff8:	0800908d 	.word	0x0800908d
 8008ffc:	08009077 	.word	0x08009077
 8009000:	0800908d 	.word	0x0800908d
 8009004:	0800908d 	.word	0x0800908d
 8009008:	0800908d 	.word	0x0800908d
 800900c:	0800908d 	.word	0x0800908d
 8009010:	0800908d 	.word	0x0800908d
 8009014:	0800908d 	.word	0x0800908d
 8009018:	0800908d 	.word	0x0800908d
 800901c:	08009095 	.word	0x08009095
 8009020:	0800908d 	.word	0x0800908d
 8009024:	0800908d 	.word	0x0800908d
 8009028:	0800908d 	.word	0x0800908d
 800902c:	0800908d 	.word	0x0800908d
 8009030:	0800908d 	.word	0x0800908d
 8009034:	0800908d 	.word	0x0800908d
 8009038:	0800908d 	.word	0x0800908d
 800903c:	08009095 	.word	0x08009095
 8009040:	0800908d 	.word	0x0800908d
 8009044:	0800908d 	.word	0x0800908d
 8009048:	0800908d 	.word	0x0800908d
 800904c:	0800908d 	.word	0x0800908d
 8009050:	0800908d 	.word	0x0800908d
 8009054:	0800908d 	.word	0x0800908d
 8009058:	0800908d 	.word	0x0800908d
 800905c:	08009095 	.word	0x08009095
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009064:	3308      	adds	r3, #8
 8009066:	2101      	movs	r1, #1
 8009068:	4618      	mov	r0, r3
 800906a:	f000 fd05 	bl	8009a78 <RCCEx_PLL2_Config>
 800906e:	4603      	mov	r3, r0
 8009070:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009074:	e00f      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800907a:	3328      	adds	r3, #40	; 0x28
 800907c:	2101      	movs	r1, #1
 800907e:	4618      	mov	r0, r3
 8009080:	f000 fdac 	bl	8009bdc <RCCEx_PLL3_Config>
 8009084:	4603      	mov	r3, r0
 8009086:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800908a:	e004      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009092:	e000      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009096:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10a      	bne.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800909e:	4bbf      	ldr	r3, [pc, #764]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090a2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80090a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090ac:	4abb      	ldr	r2, [pc, #748]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090ae:	430b      	orrs	r3, r1
 80090b0:	6553      	str	r3, [r2, #84]	; 0x54
 80090b2:	e003      	b.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80090bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c4:	f002 0302 	and.w	r3, r2, #2
 80090c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090cc:	2300      	movs	r3, #0
 80090ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80090d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80090d6:	460b      	mov	r3, r1
 80090d8:	4313      	orrs	r3, r2
 80090da:	d041      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80090dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090e2:	2b05      	cmp	r3, #5
 80090e4:	d824      	bhi.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80090e6:	a201      	add	r2, pc, #4	; (adr r2, 80090ec <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80090e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ec:	08009139 	.word	0x08009139
 80090f0:	08009105 	.word	0x08009105
 80090f4:	0800911b 	.word	0x0800911b
 80090f8:	08009139 	.word	0x08009139
 80090fc:	08009139 	.word	0x08009139
 8009100:	08009139 	.word	0x08009139
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009108:	3308      	adds	r3, #8
 800910a:	2101      	movs	r1, #1
 800910c:	4618      	mov	r0, r3
 800910e:	f000 fcb3 	bl	8009a78 <RCCEx_PLL2_Config>
 8009112:	4603      	mov	r3, r0
 8009114:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009118:	e00f      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800911a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800911e:	3328      	adds	r3, #40	; 0x28
 8009120:	2101      	movs	r1, #1
 8009122:	4618      	mov	r0, r3
 8009124:	f000 fd5a 	bl	8009bdc <RCCEx_PLL3_Config>
 8009128:	4603      	mov	r3, r0
 800912a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800912e:	e004      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009136:	e000      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800913a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800913e:	2b00      	cmp	r3, #0
 8009140:	d10a      	bne.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009142:	4b96      	ldr	r3, [pc, #600]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009146:	f023 0107 	bic.w	r1, r3, #7
 800914a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800914e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009150:	4a92      	ldr	r2, [pc, #584]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009152:	430b      	orrs	r3, r1
 8009154:	6553      	str	r3, [r2, #84]	; 0x54
 8009156:	e003      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009158:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800915c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	f002 0304 	and.w	r3, r2, #4
 800916c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009170:	2300      	movs	r3, #0
 8009172:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009176:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800917a:	460b      	mov	r3, r1
 800917c:	4313      	orrs	r3, r2
 800917e:	d044      	beq.n	800920a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009188:	2b05      	cmp	r3, #5
 800918a:	d825      	bhi.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800918c:	a201      	add	r2, pc, #4	; (adr r2, 8009194 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800918e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009192:	bf00      	nop
 8009194:	080091e1 	.word	0x080091e1
 8009198:	080091ad 	.word	0x080091ad
 800919c:	080091c3 	.word	0x080091c3
 80091a0:	080091e1 	.word	0x080091e1
 80091a4:	080091e1 	.word	0x080091e1
 80091a8:	080091e1 	.word	0x080091e1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091b0:	3308      	adds	r3, #8
 80091b2:	2101      	movs	r1, #1
 80091b4:	4618      	mov	r0, r3
 80091b6:	f000 fc5f 	bl	8009a78 <RCCEx_PLL2_Config>
 80091ba:	4603      	mov	r3, r0
 80091bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80091c0:	e00f      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091c6:	3328      	adds	r3, #40	; 0x28
 80091c8:	2101      	movs	r1, #1
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 fd06 	bl	8009bdc <RCCEx_PLL3_Config>
 80091d0:	4603      	mov	r3, r0
 80091d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80091d6:	e004      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80091de:	e000      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80091e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10b      	bne.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80091ea:	4b6c      	ldr	r3, [pc, #432]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ee:	f023 0107 	bic.w	r1, r3, #7
 80091f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091fa:	4a68      	ldr	r2, [pc, #416]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091fc:	430b      	orrs	r3, r1
 80091fe:	6593      	str	r3, [r2, #88]	; 0x58
 8009200:	e003      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009206:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800920a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800920e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009212:	f002 0320 	and.w	r3, r2, #32
 8009216:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800921a:	2300      	movs	r3, #0
 800921c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009220:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009224:	460b      	mov	r3, r1
 8009226:	4313      	orrs	r3, r2
 8009228:	d055      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800922a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800922e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009232:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009236:	d033      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800923c:	d82c      	bhi.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800923e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009242:	d02f      	beq.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009248:	d826      	bhi.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800924a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800924e:	d02b      	beq.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009250:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009254:	d820      	bhi.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009256:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800925a:	d012      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800925c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009260:	d81a      	bhi.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009262:	2b00      	cmp	r3, #0
 8009264:	d022      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009266:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800926a:	d115      	bne.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800926c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009270:	3308      	adds	r3, #8
 8009272:	2100      	movs	r1, #0
 8009274:	4618      	mov	r0, r3
 8009276:	f000 fbff 	bl	8009a78 <RCCEx_PLL2_Config>
 800927a:	4603      	mov	r3, r0
 800927c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009280:	e015      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009286:	3328      	adds	r3, #40	; 0x28
 8009288:	2102      	movs	r1, #2
 800928a:	4618      	mov	r0, r3
 800928c:	f000 fca6 	bl	8009bdc <RCCEx_PLL3_Config>
 8009290:	4603      	mov	r3, r0
 8009292:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009296:	e00a      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800929e:	e006      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80092a0:	bf00      	nop
 80092a2:	e004      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80092a4:	bf00      	nop
 80092a6:	e002      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80092a8:	bf00      	nop
 80092aa:	e000      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80092ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10b      	bne.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80092b6:	4b39      	ldr	r3, [pc, #228]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80092b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ba:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80092be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092c6:	4a35      	ldr	r2, [pc, #212]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80092c8:	430b      	orrs	r3, r1
 80092ca:	6553      	str	r3, [r2, #84]	; 0x54
 80092cc:	e003      	b.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80092d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092de:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80092e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80092e6:	2300      	movs	r3, #0
 80092e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80092ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80092f0:	460b      	mov	r3, r1
 80092f2:	4313      	orrs	r3, r2
 80092f4:	d058      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80092f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80092fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009302:	d033      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009304:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009308:	d82c      	bhi.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800930a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800930e:	d02f      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009314:	d826      	bhi.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009316:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800931a:	d02b      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800931c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009320:	d820      	bhi.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009326:	d012      	beq.n	800934e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800932c:	d81a      	bhi.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800932e:	2b00      	cmp	r3, #0
 8009330:	d022      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009336:	d115      	bne.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800933c:	3308      	adds	r3, #8
 800933e:	2100      	movs	r1, #0
 8009340:	4618      	mov	r0, r3
 8009342:	f000 fb99 	bl	8009a78 <RCCEx_PLL2_Config>
 8009346:	4603      	mov	r3, r0
 8009348:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800934c:	e015      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800934e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009352:	3328      	adds	r3, #40	; 0x28
 8009354:	2102      	movs	r1, #2
 8009356:	4618      	mov	r0, r3
 8009358:	f000 fc40 	bl	8009bdc <RCCEx_PLL3_Config>
 800935c:	4603      	mov	r3, r0
 800935e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009362:	e00a      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800936a:	e006      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800936c:	bf00      	nop
 800936e:	e004      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009370:	bf00      	nop
 8009372:	e002      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009374:	bf00      	nop
 8009376:	e000      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800937a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800937e:	2b00      	cmp	r3, #0
 8009380:	d10e      	bne.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009382:	4b06      	ldr	r3, [pc, #24]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009386:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800938a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800938e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009392:	4a02      	ldr	r2, [pc, #8]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009394:	430b      	orrs	r3, r1
 8009396:	6593      	str	r3, [r2, #88]	; 0x58
 8009398:	e006      	b.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800939a:	bf00      	nop
 800939c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80093a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80093b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80093b8:	2300      	movs	r3, #0
 80093ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80093be:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80093c2:	460b      	mov	r3, r1
 80093c4:	4313      	orrs	r3, r2
 80093c6:	d055      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80093c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80093d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80093d4:	d033      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80093d6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80093da:	d82c      	bhi.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80093dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093e0:	d02f      	beq.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80093e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093e6:	d826      	bhi.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80093e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80093ec:	d02b      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80093ee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80093f2:	d820      	bhi.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80093f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093f8:	d012      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80093fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093fe:	d81a      	bhi.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009400:	2b00      	cmp	r3, #0
 8009402:	d022      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009408:	d115      	bne.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800940a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800940e:	3308      	adds	r3, #8
 8009410:	2100      	movs	r1, #0
 8009412:	4618      	mov	r0, r3
 8009414:	f000 fb30 	bl	8009a78 <RCCEx_PLL2_Config>
 8009418:	4603      	mov	r3, r0
 800941a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800941e:	e015      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009424:	3328      	adds	r3, #40	; 0x28
 8009426:	2102      	movs	r1, #2
 8009428:	4618      	mov	r0, r3
 800942a:	f000 fbd7 	bl	8009bdc <RCCEx_PLL3_Config>
 800942e:	4603      	mov	r3, r0
 8009430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009434:	e00a      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800943c:	e006      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800943e:	bf00      	nop
 8009440:	e004      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009442:	bf00      	nop
 8009444:	e002      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009446:	bf00      	nop
 8009448:	e000      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800944a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800944c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10b      	bne.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009454:	4ba1      	ldr	r3, [pc, #644]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009458:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800945c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009460:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009464:	4a9d      	ldr	r2, [pc, #628]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009466:	430b      	orrs	r3, r1
 8009468:	6593      	str	r3, [r2, #88]	; 0x58
 800946a:	e003      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800946c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009470:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947c:	f002 0308 	and.w	r3, r2, #8
 8009480:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009484:	2300      	movs	r3, #0
 8009486:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800948a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800948e:	460b      	mov	r3, r1
 8009490:	4313      	orrs	r3, r2
 8009492:	d01e      	beq.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800949c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094a0:	d10c      	bne.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80094a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094a6:	3328      	adds	r3, #40	; 0x28
 80094a8:	2102      	movs	r1, #2
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 fb96 	bl	8009bdc <RCCEx_PLL3_Config>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d002      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80094bc:	4b87      	ldr	r3, [pc, #540]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80094c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094cc:	4a83      	ldr	r2, [pc, #524]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094ce:	430b      	orrs	r3, r1
 80094d0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80094d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094da:	f002 0310 	and.w	r3, r2, #16
 80094de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80094e2:	2300      	movs	r3, #0
 80094e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80094e8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80094ec:	460b      	mov	r3, r1
 80094ee:	4313      	orrs	r3, r2
 80094f0:	d01e      	beq.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80094f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094fe:	d10c      	bne.n	800951a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009504:	3328      	adds	r3, #40	; 0x28
 8009506:	2102      	movs	r1, #2
 8009508:	4618      	mov	r0, r3
 800950a:	f000 fb67 	bl	8009bdc <RCCEx_PLL3_Config>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d002      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800951a:	4b70      	ldr	r3, [pc, #448]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800951c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800951e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009526:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800952a:	4a6c      	ldr	r2, [pc, #432]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800952c:	430b      	orrs	r3, r1
 800952e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009538:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800953c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009540:	2300      	movs	r3, #0
 8009542:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009546:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800954a:	460b      	mov	r3, r1
 800954c:	4313      	orrs	r3, r2
 800954e:	d03e      	beq.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009554:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009558:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800955c:	d022      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800955e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009562:	d81b      	bhi.n	800959c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009564:	2b00      	cmp	r3, #0
 8009566:	d003      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800956c:	d00b      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800956e:	e015      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009574:	3308      	adds	r3, #8
 8009576:	2100      	movs	r1, #0
 8009578:	4618      	mov	r0, r3
 800957a:	f000 fa7d 	bl	8009a78 <RCCEx_PLL2_Config>
 800957e:	4603      	mov	r3, r0
 8009580:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009584:	e00f      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800958a:	3328      	adds	r3, #40	; 0x28
 800958c:	2102      	movs	r1, #2
 800958e:	4618      	mov	r0, r3
 8009590:	f000 fb24 	bl	8009bdc <RCCEx_PLL3_Config>
 8009594:	4603      	mov	r3, r0
 8009596:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800959a:	e004      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095a2:	e000      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80095a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10b      	bne.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80095ae:	4b4b      	ldr	r3, [pc, #300]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80095b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80095be:	4a47      	ldr	r2, [pc, #284]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095c0:	430b      	orrs	r3, r1
 80095c2:	6593      	str	r3, [r2, #88]	; 0x58
 80095c4:	e003      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80095ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80095da:	67bb      	str	r3, [r7, #120]	; 0x78
 80095dc:	2300      	movs	r3, #0
 80095de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80095e0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80095e4:	460b      	mov	r3, r1
 80095e6:	4313      	orrs	r3, r2
 80095e8:	d03b      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80095ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095f6:	d01f      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80095f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095fc:	d818      	bhi.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80095fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009602:	d003      	beq.n	800960c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009604:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009608:	d007      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800960a:	e011      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800960c:	4b33      	ldr	r3, [pc, #204]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800960e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009610:	4a32      	ldr	r2, [pc, #200]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009616:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009618:	e00f      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800961a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800961e:	3328      	adds	r3, #40	; 0x28
 8009620:	2101      	movs	r1, #1
 8009622:	4618      	mov	r0, r3
 8009624:	f000 fada 	bl	8009bdc <RCCEx_PLL3_Config>
 8009628:	4603      	mov	r3, r0
 800962a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800962e:	e004      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009636:	e000      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800963a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10b      	bne.n	800965a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009642:	4b26      	ldr	r3, [pc, #152]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009646:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800964a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800964e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009652:	4a22      	ldr	r2, [pc, #136]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009654:	430b      	orrs	r3, r1
 8009656:	6553      	str	r3, [r2, #84]	; 0x54
 8009658:	e003      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800965a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800965e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800966e:	673b      	str	r3, [r7, #112]	; 0x70
 8009670:	2300      	movs	r3, #0
 8009672:	677b      	str	r3, [r7, #116]	; 0x74
 8009674:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009678:	460b      	mov	r3, r1
 800967a:	4313      	orrs	r3, r2
 800967c:	d034      	beq.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800967e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009684:	2b00      	cmp	r3, #0
 8009686:	d003      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800968c:	d007      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800968e:	e011      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009690:	4b12      	ldr	r3, [pc, #72]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009694:	4a11      	ldr	r2, [pc, #68]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800969a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800969c:	e00e      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800969e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096a2:	3308      	adds	r3, #8
 80096a4:	2102      	movs	r1, #2
 80096a6:	4618      	mov	r0, r3
 80096a8:	f000 f9e6 	bl	8009a78 <RCCEx_PLL2_Config>
 80096ac:	4603      	mov	r3, r0
 80096ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80096b2:	e003      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10d      	bne.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80096c4:	4b05      	ldr	r3, [pc, #20]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80096cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096d2:	4a02      	ldr	r2, [pc, #8]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096d4:	430b      	orrs	r3, r1
 80096d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80096d8:	e006      	b.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80096da:	bf00      	nop
 80096dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80096e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80096f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80096f6:	2300      	movs	r3, #0
 80096f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096fa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80096fe:	460b      	mov	r3, r1
 8009700:	4313      	orrs	r3, r2
 8009702:	d00c      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009708:	3328      	adds	r3, #40	; 0x28
 800970a:	2102      	movs	r1, #2
 800970c:	4618      	mov	r0, r3
 800970e:	f000 fa65 	bl	8009bdc <RCCEx_PLL3_Config>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d002      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800971e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009726:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800972a:	663b      	str	r3, [r7, #96]	; 0x60
 800972c:	2300      	movs	r3, #0
 800972e:	667b      	str	r3, [r7, #100]	; 0x64
 8009730:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009734:	460b      	mov	r3, r1
 8009736:	4313      	orrs	r3, r2
 8009738:	d038      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800973a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800973e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009742:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009746:	d018      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009748:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800974c:	d811      	bhi.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800974e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009752:	d014      	beq.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009758:	d80b      	bhi.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800975a:	2b00      	cmp	r3, #0
 800975c:	d011      	beq.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800975e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009762:	d106      	bne.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009764:	4bc3      	ldr	r3, [pc, #780]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009768:	4ac2      	ldr	r2, [pc, #776]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800976a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800976e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009770:	e008      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009778:	e004      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800977a:	bf00      	nop
 800977c:	e002      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800977e:	bf00      	nop
 8009780:	e000      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009782:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009784:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009788:	2b00      	cmp	r3, #0
 800978a:	d10b      	bne.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800978c:	4bb9      	ldr	r3, [pc, #740]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800978e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009790:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800979c:	4ab5      	ldr	r2, [pc, #724]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800979e:	430b      	orrs	r3, r1
 80097a0:	6553      	str	r3, [r2, #84]	; 0x54
 80097a2:	e003      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80097ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80097b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80097ba:	2300      	movs	r3, #0
 80097bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80097c2:	460b      	mov	r3, r1
 80097c4:	4313      	orrs	r3, r2
 80097c6:	d009      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80097c8:	4baa      	ldr	r3, [pc, #680]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80097d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097d6:	4aa7      	ldr	r2, [pc, #668]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097d8:	430b      	orrs	r3, r1
 80097da:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80097dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80097e8:	653b      	str	r3, [r7, #80]	; 0x50
 80097ea:	2300      	movs	r3, #0
 80097ec:	657b      	str	r3, [r7, #84]	; 0x54
 80097ee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80097f2:	460b      	mov	r3, r1
 80097f4:	4313      	orrs	r3, r2
 80097f6:	d00a      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80097f8:	4b9e      	ldr	r3, [pc, #632]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009804:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009808:	4a9a      	ldr	r2, [pc, #616]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800980a:	430b      	orrs	r3, r1
 800980c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800980e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009816:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800981a:	64bb      	str	r3, [r7, #72]	; 0x48
 800981c:	2300      	movs	r3, #0
 800981e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009820:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009824:	460b      	mov	r3, r1
 8009826:	4313      	orrs	r3, r2
 8009828:	d009      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800982a:	4b92      	ldr	r3, [pc, #584]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800982c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800982e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009838:	4a8e      	ldr	r2, [pc, #568]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800983a:	430b      	orrs	r3, r1
 800983c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800983e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009846:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800984a:	643b      	str	r3, [r7, #64]	; 0x40
 800984c:	2300      	movs	r3, #0
 800984e:	647b      	str	r3, [r7, #68]	; 0x44
 8009850:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009854:	460b      	mov	r3, r1
 8009856:	4313      	orrs	r3, r2
 8009858:	d00e      	beq.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800985a:	4b86      	ldr	r3, [pc, #536]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	4a85      	ldr	r2, [pc, #532]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009860:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009864:	6113      	str	r3, [r2, #16]
 8009866:	4b83      	ldr	r3, [pc, #524]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009868:	6919      	ldr	r1, [r3, #16]
 800986a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800986e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009872:	4a80      	ldr	r2, [pc, #512]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009874:	430b      	orrs	r3, r1
 8009876:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800987c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009880:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009884:	63bb      	str	r3, [r7, #56]	; 0x38
 8009886:	2300      	movs	r3, #0
 8009888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800988a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800988e:	460b      	mov	r3, r1
 8009890:	4313      	orrs	r3, r2
 8009892:	d009      	beq.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009894:	4b77      	ldr	r3, [pc, #476]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009898:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800989c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098a2:	4a74      	ldr	r2, [pc, #464]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098a4:	430b      	orrs	r3, r1
 80098a6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80098a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80098b4:	633b      	str	r3, [r7, #48]	; 0x30
 80098b6:	2300      	movs	r3, #0
 80098b8:	637b      	str	r3, [r7, #52]	; 0x34
 80098ba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80098be:	460b      	mov	r3, r1
 80098c0:	4313      	orrs	r3, r2
 80098c2:	d00a      	beq.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80098c4:	4b6b      	ldr	r3, [pc, #428]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098c8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80098cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098d4:	4a67      	ldr	r2, [pc, #412]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098d6:	430b      	orrs	r3, r1
 80098d8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80098da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e2:	2100      	movs	r1, #0
 80098e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80098e6:	f003 0301 	and.w	r3, r3, #1
 80098ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098ec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80098f0:	460b      	mov	r3, r1
 80098f2:	4313      	orrs	r3, r2
 80098f4:	d011      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098fa:	3308      	adds	r3, #8
 80098fc:	2100      	movs	r1, #0
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 f8ba 	bl	8009a78 <RCCEx_PLL2_Config>
 8009904:	4603      	mov	r3, r0
 8009906:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800990a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800990e:	2b00      	cmp	r3, #0
 8009910:	d003      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009912:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009916:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800991a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800991e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009922:	2100      	movs	r1, #0
 8009924:	6239      	str	r1, [r7, #32]
 8009926:	f003 0302 	and.w	r3, r3, #2
 800992a:	627b      	str	r3, [r7, #36]	; 0x24
 800992c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009930:	460b      	mov	r3, r1
 8009932:	4313      	orrs	r3, r2
 8009934:	d011      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800993a:	3308      	adds	r3, #8
 800993c:	2101      	movs	r1, #1
 800993e:	4618      	mov	r0, r3
 8009940:	f000 f89a 	bl	8009a78 <RCCEx_PLL2_Config>
 8009944:	4603      	mov	r3, r0
 8009946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800994a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800994e:	2b00      	cmp	r3, #0
 8009950:	d003      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009956:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800995a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800995e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009962:	2100      	movs	r1, #0
 8009964:	61b9      	str	r1, [r7, #24]
 8009966:	f003 0304 	and.w	r3, r3, #4
 800996a:	61fb      	str	r3, [r7, #28]
 800996c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009970:	460b      	mov	r3, r1
 8009972:	4313      	orrs	r3, r2
 8009974:	d011      	beq.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800997a:	3308      	adds	r3, #8
 800997c:	2102      	movs	r1, #2
 800997e:	4618      	mov	r0, r3
 8009980:	f000 f87a 	bl	8009a78 <RCCEx_PLL2_Config>
 8009984:	4603      	mov	r3, r0
 8009986:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800998a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800998e:	2b00      	cmp	r3, #0
 8009990:	d003      	beq.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009992:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009996:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800999a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800999e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a2:	2100      	movs	r1, #0
 80099a4:	6139      	str	r1, [r7, #16]
 80099a6:	f003 0308 	and.w	r3, r3, #8
 80099aa:	617b      	str	r3, [r7, #20]
 80099ac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80099b0:	460b      	mov	r3, r1
 80099b2:	4313      	orrs	r3, r2
 80099b4:	d011      	beq.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ba:	3328      	adds	r3, #40	; 0x28
 80099bc:	2100      	movs	r1, #0
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 f90c 	bl	8009bdc <RCCEx_PLL3_Config>
 80099c4:	4603      	mov	r3, r0
 80099c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80099ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d003      	beq.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80099da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e2:	2100      	movs	r1, #0
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	f003 0310 	and.w	r3, r3, #16
 80099ea:	60fb      	str	r3, [r7, #12]
 80099ec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80099f0:	460b      	mov	r3, r1
 80099f2:	4313      	orrs	r3, r2
 80099f4:	d011      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099fa:	3328      	adds	r3, #40	; 0x28
 80099fc:	2101      	movs	r1, #1
 80099fe:	4618      	mov	r0, r3
 8009a00:	f000 f8ec 	bl	8009bdc <RCCEx_PLL3_Config>
 8009a04:	4603      	mov	r3, r0
 8009a06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d003      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	2100      	movs	r1, #0
 8009a24:	6039      	str	r1, [r7, #0]
 8009a26:	f003 0320 	and.w	r3, r3, #32
 8009a2a:	607b      	str	r3, [r7, #4]
 8009a2c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009a30:	460b      	mov	r3, r1
 8009a32:	4313      	orrs	r3, r2
 8009a34:	d011      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a3a:	3328      	adds	r3, #40	; 0x28
 8009a3c:	2102      	movs	r1, #2
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f000 f8cc 	bl	8009bdc <RCCEx_PLL3_Config>
 8009a44:	4603      	mov	r3, r0
 8009a46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d003      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009a5a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009a62:	2300      	movs	r3, #0
 8009a64:	e000      	b.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a74:	58024400 	.word	0x58024400

08009a78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a86:	4b53      	ldr	r3, [pc, #332]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a8a:	f003 0303 	and.w	r3, r3, #3
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	d101      	bne.n	8009a96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e099      	b.n	8009bca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a96:	4b4f      	ldr	r3, [pc, #316]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a4e      	ldr	r2, [pc, #312]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009a9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aa2:	f7f9 fe87 	bl	80037b4 <HAL_GetTick>
 8009aa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009aa8:	e008      	b.n	8009abc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009aaa:	f7f9 fe83 	bl	80037b4 <HAL_GetTick>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	1ad3      	subs	r3, r2, r3
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d901      	bls.n	8009abc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	e086      	b.n	8009bca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009abc:	4b45      	ldr	r3, [pc, #276]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1f0      	bne.n	8009aaa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009ac8:	4b42      	ldr	r3, [pc, #264]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009acc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	031b      	lsls	r3, r3, #12
 8009ad6:	493f      	ldr	r1, [pc, #252]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	628b      	str	r3, [r1, #40]	; 0x28
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	3b01      	subs	r3, #1
 8009aec:	025b      	lsls	r3, r3, #9
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	431a      	orrs	r2, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	3b01      	subs	r3, #1
 8009af8:	041b      	lsls	r3, r3, #16
 8009afa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009afe:	431a      	orrs	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	691b      	ldr	r3, [r3, #16]
 8009b04:	3b01      	subs	r3, #1
 8009b06:	061b      	lsls	r3, r3, #24
 8009b08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009b0c:	4931      	ldr	r1, [pc, #196]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009b12:	4b30      	ldr	r3, [pc, #192]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	695b      	ldr	r3, [r3, #20]
 8009b1e:	492d      	ldr	r1, [pc, #180]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009b20:	4313      	orrs	r3, r2
 8009b22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009b24:	4b2b      	ldr	r3, [pc, #172]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b28:	f023 0220 	bic.w	r2, r3, #32
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	4928      	ldr	r1, [pc, #160]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009b32:	4313      	orrs	r3, r2
 8009b34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009b36:	4b27      	ldr	r3, [pc, #156]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3a:	4a26      	ldr	r2, [pc, #152]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009b3c:	f023 0310 	bic.w	r3, r3, #16
 8009b40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009b42:	4b24      	ldr	r3, [pc, #144]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009b44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b46:	4b24      	ldr	r3, [pc, #144]	; (8009bd8 <RCCEx_PLL2_Config+0x160>)
 8009b48:	4013      	ands	r3, r2
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	69d2      	ldr	r2, [r2, #28]
 8009b4e:	00d2      	lsls	r2, r2, #3
 8009b50:	4920      	ldr	r1, [pc, #128]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009b52:	4313      	orrs	r3, r2
 8009b54:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009b56:	4b1f      	ldr	r3, [pc, #124]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5a:	4a1e      	ldr	r2, [pc, #120]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009b5c:	f043 0310 	orr.w	r3, r3, #16
 8009b60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d106      	bne.n	8009b76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009b68:	4b1a      	ldr	r3, [pc, #104]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b6c:	4a19      	ldr	r2, [pc, #100]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009b6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b74:	e00f      	b.n	8009b96 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d106      	bne.n	8009b8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009b7c:	4b15      	ldr	r3, [pc, #84]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b80:	4a14      	ldr	r2, [pc, #80]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009b82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b88:	e005      	b.n	8009b96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b8a:	4b12      	ldr	r3, [pc, #72]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8e:	4a11      	ldr	r2, [pc, #68]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009b90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b96:	4b0f      	ldr	r3, [pc, #60]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a0e      	ldr	r2, [pc, #56]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009b9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ba2:	f7f9 fe07 	bl	80037b4 <HAL_GetTick>
 8009ba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ba8:	e008      	b.n	8009bbc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009baa:	f7f9 fe03 	bl	80037b4 <HAL_GetTick>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	1ad3      	subs	r3, r2, r3
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d901      	bls.n	8009bbc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	e006      	b.n	8009bca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009bbc:	4b05      	ldr	r3, [pc, #20]	; (8009bd4 <RCCEx_PLL2_Config+0x15c>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d0f0      	beq.n	8009baa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	58024400 	.word	0x58024400
 8009bd8:	ffff0007 	.word	0xffff0007

08009bdc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009be6:	2300      	movs	r3, #0
 8009be8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009bea:	4b53      	ldr	r3, [pc, #332]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bee:	f003 0303 	and.w	r3, r3, #3
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	d101      	bne.n	8009bfa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e099      	b.n	8009d2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009bfa:	4b4f      	ldr	r3, [pc, #316]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a4e      	ldr	r2, [pc, #312]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c06:	f7f9 fdd5 	bl	80037b4 <HAL_GetTick>
 8009c0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c0c:	e008      	b.n	8009c20 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009c0e:	f7f9 fdd1 	bl	80037b4 <HAL_GetTick>
 8009c12:	4602      	mov	r2, r0
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d901      	bls.n	8009c20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e086      	b.n	8009d2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c20:	4b45      	ldr	r3, [pc, #276]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1f0      	bne.n	8009c0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009c2c:	4b42      	ldr	r3, [pc, #264]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c30:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	051b      	lsls	r3, r3, #20
 8009c3a:	493f      	ldr	r1, [pc, #252]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	628b      	str	r3, [r1, #40]	; 0x28
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	3b01      	subs	r3, #1
 8009c46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	025b      	lsls	r3, r3, #9
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	431a      	orrs	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	041b      	lsls	r3, r3, #16
 8009c5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c62:	431a      	orrs	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	061b      	lsls	r3, r3, #24
 8009c6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c70:	4931      	ldr	r1, [pc, #196]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009c72:	4313      	orrs	r3, r2
 8009c74:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c76:	4b30      	ldr	r3, [pc, #192]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	695b      	ldr	r3, [r3, #20]
 8009c82:	492d      	ldr	r1, [pc, #180]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009c84:	4313      	orrs	r3, r2
 8009c86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c88:	4b2b      	ldr	r3, [pc, #172]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	699b      	ldr	r3, [r3, #24]
 8009c94:	4928      	ldr	r1, [pc, #160]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009c96:	4313      	orrs	r3, r2
 8009c98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c9a:	4b27      	ldr	r3, [pc, #156]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9e:	4a26      	ldr	r2, [pc, #152]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009ca6:	4b24      	ldr	r3, [pc, #144]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009caa:	4b24      	ldr	r3, [pc, #144]	; (8009d3c <RCCEx_PLL3_Config+0x160>)
 8009cac:	4013      	ands	r3, r2
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	69d2      	ldr	r2, [r2, #28]
 8009cb2:	00d2      	lsls	r2, r2, #3
 8009cb4:	4920      	ldr	r1, [pc, #128]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009cba:	4b1f      	ldr	r3, [pc, #124]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cbe:	4a1e      	ldr	r2, [pc, #120]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d106      	bne.n	8009cda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009ccc:	4b1a      	ldr	r3, [pc, #104]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd0:	4a19      	ldr	r2, [pc, #100]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009cd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009cd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009cd8:	e00f      	b.n	8009cfa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d106      	bne.n	8009cee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009ce0:	4b15      	ldr	r3, [pc, #84]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce4:	4a14      	ldr	r2, [pc, #80]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009ce6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009cea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009cec:	e005      	b.n	8009cfa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009cee:	4b12      	ldr	r3, [pc, #72]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf2:	4a11      	ldr	r2, [pc, #68]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009cf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009cf8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009cfa:	4b0f      	ldr	r3, [pc, #60]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a0e      	ldr	r2, [pc, #56]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d06:	f7f9 fd55 	bl	80037b4 <HAL_GetTick>
 8009d0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d0c:	e008      	b.n	8009d20 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009d0e:	f7f9 fd51 	bl	80037b4 <HAL_GetTick>
 8009d12:	4602      	mov	r2, r0
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	1ad3      	subs	r3, r2, r3
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	d901      	bls.n	8009d20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	e006      	b.n	8009d2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d20:	4b05      	ldr	r3, [pc, #20]	; (8009d38 <RCCEx_PLL3_Config+0x15c>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d0f0      	beq.n	8009d0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	58024400 	.word	0x58024400
 8009d3c:	ffff0007 	.word	0xffff0007

08009d40 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e02b      	b.n	8009dac <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d106      	bne.n	8009d6e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f825 	bl	8009db8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2202      	movs	r2, #2
 8009d72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	3304      	adds	r3, #4
 8009d7e:	4619      	mov	r1, r3
 8009d80:	4610      	mov	r0, r2
 8009d82:	f002 f9df 	bl	800c144 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6818      	ldr	r0, [r3, #0]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	6839      	ldr	r1, [r7, #0]
 8009d92:	f002 fa33 	bl	800c1fc <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009d96:	4b07      	ldr	r3, [pc, #28]	; (8009db4 <HAL_SDRAM_Init+0x74>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a06      	ldr	r2, [pc, #24]	; (8009db4 <HAL_SDRAM_Init+0x74>)
 8009d9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009da0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2201      	movs	r2, #1
 8009da6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	52004000 	.word	0x52004000

08009db8 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009dde:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009de0:	7dfb      	ldrb	r3, [r7, #23]
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d101      	bne.n	8009dea <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009de6:	2302      	movs	r3, #2
 8009de8:	e021      	b.n	8009e2e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d002      	beq.n	8009df6 <HAL_SDRAM_SendCommand+0x2a>
 8009df0:	7dfb      	ldrb	r3, [r7, #23]
 8009df2:	2b05      	cmp	r3, #5
 8009df4:	d118      	bne.n	8009e28 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2202      	movs	r2, #2
 8009dfa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	68b9      	ldr	r1, [r7, #8]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f002 fa62 	bl	800c2d0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d104      	bne.n	8009e1e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2205      	movs	r2, #5
 8009e18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009e1c:	e006      	b.n	8009e2c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2201      	movs	r2, #1
 8009e22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009e26:	e001      	b.n	8009e2c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e000      	b.n	8009e2e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009e2c:	2300      	movs	r3, #0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3718      	adds	r7, #24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b082      	sub	sp, #8
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
 8009e3e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	2b02      	cmp	r3, #2
 8009e4a:	d101      	bne.n	8009e50 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009e4c:	2302      	movs	r3, #2
 8009e4e:	e016      	b.n	8009e7e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d10f      	bne.n	8009e7c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2202      	movs	r2, #2
 8009e60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6839      	ldr	r1, [r7, #0]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f002 fa54 	bl	800c318 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	e000      	b.n	8009e7e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3708      	adds	r7, #8
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b082      	sub	sp, #8
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d101      	bne.n	8009e98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	e049      	b.n	8009f2c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d106      	bne.n	8009eb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f7f6 fe05 	bl	8000abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2202      	movs	r2, #2
 8009eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	f000 fdff 	bl	800aac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2201      	movs	r2, #1
 8009ede:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2201      	movs	r2, #1
 8009eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2201      	movs	r2, #1
 8009f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d101      	bne.n	8009f46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e049      	b.n	8009fda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d106      	bne.n	8009f60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f89d 	bl	800a09a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2202      	movs	r2, #2
 8009f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	3304      	adds	r3, #4
 8009f70:	4619      	mov	r1, r3
 8009f72:	4610      	mov	r0, r2
 8009f74:	f000 fda8 	bl	800aac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b082      	sub	sp, #8
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2202      	movs	r2, #2
 8009fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	6a1a      	ldr	r2, [r3, #32]
 8009ff8:	f241 1311 	movw	r3, #4369	; 0x1111
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10f      	bne.n	800a022 <HAL_TIM_PWM_DeInit+0x40>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	6a1a      	ldr	r2, [r3, #32]
 800a008:	f240 4344 	movw	r3, #1092	; 0x444
 800a00c:	4013      	ands	r3, r2
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d107      	bne.n	800a022 <HAL_TIM_PWM_DeInit+0x40>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f022 0201 	bic.w	r2, r2, #1
 800a020:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 f843 	bl	800a0ae <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a09a:	b480      	push	{r7}
 800a09c:	b083      	sub	sp, #12
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a0a2:	bf00      	nop
 800a0a4:	370c      	adds	r7, #12
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800a0ae:	b480      	push	{r7}
 800a0b0:	b083      	sub	sp, #12
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800a0b6:	bf00      	nop
 800a0b8:	370c      	adds	r7, #12
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr
	...

0800a0c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d109      	bne.n	800a0e8 <HAL_TIM_PWM_Start+0x24>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	bf14      	ite	ne
 800a0e0:	2301      	movne	r3, #1
 800a0e2:	2300      	moveq	r3, #0
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	e03c      	b.n	800a162 <HAL_TIM_PWM_Start+0x9e>
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	2b04      	cmp	r3, #4
 800a0ec:	d109      	bne.n	800a102 <HAL_TIM_PWM_Start+0x3e>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	bf14      	ite	ne
 800a0fa:	2301      	movne	r3, #1
 800a0fc:	2300      	moveq	r3, #0
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	e02f      	b.n	800a162 <HAL_TIM_PWM_Start+0x9e>
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	2b08      	cmp	r3, #8
 800a106:	d109      	bne.n	800a11c <HAL_TIM_PWM_Start+0x58>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b01      	cmp	r3, #1
 800a112:	bf14      	ite	ne
 800a114:	2301      	movne	r3, #1
 800a116:	2300      	moveq	r3, #0
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	e022      	b.n	800a162 <HAL_TIM_PWM_Start+0x9e>
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	2b0c      	cmp	r3, #12
 800a120:	d109      	bne.n	800a136 <HAL_TIM_PWM_Start+0x72>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	bf14      	ite	ne
 800a12e:	2301      	movne	r3, #1
 800a130:	2300      	moveq	r3, #0
 800a132:	b2db      	uxtb	r3, r3
 800a134:	e015      	b.n	800a162 <HAL_TIM_PWM_Start+0x9e>
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	2b10      	cmp	r3, #16
 800a13a:	d109      	bne.n	800a150 <HAL_TIM_PWM_Start+0x8c>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a142:	b2db      	uxtb	r3, r3
 800a144:	2b01      	cmp	r3, #1
 800a146:	bf14      	ite	ne
 800a148:	2301      	movne	r3, #1
 800a14a:	2300      	moveq	r3, #0
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	e008      	b.n	800a162 <HAL_TIM_PWM_Start+0x9e>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a156:	b2db      	uxtb	r3, r3
 800a158:	2b01      	cmp	r3, #1
 800a15a:	bf14      	ite	ne
 800a15c:	2301      	movne	r3, #1
 800a15e:	2300      	moveq	r3, #0
 800a160:	b2db      	uxtb	r3, r3
 800a162:	2b00      	cmp	r3, #0
 800a164:	d001      	beq.n	800a16a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	e0a1      	b.n	800a2ae <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d104      	bne.n	800a17a <HAL_TIM_PWM_Start+0xb6>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2202      	movs	r2, #2
 800a174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a178:	e023      	b.n	800a1c2 <HAL_TIM_PWM_Start+0xfe>
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	2b04      	cmp	r3, #4
 800a17e:	d104      	bne.n	800a18a <HAL_TIM_PWM_Start+0xc6>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2202      	movs	r2, #2
 800a184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a188:	e01b      	b.n	800a1c2 <HAL_TIM_PWM_Start+0xfe>
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	2b08      	cmp	r3, #8
 800a18e:	d104      	bne.n	800a19a <HAL_TIM_PWM_Start+0xd6>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2202      	movs	r2, #2
 800a194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a198:	e013      	b.n	800a1c2 <HAL_TIM_PWM_Start+0xfe>
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	2b0c      	cmp	r3, #12
 800a19e:	d104      	bne.n	800a1aa <HAL_TIM_PWM_Start+0xe6>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2202      	movs	r2, #2
 800a1a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a1a8:	e00b      	b.n	800a1c2 <HAL_TIM_PWM_Start+0xfe>
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b10      	cmp	r3, #16
 800a1ae:	d104      	bne.n	800a1ba <HAL_TIM_PWM_Start+0xf6>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1b8:	e003      	b.n	800a1c2 <HAL_TIM_PWM_Start+0xfe>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2202      	movs	r2, #2
 800a1be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	6839      	ldr	r1, [r7, #0]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f001 f88a 	bl	800b2e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a38      	ldr	r2, [pc, #224]	; (800a2b8 <HAL_TIM_PWM_Start+0x1f4>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d013      	beq.n	800a202 <HAL_TIM_PWM_Start+0x13e>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a37      	ldr	r2, [pc, #220]	; (800a2bc <HAL_TIM_PWM_Start+0x1f8>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d00e      	beq.n	800a202 <HAL_TIM_PWM_Start+0x13e>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a35      	ldr	r2, [pc, #212]	; (800a2c0 <HAL_TIM_PWM_Start+0x1fc>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d009      	beq.n	800a202 <HAL_TIM_PWM_Start+0x13e>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a34      	ldr	r2, [pc, #208]	; (800a2c4 <HAL_TIM_PWM_Start+0x200>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d004      	beq.n	800a202 <HAL_TIM_PWM_Start+0x13e>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a32      	ldr	r2, [pc, #200]	; (800a2c8 <HAL_TIM_PWM_Start+0x204>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d101      	bne.n	800a206 <HAL_TIM_PWM_Start+0x142>
 800a202:	2301      	movs	r3, #1
 800a204:	e000      	b.n	800a208 <HAL_TIM_PWM_Start+0x144>
 800a206:	2300      	movs	r3, #0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d007      	beq.n	800a21c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a21a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a25      	ldr	r2, [pc, #148]	; (800a2b8 <HAL_TIM_PWM_Start+0x1f4>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d022      	beq.n	800a26c <HAL_TIM_PWM_Start+0x1a8>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a22e:	d01d      	beq.n	800a26c <HAL_TIM_PWM_Start+0x1a8>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a25      	ldr	r2, [pc, #148]	; (800a2cc <HAL_TIM_PWM_Start+0x208>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d018      	beq.n	800a26c <HAL_TIM_PWM_Start+0x1a8>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a24      	ldr	r2, [pc, #144]	; (800a2d0 <HAL_TIM_PWM_Start+0x20c>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d013      	beq.n	800a26c <HAL_TIM_PWM_Start+0x1a8>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a22      	ldr	r2, [pc, #136]	; (800a2d4 <HAL_TIM_PWM_Start+0x210>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d00e      	beq.n	800a26c <HAL_TIM_PWM_Start+0x1a8>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a1a      	ldr	r2, [pc, #104]	; (800a2bc <HAL_TIM_PWM_Start+0x1f8>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d009      	beq.n	800a26c <HAL_TIM_PWM_Start+0x1a8>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a1e      	ldr	r2, [pc, #120]	; (800a2d8 <HAL_TIM_PWM_Start+0x214>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d004      	beq.n	800a26c <HAL_TIM_PWM_Start+0x1a8>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a16      	ldr	r2, [pc, #88]	; (800a2c0 <HAL_TIM_PWM_Start+0x1fc>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d115      	bne.n	800a298 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	689a      	ldr	r2, [r3, #8]
 800a272:	4b1a      	ldr	r3, [pc, #104]	; (800a2dc <HAL_TIM_PWM_Start+0x218>)
 800a274:	4013      	ands	r3, r2
 800a276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2b06      	cmp	r3, #6
 800a27c:	d015      	beq.n	800a2aa <HAL_TIM_PWM_Start+0x1e6>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a284:	d011      	beq.n	800a2aa <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f042 0201 	orr.w	r2, r2, #1
 800a294:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a296:	e008      	b.n	800a2aa <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f042 0201 	orr.w	r2, r2, #1
 800a2a6:	601a      	str	r2, [r3, #0]
 800a2a8:	e000      	b.n	800a2ac <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	40010000 	.word	0x40010000
 800a2bc:	40010400 	.word	0x40010400
 800a2c0:	40014000 	.word	0x40014000
 800a2c4:	40014400 	.word	0x40014400
 800a2c8:	40014800 	.word	0x40014800
 800a2cc:	40000400 	.word	0x40000400
 800a2d0:	40000800 	.word	0x40000800
 800a2d4:	40000c00 	.word	0x40000c00
 800a2d8:	40001800 	.word	0x40001800
 800a2dc:	00010007 	.word	0x00010007

0800a2e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	6839      	ldr	r1, [r7, #0]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f000 fff6 	bl	800b2e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a3e      	ldr	r2, [pc, #248]	; (800a3f8 <HAL_TIM_PWM_Stop+0x118>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d013      	beq.n	800a32a <HAL_TIM_PWM_Stop+0x4a>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a3d      	ldr	r2, [pc, #244]	; (800a3fc <HAL_TIM_PWM_Stop+0x11c>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d00e      	beq.n	800a32a <HAL_TIM_PWM_Stop+0x4a>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a3b      	ldr	r2, [pc, #236]	; (800a400 <HAL_TIM_PWM_Stop+0x120>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d009      	beq.n	800a32a <HAL_TIM_PWM_Stop+0x4a>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a3a      	ldr	r2, [pc, #232]	; (800a404 <HAL_TIM_PWM_Stop+0x124>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d004      	beq.n	800a32a <HAL_TIM_PWM_Stop+0x4a>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a38      	ldr	r2, [pc, #224]	; (800a408 <HAL_TIM_PWM_Stop+0x128>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d101      	bne.n	800a32e <HAL_TIM_PWM_Stop+0x4e>
 800a32a:	2301      	movs	r3, #1
 800a32c:	e000      	b.n	800a330 <HAL_TIM_PWM_Stop+0x50>
 800a32e:	2300      	movs	r3, #0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d017      	beq.n	800a364 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	6a1a      	ldr	r2, [r3, #32]
 800a33a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a33e:	4013      	ands	r3, r2
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10f      	bne.n	800a364 <HAL_TIM_PWM_Stop+0x84>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	6a1a      	ldr	r2, [r3, #32]
 800a34a:	f240 4344 	movw	r3, #1092	; 0x444
 800a34e:	4013      	ands	r3, r2
 800a350:	2b00      	cmp	r3, #0
 800a352:	d107      	bne.n	800a364 <HAL_TIM_PWM_Stop+0x84>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a362:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6a1a      	ldr	r2, [r3, #32]
 800a36a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a36e:	4013      	ands	r3, r2
 800a370:	2b00      	cmp	r3, #0
 800a372:	d10f      	bne.n	800a394 <HAL_TIM_PWM_Stop+0xb4>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	6a1a      	ldr	r2, [r3, #32]
 800a37a:	f240 4344 	movw	r3, #1092	; 0x444
 800a37e:	4013      	ands	r3, r2
 800a380:	2b00      	cmp	r3, #0
 800a382:	d107      	bne.n	800a394 <HAL_TIM_PWM_Stop+0xb4>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f022 0201 	bic.w	r2, r2, #1
 800a392:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d104      	bne.n	800a3a4 <HAL_TIM_PWM_Stop+0xc4>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2201      	movs	r2, #1
 800a39e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3a2:	e023      	b.n	800a3ec <HAL_TIM_PWM_Stop+0x10c>
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	2b04      	cmp	r3, #4
 800a3a8:	d104      	bne.n	800a3b4 <HAL_TIM_PWM_Stop+0xd4>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3b2:	e01b      	b.n	800a3ec <HAL_TIM_PWM_Stop+0x10c>
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	2b08      	cmp	r3, #8
 800a3b8:	d104      	bne.n	800a3c4 <HAL_TIM_PWM_Stop+0xe4>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3c2:	e013      	b.n	800a3ec <HAL_TIM_PWM_Stop+0x10c>
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	2b0c      	cmp	r3, #12
 800a3c8:	d104      	bne.n	800a3d4 <HAL_TIM_PWM_Stop+0xf4>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3d2:	e00b      	b.n	800a3ec <HAL_TIM_PWM_Stop+0x10c>
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	2b10      	cmp	r3, #16
 800a3d8:	d104      	bne.n	800a3e4 <HAL_TIM_PWM_Stop+0x104>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3e2:	e003      	b.n	800a3ec <HAL_TIM_PWM_Stop+0x10c>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3708      	adds	r7, #8
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	40010000 	.word	0x40010000
 800a3fc:	40010400 	.word	0x40010400
 800a400:	40014000 	.word	0x40014000
 800a404:	40014400 	.word	0x40014400
 800a408:	40014800 	.word	0x40014800

0800a40c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	f003 0302 	and.w	r3, r3, #2
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d122      	bne.n	800a468 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	f003 0302 	and.w	r3, r3, #2
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	d11b      	bne.n	800a468 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f06f 0202 	mvn.w	r2, #2
 800a438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2201      	movs	r2, #1
 800a43e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	699b      	ldr	r3, [r3, #24]
 800a446:	f003 0303 	and.w	r3, r3, #3
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d003      	beq.n	800a456 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 fb1c 	bl	800aa8c <HAL_TIM_IC_CaptureCallback>
 800a454:	e005      	b.n	800a462 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 fb0e 	bl	800aa78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 fb1f 	bl	800aaa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	f003 0304 	and.w	r3, r3, #4
 800a472:	2b04      	cmp	r3, #4
 800a474:	d122      	bne.n	800a4bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	f003 0304 	and.w	r3, r3, #4
 800a480:	2b04      	cmp	r3, #4
 800a482:	d11b      	bne.n	800a4bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f06f 0204 	mvn.w	r2, #4
 800a48c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2202      	movs	r2, #2
 800a492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d003      	beq.n	800a4aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 faf2 	bl	800aa8c <HAL_TIM_IC_CaptureCallback>
 800a4a8:	e005      	b.n	800a4b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 fae4 	bl	800aa78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 faf5 	bl	800aaa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	f003 0308 	and.w	r3, r3, #8
 800a4c6:	2b08      	cmp	r3, #8
 800a4c8:	d122      	bne.n	800a510 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	f003 0308 	and.w	r3, r3, #8
 800a4d4:	2b08      	cmp	r3, #8
 800a4d6:	d11b      	bne.n	800a510 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f06f 0208 	mvn.w	r2, #8
 800a4e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2204      	movs	r2, #4
 800a4e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	69db      	ldr	r3, [r3, #28]
 800a4ee:	f003 0303 	and.w	r3, r3, #3
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d003      	beq.n	800a4fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 fac8 	bl	800aa8c <HAL_TIM_IC_CaptureCallback>
 800a4fc:	e005      	b.n	800a50a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 faba 	bl	800aa78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 facb 	bl	800aaa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	f003 0310 	and.w	r3, r3, #16
 800a51a:	2b10      	cmp	r3, #16
 800a51c:	d122      	bne.n	800a564 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	f003 0310 	and.w	r3, r3, #16
 800a528:	2b10      	cmp	r3, #16
 800a52a:	d11b      	bne.n	800a564 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f06f 0210 	mvn.w	r2, #16
 800a534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2208      	movs	r2, #8
 800a53a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a546:	2b00      	cmp	r3, #0
 800a548:	d003      	beq.n	800a552 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 fa9e 	bl	800aa8c <HAL_TIM_IC_CaptureCallback>
 800a550:	e005      	b.n	800a55e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 fa90 	bl	800aa78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 faa1 	bl	800aaa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	691b      	ldr	r3, [r3, #16]
 800a56a:	f003 0301 	and.w	r3, r3, #1
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d10e      	bne.n	800a590 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	f003 0301 	and.w	r3, r3, #1
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d107      	bne.n	800a590 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f06f 0201 	mvn.w	r2, #1
 800a588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fa6a 	bl	800aa64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a59a:	2b80      	cmp	r3, #128	; 0x80
 800a59c:	d10e      	bne.n	800a5bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a8:	2b80      	cmp	r3, #128	; 0x80
 800a5aa:	d107      	bne.n	800a5bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a5b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 ff52 	bl	800b460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ca:	d10e      	bne.n	800a5ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5d6:	2b80      	cmp	r3, #128	; 0x80
 800a5d8:	d107      	bne.n	800a5ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a5e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 ff45 	bl	800b474 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5f4:	2b40      	cmp	r3, #64	; 0x40
 800a5f6:	d10e      	bne.n	800a616 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a602:	2b40      	cmp	r3, #64	; 0x40
 800a604:	d107      	bne.n	800a616 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a60e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fa4f 	bl	800aab4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	691b      	ldr	r3, [r3, #16]
 800a61c:	f003 0320 	and.w	r3, r3, #32
 800a620:	2b20      	cmp	r3, #32
 800a622:	d10e      	bne.n	800a642 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	f003 0320 	and.w	r3, r3, #32
 800a62e:	2b20      	cmp	r3, #32
 800a630:	d107      	bne.n	800a642 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f06f 0220 	mvn.w	r2, #32
 800a63a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 ff05 	bl	800b44c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a642:	bf00      	nop
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
	...

0800a64c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b086      	sub	sp, #24
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a658:	2300      	movs	r3, #0
 800a65a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a662:	2b01      	cmp	r3, #1
 800a664:	d101      	bne.n	800a66a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a666:	2302      	movs	r3, #2
 800a668:	e0ff      	b.n	800a86a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2201      	movs	r2, #1
 800a66e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2b14      	cmp	r3, #20
 800a676:	f200 80f0 	bhi.w	800a85a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a67a:	a201      	add	r2, pc, #4	; (adr r2, 800a680 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a680:	0800a6d5 	.word	0x0800a6d5
 800a684:	0800a85b 	.word	0x0800a85b
 800a688:	0800a85b 	.word	0x0800a85b
 800a68c:	0800a85b 	.word	0x0800a85b
 800a690:	0800a715 	.word	0x0800a715
 800a694:	0800a85b 	.word	0x0800a85b
 800a698:	0800a85b 	.word	0x0800a85b
 800a69c:	0800a85b 	.word	0x0800a85b
 800a6a0:	0800a757 	.word	0x0800a757
 800a6a4:	0800a85b 	.word	0x0800a85b
 800a6a8:	0800a85b 	.word	0x0800a85b
 800a6ac:	0800a85b 	.word	0x0800a85b
 800a6b0:	0800a797 	.word	0x0800a797
 800a6b4:	0800a85b 	.word	0x0800a85b
 800a6b8:	0800a85b 	.word	0x0800a85b
 800a6bc:	0800a85b 	.word	0x0800a85b
 800a6c0:	0800a7d9 	.word	0x0800a7d9
 800a6c4:	0800a85b 	.word	0x0800a85b
 800a6c8:	0800a85b 	.word	0x0800a85b
 800a6cc:	0800a85b 	.word	0x0800a85b
 800a6d0:	0800a819 	.word	0x0800a819
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68b9      	ldr	r1, [r7, #8]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 fa8e 	bl	800abfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	699a      	ldr	r2, [r3, #24]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f042 0208 	orr.w	r2, r2, #8
 800a6ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	699a      	ldr	r2, [r3, #24]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f022 0204 	bic.w	r2, r2, #4
 800a6fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	6999      	ldr	r1, [r3, #24]
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	691a      	ldr	r2, [r3, #16]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	430a      	orrs	r2, r1
 800a710:	619a      	str	r2, [r3, #24]
      break;
 800a712:	e0a5      	b.n	800a860 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68b9      	ldr	r1, [r7, #8]
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 fafe 	bl	800ad1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	699a      	ldr	r2, [r3, #24]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a72e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	699a      	ldr	r2, [r3, #24]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a73e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	6999      	ldr	r1, [r3, #24]
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	021a      	lsls	r2, r3, #8
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	430a      	orrs	r2, r1
 800a752:	619a      	str	r2, [r3, #24]
      break;
 800a754:	e084      	b.n	800a860 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	68b9      	ldr	r1, [r7, #8]
 800a75c:	4618      	mov	r0, r3
 800a75e:	f000 fb67 	bl	800ae30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	69da      	ldr	r2, [r3, #28]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f042 0208 	orr.w	r2, r2, #8
 800a770:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	69da      	ldr	r2, [r3, #28]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f022 0204 	bic.w	r2, r2, #4
 800a780:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	69d9      	ldr	r1, [r3, #28]
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	691a      	ldr	r2, [r3, #16]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	430a      	orrs	r2, r1
 800a792:	61da      	str	r2, [r3, #28]
      break;
 800a794:	e064      	b.n	800a860 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68b9      	ldr	r1, [r7, #8]
 800a79c:	4618      	mov	r0, r3
 800a79e:	f000 fbcf 	bl	800af40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	69da      	ldr	r2, [r3, #28]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	69da      	ldr	r2, [r3, #28]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	69d9      	ldr	r1, [r3, #28]
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	021a      	lsls	r2, r3, #8
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	430a      	orrs	r2, r1
 800a7d4:	61da      	str	r2, [r3, #28]
      break;
 800a7d6:	e043      	b.n	800a860 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	68b9      	ldr	r1, [r7, #8]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f000 fc18 	bl	800b014 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f042 0208 	orr.w	r2, r2, #8
 800a7f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f022 0204 	bic.w	r2, r2, #4
 800a802:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	691a      	ldr	r2, [r3, #16]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	430a      	orrs	r2, r1
 800a814:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a816:	e023      	b.n	800a860 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	68b9      	ldr	r1, [r7, #8]
 800a81e:	4618      	mov	r0, r3
 800a820:	f000 fc5c 	bl	800b0dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a832:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a842:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	021a      	lsls	r2, r3, #8
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	430a      	orrs	r2, r1
 800a856:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a858:	e002      	b.n	800a860 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	75fb      	strb	r3, [r7, #23]
      break;
 800a85e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2200      	movs	r2, #0
 800a864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a868:	7dfb      	ldrb	r3, [r7, #23]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3718      	adds	r7, #24
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop

0800a874 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a87e:	2300      	movs	r3, #0
 800a880:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d101      	bne.n	800a890 <HAL_TIM_ConfigClockSource+0x1c>
 800a88c:	2302      	movs	r3, #2
 800a88e:	e0dc      	b.n	800aa4a <HAL_TIM_ConfigClockSource+0x1d6>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2202      	movs	r2, #2
 800a89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8a8:	68ba      	ldr	r2, [r7, #8]
 800a8aa:	4b6a      	ldr	r3, [pc, #424]	; (800aa54 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a8b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a64      	ldr	r2, [pc, #400]	; (800aa58 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	f000 80a9 	beq.w	800aa1e <HAL_TIM_ConfigClockSource+0x1aa>
 800a8cc:	4a62      	ldr	r2, [pc, #392]	; (800aa58 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	f200 80ae 	bhi.w	800aa30 <HAL_TIM_ConfigClockSource+0x1bc>
 800a8d4:	4a61      	ldr	r2, [pc, #388]	; (800aa5c <HAL_TIM_ConfigClockSource+0x1e8>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	f000 80a1 	beq.w	800aa1e <HAL_TIM_ConfigClockSource+0x1aa>
 800a8dc:	4a5f      	ldr	r2, [pc, #380]	; (800aa5c <HAL_TIM_ConfigClockSource+0x1e8>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	f200 80a6 	bhi.w	800aa30 <HAL_TIM_ConfigClockSource+0x1bc>
 800a8e4:	4a5e      	ldr	r2, [pc, #376]	; (800aa60 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	f000 8099 	beq.w	800aa1e <HAL_TIM_ConfigClockSource+0x1aa>
 800a8ec:	4a5c      	ldr	r2, [pc, #368]	; (800aa60 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	f200 809e 	bhi.w	800aa30 <HAL_TIM_ConfigClockSource+0x1bc>
 800a8f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a8f8:	f000 8091 	beq.w	800aa1e <HAL_TIM_ConfigClockSource+0x1aa>
 800a8fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a900:	f200 8096 	bhi.w	800aa30 <HAL_TIM_ConfigClockSource+0x1bc>
 800a904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a908:	f000 8089 	beq.w	800aa1e <HAL_TIM_ConfigClockSource+0x1aa>
 800a90c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a910:	f200 808e 	bhi.w	800aa30 <HAL_TIM_ConfigClockSource+0x1bc>
 800a914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a918:	d03e      	beq.n	800a998 <HAL_TIM_ConfigClockSource+0x124>
 800a91a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a91e:	f200 8087 	bhi.w	800aa30 <HAL_TIM_ConfigClockSource+0x1bc>
 800a922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a926:	f000 8086 	beq.w	800aa36 <HAL_TIM_ConfigClockSource+0x1c2>
 800a92a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a92e:	d87f      	bhi.n	800aa30 <HAL_TIM_ConfigClockSource+0x1bc>
 800a930:	2b70      	cmp	r3, #112	; 0x70
 800a932:	d01a      	beq.n	800a96a <HAL_TIM_ConfigClockSource+0xf6>
 800a934:	2b70      	cmp	r3, #112	; 0x70
 800a936:	d87b      	bhi.n	800aa30 <HAL_TIM_ConfigClockSource+0x1bc>
 800a938:	2b60      	cmp	r3, #96	; 0x60
 800a93a:	d050      	beq.n	800a9de <HAL_TIM_ConfigClockSource+0x16a>
 800a93c:	2b60      	cmp	r3, #96	; 0x60
 800a93e:	d877      	bhi.n	800aa30 <HAL_TIM_ConfigClockSource+0x1bc>
 800a940:	2b50      	cmp	r3, #80	; 0x50
 800a942:	d03c      	beq.n	800a9be <HAL_TIM_ConfigClockSource+0x14a>
 800a944:	2b50      	cmp	r3, #80	; 0x50
 800a946:	d873      	bhi.n	800aa30 <HAL_TIM_ConfigClockSource+0x1bc>
 800a948:	2b40      	cmp	r3, #64	; 0x40
 800a94a:	d058      	beq.n	800a9fe <HAL_TIM_ConfigClockSource+0x18a>
 800a94c:	2b40      	cmp	r3, #64	; 0x40
 800a94e:	d86f      	bhi.n	800aa30 <HAL_TIM_ConfigClockSource+0x1bc>
 800a950:	2b30      	cmp	r3, #48	; 0x30
 800a952:	d064      	beq.n	800aa1e <HAL_TIM_ConfigClockSource+0x1aa>
 800a954:	2b30      	cmp	r3, #48	; 0x30
 800a956:	d86b      	bhi.n	800aa30 <HAL_TIM_ConfigClockSource+0x1bc>
 800a958:	2b20      	cmp	r3, #32
 800a95a:	d060      	beq.n	800aa1e <HAL_TIM_ConfigClockSource+0x1aa>
 800a95c:	2b20      	cmp	r3, #32
 800a95e:	d867      	bhi.n	800aa30 <HAL_TIM_ConfigClockSource+0x1bc>
 800a960:	2b00      	cmp	r3, #0
 800a962:	d05c      	beq.n	800aa1e <HAL_TIM_ConfigClockSource+0x1aa>
 800a964:	2b10      	cmp	r3, #16
 800a966:	d05a      	beq.n	800aa1e <HAL_TIM_ConfigClockSource+0x1aa>
 800a968:	e062      	b.n	800aa30 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6818      	ldr	r0, [r3, #0]
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	6899      	ldr	r1, [r3, #8]
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	685a      	ldr	r2, [r3, #4]
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	f000 fc93 	bl	800b2a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a98c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	609a      	str	r2, [r3, #8]
      break;
 800a996:	e04f      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6818      	ldr	r0, [r3, #0]
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	6899      	ldr	r1, [r3, #8]
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	685a      	ldr	r2, [r3, #4]
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	f000 fc7c 	bl	800b2a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	689a      	ldr	r2, [r3, #8]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9ba:	609a      	str	r2, [r3, #8]
      break;
 800a9bc:	e03c      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6818      	ldr	r0, [r3, #0]
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	6859      	ldr	r1, [r3, #4]
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	f000 fbec 	bl	800b1a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2150      	movs	r1, #80	; 0x50
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f000 fc46 	bl	800b268 <TIM_ITRx_SetConfig>
      break;
 800a9dc:	e02c      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6818      	ldr	r0, [r3, #0]
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	6859      	ldr	r1, [r3, #4]
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	f000 fc0b 	bl	800b206 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2160      	movs	r1, #96	; 0x60
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 fc36 	bl	800b268 <TIM_ITRx_SetConfig>
      break;
 800a9fc:	e01c      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6818      	ldr	r0, [r3, #0]
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	6859      	ldr	r1, [r3, #4]
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	f000 fbcc 	bl	800b1a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2140      	movs	r1, #64	; 0x40
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 fc26 	bl	800b268 <TIM_ITRx_SetConfig>
      break;
 800aa1c:	e00c      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4619      	mov	r1, r3
 800aa28:	4610      	mov	r0, r2
 800aa2a:	f000 fc1d 	bl	800b268 <TIM_ITRx_SetConfig>
      break;
 800aa2e:	e003      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	73fb      	strb	r3, [r7, #15]
      break;
 800aa34:	e000      	b.n	800aa38 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800aa36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa48:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	ffceff88 	.word	0xffceff88
 800aa58:	00100040 	.word	0x00100040
 800aa5c:	00100030 	.word	0x00100030
 800aa60:	00100020 	.word	0x00100020

0800aa64 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa80:	bf00      	nop
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa94:	bf00      	nop
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aaa8:	bf00      	nop
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aabc:	bf00      	nop
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	4a40      	ldr	r2, [pc, #256]	; (800abdc <TIM_Base_SetConfig+0x114>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d013      	beq.n	800ab08 <TIM_Base_SetConfig+0x40>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aae6:	d00f      	beq.n	800ab08 <TIM_Base_SetConfig+0x40>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	4a3d      	ldr	r2, [pc, #244]	; (800abe0 <TIM_Base_SetConfig+0x118>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d00b      	beq.n	800ab08 <TIM_Base_SetConfig+0x40>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a3c      	ldr	r2, [pc, #240]	; (800abe4 <TIM_Base_SetConfig+0x11c>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d007      	beq.n	800ab08 <TIM_Base_SetConfig+0x40>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a3b      	ldr	r2, [pc, #236]	; (800abe8 <TIM_Base_SetConfig+0x120>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d003      	beq.n	800ab08 <TIM_Base_SetConfig+0x40>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a3a      	ldr	r2, [pc, #232]	; (800abec <TIM_Base_SetConfig+0x124>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d108      	bne.n	800ab1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	68fa      	ldr	r2, [r7, #12]
 800ab16:	4313      	orrs	r3, r2
 800ab18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4a2f      	ldr	r2, [pc, #188]	; (800abdc <TIM_Base_SetConfig+0x114>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d01f      	beq.n	800ab62 <TIM_Base_SetConfig+0x9a>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab28:	d01b      	beq.n	800ab62 <TIM_Base_SetConfig+0x9a>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a2c      	ldr	r2, [pc, #176]	; (800abe0 <TIM_Base_SetConfig+0x118>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d017      	beq.n	800ab62 <TIM_Base_SetConfig+0x9a>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a2b      	ldr	r2, [pc, #172]	; (800abe4 <TIM_Base_SetConfig+0x11c>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d013      	beq.n	800ab62 <TIM_Base_SetConfig+0x9a>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a2a      	ldr	r2, [pc, #168]	; (800abe8 <TIM_Base_SetConfig+0x120>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d00f      	beq.n	800ab62 <TIM_Base_SetConfig+0x9a>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a29      	ldr	r2, [pc, #164]	; (800abec <TIM_Base_SetConfig+0x124>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d00b      	beq.n	800ab62 <TIM_Base_SetConfig+0x9a>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a28      	ldr	r2, [pc, #160]	; (800abf0 <TIM_Base_SetConfig+0x128>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d007      	beq.n	800ab62 <TIM_Base_SetConfig+0x9a>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a27      	ldr	r2, [pc, #156]	; (800abf4 <TIM_Base_SetConfig+0x12c>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d003      	beq.n	800ab62 <TIM_Base_SetConfig+0x9a>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a26      	ldr	r2, [pc, #152]	; (800abf8 <TIM_Base_SetConfig+0x130>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d108      	bne.n	800ab74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	4313      	orrs	r3, r2
 800ab72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	695b      	ldr	r3, [r3, #20]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	689a      	ldr	r2, [r3, #8]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4a10      	ldr	r2, [pc, #64]	; (800abdc <TIM_Base_SetConfig+0x114>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d00f      	beq.n	800abc0 <TIM_Base_SetConfig+0xf8>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4a12      	ldr	r2, [pc, #72]	; (800abec <TIM_Base_SetConfig+0x124>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d00b      	beq.n	800abc0 <TIM_Base_SetConfig+0xf8>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a11      	ldr	r2, [pc, #68]	; (800abf0 <TIM_Base_SetConfig+0x128>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d007      	beq.n	800abc0 <TIM_Base_SetConfig+0xf8>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4a10      	ldr	r2, [pc, #64]	; (800abf4 <TIM_Base_SetConfig+0x12c>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d003      	beq.n	800abc0 <TIM_Base_SetConfig+0xf8>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a0f      	ldr	r2, [pc, #60]	; (800abf8 <TIM_Base_SetConfig+0x130>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d103      	bne.n	800abc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	691a      	ldr	r2, [r3, #16]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2201      	movs	r2, #1
 800abcc:	615a      	str	r2, [r3, #20]
}
 800abce:	bf00      	nop
 800abd0:	3714      	adds	r7, #20
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	40010000 	.word	0x40010000
 800abe0:	40000400 	.word	0x40000400
 800abe4:	40000800 	.word	0x40000800
 800abe8:	40000c00 	.word	0x40000c00
 800abec:	40010400 	.word	0x40010400
 800abf0:	40014000 	.word	0x40014000
 800abf4:	40014400 	.word	0x40014400
 800abf8:	40014800 	.word	0x40014800

0800abfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b087      	sub	sp, #28
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a1b      	ldr	r3, [r3, #32]
 800ac0a:	f023 0201 	bic.w	r2, r3, #1
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	699b      	ldr	r3, [r3, #24]
 800ac22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	4b37      	ldr	r3, [pc, #220]	; (800ad04 <TIM_OC1_SetConfig+0x108>)
 800ac28:	4013      	ands	r3, r2
 800ac2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f023 0303 	bic.w	r3, r3, #3
 800ac32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	f023 0302 	bic.w	r3, r3, #2
 800ac44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	697a      	ldr	r2, [r7, #20]
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a2d      	ldr	r2, [pc, #180]	; (800ad08 <TIM_OC1_SetConfig+0x10c>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d00f      	beq.n	800ac78 <TIM_OC1_SetConfig+0x7c>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a2c      	ldr	r2, [pc, #176]	; (800ad0c <TIM_OC1_SetConfig+0x110>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d00b      	beq.n	800ac78 <TIM_OC1_SetConfig+0x7c>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a2b      	ldr	r2, [pc, #172]	; (800ad10 <TIM_OC1_SetConfig+0x114>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d007      	beq.n	800ac78 <TIM_OC1_SetConfig+0x7c>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a2a      	ldr	r2, [pc, #168]	; (800ad14 <TIM_OC1_SetConfig+0x118>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d003      	beq.n	800ac78 <TIM_OC1_SetConfig+0x7c>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4a29      	ldr	r2, [pc, #164]	; (800ad18 <TIM_OC1_SetConfig+0x11c>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d10c      	bne.n	800ac92 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	f023 0308 	bic.w	r3, r3, #8
 800ac7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	697a      	ldr	r2, [r7, #20]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	f023 0304 	bic.w	r3, r3, #4
 800ac90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4a1c      	ldr	r2, [pc, #112]	; (800ad08 <TIM_OC1_SetConfig+0x10c>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d00f      	beq.n	800acba <TIM_OC1_SetConfig+0xbe>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4a1b      	ldr	r2, [pc, #108]	; (800ad0c <TIM_OC1_SetConfig+0x110>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d00b      	beq.n	800acba <TIM_OC1_SetConfig+0xbe>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4a1a      	ldr	r2, [pc, #104]	; (800ad10 <TIM_OC1_SetConfig+0x114>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d007      	beq.n	800acba <TIM_OC1_SetConfig+0xbe>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a19      	ldr	r2, [pc, #100]	; (800ad14 <TIM_OC1_SetConfig+0x118>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d003      	beq.n	800acba <TIM_OC1_SetConfig+0xbe>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a18      	ldr	r2, [pc, #96]	; (800ad18 <TIM_OC1_SetConfig+0x11c>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d111      	bne.n	800acde <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800acc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	693a      	ldr	r2, [r7, #16]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	693a      	ldr	r2, [r7, #16]
 800acda:	4313      	orrs	r3, r2
 800acdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	693a      	ldr	r2, [r7, #16]
 800ace2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	685a      	ldr	r2, [r3, #4]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	697a      	ldr	r2, [r7, #20]
 800acf6:	621a      	str	r2, [r3, #32]
}
 800acf8:	bf00      	nop
 800acfa:	371c      	adds	r7, #28
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr
 800ad04:	fffeff8f 	.word	0xfffeff8f
 800ad08:	40010000 	.word	0x40010000
 800ad0c:	40010400 	.word	0x40010400
 800ad10:	40014000 	.word	0x40014000
 800ad14:	40014400 	.word	0x40014400
 800ad18:	40014800 	.word	0x40014800

0800ad1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b087      	sub	sp, #28
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	f023 0210 	bic.w	r2, r3, #16
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a1b      	ldr	r3, [r3, #32]
 800ad36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	699b      	ldr	r3, [r3, #24]
 800ad42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad44:	68fa      	ldr	r2, [r7, #12]
 800ad46:	4b34      	ldr	r3, [pc, #208]	; (800ae18 <TIM_OC2_SetConfig+0xfc>)
 800ad48:	4013      	ands	r3, r2
 800ad4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	021b      	lsls	r3, r3, #8
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	f023 0320 	bic.w	r3, r3, #32
 800ad66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	011b      	lsls	r3, r3, #4
 800ad6e:	697a      	ldr	r2, [r7, #20]
 800ad70:	4313      	orrs	r3, r2
 800ad72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4a29      	ldr	r2, [pc, #164]	; (800ae1c <TIM_OC2_SetConfig+0x100>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d003      	beq.n	800ad84 <TIM_OC2_SetConfig+0x68>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4a28      	ldr	r2, [pc, #160]	; (800ae20 <TIM_OC2_SetConfig+0x104>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d10d      	bne.n	800ada0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	011b      	lsls	r3, r3, #4
 800ad92:	697a      	ldr	r2, [r7, #20]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4a1e      	ldr	r2, [pc, #120]	; (800ae1c <TIM_OC2_SetConfig+0x100>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d00f      	beq.n	800adc8 <TIM_OC2_SetConfig+0xac>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4a1d      	ldr	r2, [pc, #116]	; (800ae20 <TIM_OC2_SetConfig+0x104>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d00b      	beq.n	800adc8 <TIM_OC2_SetConfig+0xac>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	4a1c      	ldr	r2, [pc, #112]	; (800ae24 <TIM_OC2_SetConfig+0x108>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d007      	beq.n	800adc8 <TIM_OC2_SetConfig+0xac>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	4a1b      	ldr	r2, [pc, #108]	; (800ae28 <TIM_OC2_SetConfig+0x10c>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d003      	beq.n	800adc8 <TIM_OC2_SetConfig+0xac>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4a1a      	ldr	r2, [pc, #104]	; (800ae2c <TIM_OC2_SetConfig+0x110>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d113      	bne.n	800adf0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800adce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800add6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	695b      	ldr	r3, [r3, #20]
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	693a      	ldr	r2, [r7, #16]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	699b      	ldr	r3, [r3, #24]
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	693a      	ldr	r2, [r7, #16]
 800adec:	4313      	orrs	r3, r2
 800adee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	693a      	ldr	r2, [r7, #16]
 800adf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	685a      	ldr	r2, [r3, #4]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	697a      	ldr	r2, [r7, #20]
 800ae08:	621a      	str	r2, [r3, #32]
}
 800ae0a:	bf00      	nop
 800ae0c:	371c      	adds	r7, #28
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	feff8fff 	.word	0xfeff8fff
 800ae1c:	40010000 	.word	0x40010000
 800ae20:	40010400 	.word	0x40010400
 800ae24:	40014000 	.word	0x40014000
 800ae28:	40014400 	.word	0x40014400
 800ae2c:	40014800 	.word	0x40014800

0800ae30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b087      	sub	sp, #28
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a1b      	ldr	r3, [r3, #32]
 800ae3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a1b      	ldr	r3, [r3, #32]
 800ae4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	69db      	ldr	r3, [r3, #28]
 800ae56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	4b33      	ldr	r3, [pc, #204]	; (800af28 <TIM_OC3_SetConfig+0xf8>)
 800ae5c:	4013      	ands	r3, r2
 800ae5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f023 0303 	bic.w	r3, r3, #3
 800ae66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	68fa      	ldr	r2, [r7, #12]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	021b      	lsls	r3, r3, #8
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a28      	ldr	r2, [pc, #160]	; (800af2c <TIM_OC3_SetConfig+0xfc>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d003      	beq.n	800ae96 <TIM_OC3_SetConfig+0x66>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a27      	ldr	r2, [pc, #156]	; (800af30 <TIM_OC3_SetConfig+0x100>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d10d      	bne.n	800aeb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	021b      	lsls	r3, r3, #8
 800aea4:	697a      	ldr	r2, [r7, #20]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aeb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4a1d      	ldr	r2, [pc, #116]	; (800af2c <TIM_OC3_SetConfig+0xfc>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d00f      	beq.n	800aeda <TIM_OC3_SetConfig+0xaa>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4a1c      	ldr	r2, [pc, #112]	; (800af30 <TIM_OC3_SetConfig+0x100>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d00b      	beq.n	800aeda <TIM_OC3_SetConfig+0xaa>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4a1b      	ldr	r2, [pc, #108]	; (800af34 <TIM_OC3_SetConfig+0x104>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d007      	beq.n	800aeda <TIM_OC3_SetConfig+0xaa>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	4a1a      	ldr	r2, [pc, #104]	; (800af38 <TIM_OC3_SetConfig+0x108>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d003      	beq.n	800aeda <TIM_OC3_SetConfig+0xaa>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	4a19      	ldr	r2, [pc, #100]	; (800af3c <TIM_OC3_SetConfig+0x10c>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d113      	bne.n	800af02 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	695b      	ldr	r3, [r3, #20]
 800aeee:	011b      	lsls	r3, r3, #4
 800aef0:	693a      	ldr	r2, [r7, #16]
 800aef2:	4313      	orrs	r3, r2
 800aef4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	699b      	ldr	r3, [r3, #24]
 800aefa:	011b      	lsls	r3, r3, #4
 800aefc:	693a      	ldr	r2, [r7, #16]
 800aefe:	4313      	orrs	r3, r2
 800af00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	693a      	ldr	r2, [r7, #16]
 800af06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	685a      	ldr	r2, [r3, #4]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	697a      	ldr	r2, [r7, #20]
 800af1a:	621a      	str	r2, [r3, #32]
}
 800af1c:	bf00      	nop
 800af1e:	371c      	adds	r7, #28
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr
 800af28:	fffeff8f 	.word	0xfffeff8f
 800af2c:	40010000 	.word	0x40010000
 800af30:	40010400 	.word	0x40010400
 800af34:	40014000 	.word	0x40014000
 800af38:	40014400 	.word	0x40014400
 800af3c:	40014800 	.word	0x40014800

0800af40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af40:	b480      	push	{r7}
 800af42:	b087      	sub	sp, #28
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a1b      	ldr	r3, [r3, #32]
 800af4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a1b      	ldr	r3, [r3, #32]
 800af5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	69db      	ldr	r3, [r3, #28]
 800af66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800af68:	68fa      	ldr	r2, [r7, #12]
 800af6a:	4b24      	ldr	r3, [pc, #144]	; (800affc <TIM_OC4_SetConfig+0xbc>)
 800af6c:	4013      	ands	r3, r2
 800af6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	021b      	lsls	r3, r3, #8
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	4313      	orrs	r3, r2
 800af82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	031b      	lsls	r3, r3, #12
 800af92:	693a      	ldr	r2, [r7, #16]
 800af94:	4313      	orrs	r3, r2
 800af96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4a19      	ldr	r2, [pc, #100]	; (800b000 <TIM_OC4_SetConfig+0xc0>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d00f      	beq.n	800afc0 <TIM_OC4_SetConfig+0x80>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4a18      	ldr	r2, [pc, #96]	; (800b004 <TIM_OC4_SetConfig+0xc4>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d00b      	beq.n	800afc0 <TIM_OC4_SetConfig+0x80>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4a17      	ldr	r2, [pc, #92]	; (800b008 <TIM_OC4_SetConfig+0xc8>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d007      	beq.n	800afc0 <TIM_OC4_SetConfig+0x80>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	4a16      	ldr	r2, [pc, #88]	; (800b00c <TIM_OC4_SetConfig+0xcc>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d003      	beq.n	800afc0 <TIM_OC4_SetConfig+0x80>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a15      	ldr	r2, [pc, #84]	; (800b010 <TIM_OC4_SetConfig+0xd0>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d109      	bne.n	800afd4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	695b      	ldr	r3, [r3, #20]
 800afcc:	019b      	lsls	r3, r3, #6
 800afce:	697a      	ldr	r2, [r7, #20]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	697a      	ldr	r2, [r7, #20]
 800afd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	685a      	ldr	r2, [r3, #4]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	693a      	ldr	r2, [r7, #16]
 800afec:	621a      	str	r2, [r3, #32]
}
 800afee:	bf00      	nop
 800aff0:	371c      	adds	r7, #28
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	feff8fff 	.word	0xfeff8fff
 800b000:	40010000 	.word	0x40010000
 800b004:	40010400 	.word	0x40010400
 800b008:	40014000 	.word	0x40014000
 800b00c:	40014400 	.word	0x40014400
 800b010:	40014800 	.word	0x40014800

0800b014 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b014:	b480      	push	{r7}
 800b016:	b087      	sub	sp, #28
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a1b      	ldr	r3, [r3, #32]
 800b022:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a1b      	ldr	r3, [r3, #32]
 800b02e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b03a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b03c:	68fa      	ldr	r2, [r7, #12]
 800b03e:	4b21      	ldr	r3, [pc, #132]	; (800b0c4 <TIM_OC5_SetConfig+0xb0>)
 800b040:	4013      	ands	r3, r2
 800b042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	4313      	orrs	r3, r2
 800b04c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b054:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	689b      	ldr	r3, [r3, #8]
 800b05a:	041b      	lsls	r3, r3, #16
 800b05c:	693a      	ldr	r2, [r7, #16]
 800b05e:	4313      	orrs	r3, r2
 800b060:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	4a18      	ldr	r2, [pc, #96]	; (800b0c8 <TIM_OC5_SetConfig+0xb4>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d00f      	beq.n	800b08a <TIM_OC5_SetConfig+0x76>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	4a17      	ldr	r2, [pc, #92]	; (800b0cc <TIM_OC5_SetConfig+0xb8>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d00b      	beq.n	800b08a <TIM_OC5_SetConfig+0x76>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	4a16      	ldr	r2, [pc, #88]	; (800b0d0 <TIM_OC5_SetConfig+0xbc>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d007      	beq.n	800b08a <TIM_OC5_SetConfig+0x76>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4a15      	ldr	r2, [pc, #84]	; (800b0d4 <TIM_OC5_SetConfig+0xc0>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d003      	beq.n	800b08a <TIM_OC5_SetConfig+0x76>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	4a14      	ldr	r2, [pc, #80]	; (800b0d8 <TIM_OC5_SetConfig+0xc4>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d109      	bne.n	800b09e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b090:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	695b      	ldr	r3, [r3, #20]
 800b096:	021b      	lsls	r3, r3, #8
 800b098:	697a      	ldr	r2, [r7, #20]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	697a      	ldr	r2, [r7, #20]
 800b0a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	685a      	ldr	r2, [r3, #4]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	693a      	ldr	r2, [r7, #16]
 800b0b6:	621a      	str	r2, [r3, #32]
}
 800b0b8:	bf00      	nop
 800b0ba:	371c      	adds	r7, #28
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr
 800b0c4:	fffeff8f 	.word	0xfffeff8f
 800b0c8:	40010000 	.word	0x40010000
 800b0cc:	40010400 	.word	0x40010400
 800b0d0:	40014000 	.word	0x40014000
 800b0d4:	40014400 	.word	0x40014400
 800b0d8:	40014800 	.word	0x40014800

0800b0dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b087      	sub	sp, #28
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a1b      	ldr	r3, [r3, #32]
 800b0ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a1b      	ldr	r3, [r3, #32]
 800b0f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	4b22      	ldr	r3, [pc, #136]	; (800b190 <TIM_OC6_SetConfig+0xb4>)
 800b108:	4013      	ands	r3, r2
 800b10a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	021b      	lsls	r3, r3, #8
 800b112:	68fa      	ldr	r2, [r7, #12]
 800b114:	4313      	orrs	r3, r2
 800b116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b11e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	051b      	lsls	r3, r3, #20
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	4313      	orrs	r3, r2
 800b12a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	4a19      	ldr	r2, [pc, #100]	; (800b194 <TIM_OC6_SetConfig+0xb8>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d00f      	beq.n	800b154 <TIM_OC6_SetConfig+0x78>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4a18      	ldr	r2, [pc, #96]	; (800b198 <TIM_OC6_SetConfig+0xbc>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d00b      	beq.n	800b154 <TIM_OC6_SetConfig+0x78>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4a17      	ldr	r2, [pc, #92]	; (800b19c <TIM_OC6_SetConfig+0xc0>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d007      	beq.n	800b154 <TIM_OC6_SetConfig+0x78>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4a16      	ldr	r2, [pc, #88]	; (800b1a0 <TIM_OC6_SetConfig+0xc4>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d003      	beq.n	800b154 <TIM_OC6_SetConfig+0x78>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	4a15      	ldr	r2, [pc, #84]	; (800b1a4 <TIM_OC6_SetConfig+0xc8>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d109      	bne.n	800b168 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b15a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	695b      	ldr	r3, [r3, #20]
 800b160:	029b      	lsls	r3, r3, #10
 800b162:	697a      	ldr	r2, [r7, #20]
 800b164:	4313      	orrs	r3, r2
 800b166:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	697a      	ldr	r2, [r7, #20]
 800b16c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	685a      	ldr	r2, [r3, #4]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	693a      	ldr	r2, [r7, #16]
 800b180:	621a      	str	r2, [r3, #32]
}
 800b182:	bf00      	nop
 800b184:	371c      	adds	r7, #28
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr
 800b18e:	bf00      	nop
 800b190:	feff8fff 	.word	0xfeff8fff
 800b194:	40010000 	.word	0x40010000
 800b198:	40010400 	.word	0x40010400
 800b19c:	40014000 	.word	0x40014000
 800b1a0:	40014400 	.word	0x40014400
 800b1a4:	40014800 	.word	0x40014800

0800b1a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b087      	sub	sp, #28
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6a1b      	ldr	r3, [r3, #32]
 800b1b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6a1b      	ldr	r3, [r3, #32]
 800b1be:	f023 0201 	bic.w	r2, r3, #1
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	699b      	ldr	r3, [r3, #24]
 800b1ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b1d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	011b      	lsls	r3, r3, #4
 800b1d8:	693a      	ldr	r2, [r7, #16]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	f023 030a 	bic.w	r3, r3, #10
 800b1e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b1e6:	697a      	ldr	r2, [r7, #20]
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	693a      	ldr	r2, [r7, #16]
 800b1f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	697a      	ldr	r2, [r7, #20]
 800b1f8:	621a      	str	r2, [r3, #32]
}
 800b1fa:	bf00      	nop
 800b1fc:	371c      	adds	r7, #28
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr

0800b206 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b206:	b480      	push	{r7}
 800b208:	b087      	sub	sp, #28
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	60f8      	str	r0, [r7, #12]
 800b20e:	60b9      	str	r1, [r7, #8]
 800b210:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	6a1b      	ldr	r3, [r3, #32]
 800b216:	f023 0210 	bic.w	r2, r3, #16
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	699b      	ldr	r3, [r3, #24]
 800b222:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6a1b      	ldr	r3, [r3, #32]
 800b228:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b230:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	031b      	lsls	r3, r3, #12
 800b236:	697a      	ldr	r2, [r7, #20]
 800b238:	4313      	orrs	r3, r2
 800b23a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b242:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	011b      	lsls	r3, r3, #4
 800b248:	693a      	ldr	r2, [r7, #16]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	697a      	ldr	r2, [r7, #20]
 800b252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	693a      	ldr	r2, [r7, #16]
 800b258:	621a      	str	r2, [r3, #32]
}
 800b25a:	bf00      	nop
 800b25c:	371c      	adds	r7, #28
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
	...

0800b268 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	4b09      	ldr	r3, [pc, #36]	; (800b2a0 <TIM_ITRx_SetConfig+0x38>)
 800b27c:	4013      	ands	r3, r2
 800b27e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b280:	683a      	ldr	r2, [r7, #0]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	4313      	orrs	r3, r2
 800b286:	f043 0307 	orr.w	r3, r3, #7
 800b28a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	68fa      	ldr	r2, [r7, #12]
 800b290:	609a      	str	r2, [r3, #8]
}
 800b292:	bf00      	nop
 800b294:	3714      	adds	r7, #20
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	ffcfff8f 	.word	0xffcfff8f

0800b2a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b087      	sub	sp, #28
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	607a      	str	r2, [r7, #4]
 800b2b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	689b      	ldr	r3, [r3, #8]
 800b2b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b2be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	021a      	lsls	r2, r3, #8
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	431a      	orrs	r2, r3
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	697a      	ldr	r2, [r7, #20]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	697a      	ldr	r2, [r7, #20]
 800b2d6:	609a      	str	r2, [r3, #8]
}
 800b2d8:	bf00      	nop
 800b2da:	371c      	adds	r7, #28
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b087      	sub	sp, #28
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	f003 031f 	and.w	r3, r3, #31
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	6a1a      	ldr	r2, [r3, #32]
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	43db      	mvns	r3, r3
 800b306:	401a      	ands	r2, r3
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	6a1a      	ldr	r2, [r3, #32]
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	f003 031f 	and.w	r3, r3, #31
 800b316:	6879      	ldr	r1, [r7, #4]
 800b318:	fa01 f303 	lsl.w	r3, r1, r3
 800b31c:	431a      	orrs	r2, r3
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	621a      	str	r2, [r3, #32]
}
 800b322:	bf00      	nop
 800b324:	371c      	adds	r7, #28
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr
	...

0800b330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b340:	2b01      	cmp	r3, #1
 800b342:	d101      	bne.n	800b348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b344:	2302      	movs	r3, #2
 800b346:	e06d      	b.n	800b424 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2202      	movs	r2, #2
 800b354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a30      	ldr	r2, [pc, #192]	; (800b430 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d004      	beq.n	800b37c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a2f      	ldr	r2, [pc, #188]	; (800b434 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d108      	bne.n	800b38e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b382:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	68fa      	ldr	r2, [r7, #12]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b394:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	68fa      	ldr	r2, [r7, #12]
 800b39c:	4313      	orrs	r3, r2
 800b39e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a20      	ldr	r2, [pc, #128]	; (800b430 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d022      	beq.n	800b3f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3ba:	d01d      	beq.n	800b3f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a1d      	ldr	r2, [pc, #116]	; (800b438 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d018      	beq.n	800b3f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a1c      	ldr	r2, [pc, #112]	; (800b43c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d013      	beq.n	800b3f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a1a      	ldr	r2, [pc, #104]	; (800b440 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d00e      	beq.n	800b3f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a15      	ldr	r2, [pc, #84]	; (800b434 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d009      	beq.n	800b3f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a16      	ldr	r2, [pc, #88]	; (800b444 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d004      	beq.n	800b3f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a15      	ldr	r2, [pc, #84]	; (800b448 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d10c      	bne.n	800b412 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	68ba      	ldr	r2, [r7, #8]
 800b406:	4313      	orrs	r3, r2
 800b408:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	68ba      	ldr	r2, [r7, #8]
 800b410:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2201      	movs	r2, #1
 800b416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b422:	2300      	movs	r3, #0
}
 800b424:	4618      	mov	r0, r3
 800b426:	3714      	adds	r7, #20
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr
 800b430:	40010000 	.word	0x40010000
 800b434:	40010400 	.word	0x40010400
 800b438:	40000400 	.word	0x40000400
 800b43c:	40000800 	.word	0x40000800
 800b440:	40000c00 	.word	0x40000c00
 800b444:	40001800 	.word	0x40001800
 800b448:	40014000 	.word	0x40014000

0800b44c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b454:	bf00      	nop
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b468:	bf00      	nop
 800b46a:	370c      	adds	r7, #12
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr

0800b474 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b47c:	bf00      	nop
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr

0800b488 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b08a      	sub	sp, #40	; 0x28
 800b48c:	af02      	add	r7, sp, #8
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	603b      	str	r3, [r7, #0]
 800b494:	4613      	mov	r3, r2
 800b496:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b49e:	2b20      	cmp	r3, #32
 800b4a0:	d17b      	bne.n	800b59a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d002      	beq.n	800b4ae <HAL_UART_Transmit+0x26>
 800b4a8:	88fb      	ldrh	r3, [r7, #6]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d101      	bne.n	800b4b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e074      	b.n	800b59c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2221      	movs	r2, #33	; 0x21
 800b4be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b4c2:	f7f8 f977 	bl	80037b4 <HAL_GetTick>
 800b4c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	88fa      	ldrh	r2, [r7, #6]
 800b4cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	88fa      	ldrh	r2, [r7, #6]
 800b4d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4e0:	d108      	bne.n	800b4f4 <HAL_UART_Transmit+0x6c>
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	691b      	ldr	r3, [r3, #16]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d104      	bne.n	800b4f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	61bb      	str	r3, [r7, #24]
 800b4f2:	e003      	b.n	800b4fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b4fc:	e030      	b.n	800b560 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	9300      	str	r3, [sp, #0]
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	2200      	movs	r2, #0
 800b506:	2180      	movs	r1, #128	; 0x80
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f000 fced 	bl	800bee8 <UART_WaitOnFlagUntilTimeout>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d005      	beq.n	800b520 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2220      	movs	r2, #32
 800b518:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b51c:	2303      	movs	r3, #3
 800b51e:	e03d      	b.n	800b59c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b520:	69fb      	ldr	r3, [r7, #28]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d10b      	bne.n	800b53e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	881b      	ldrh	r3, [r3, #0]
 800b52a:	461a      	mov	r2, r3
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b534:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	3302      	adds	r3, #2
 800b53a:	61bb      	str	r3, [r7, #24]
 800b53c:	e007      	b.n	800b54e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b53e:	69fb      	ldr	r3, [r7, #28]
 800b540:	781a      	ldrb	r2, [r3, #0]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	3301      	adds	r3, #1
 800b54c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b554:	b29b      	uxth	r3, r3
 800b556:	3b01      	subs	r3, #1
 800b558:	b29a      	uxth	r2, r3
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b566:	b29b      	uxth	r3, r3
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1c8      	bne.n	800b4fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	2200      	movs	r2, #0
 800b574:	2140      	movs	r1, #64	; 0x40
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f000 fcb6 	bl	800bee8 <UART_WaitOnFlagUntilTimeout>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d005      	beq.n	800b58e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2220      	movs	r2, #32
 800b586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b58a:	2303      	movs	r3, #3
 800b58c:	e006      	b.n	800b59c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2220      	movs	r2, #32
 800b592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b596:	2300      	movs	r3, #0
 800b598:	e000      	b.n	800b59c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b59a:	2302      	movs	r3, #2
  }
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3720      	adds	r7, #32
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b08a      	sub	sp, #40	; 0x28
 800b5a8:	af02      	add	r7, sp, #8
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	60b9      	str	r1, [r7, #8]
 800b5ae:	603b      	str	r3, [r7, #0]
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5ba:	2b20      	cmp	r3, #32
 800b5bc:	f040 80b5 	bne.w	800b72a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d002      	beq.n	800b5cc <HAL_UART_Receive+0x28>
 800b5c6:	88fb      	ldrh	r3, [r7, #6]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d101      	bne.n	800b5d0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e0ad      	b.n	800b72c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2222      	movs	r2, #34	; 0x22
 800b5dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5e6:	f7f8 f8e5 	bl	80037b4 <HAL_GetTick>
 800b5ea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	88fa      	ldrh	r2, [r7, #6]
 800b5f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	88fa      	ldrh	r2, [r7, #6]
 800b5f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b604:	d10e      	bne.n	800b624 <HAL_UART_Receive+0x80>
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d105      	bne.n	800b61a <HAL_UART_Receive+0x76>
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b614:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b618:	e02d      	b.n	800b676 <HAL_UART_Receive+0xd2>
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	22ff      	movs	r2, #255	; 0xff
 800b61e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b622:	e028      	b.n	800b676 <HAL_UART_Receive+0xd2>
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10d      	bne.n	800b648 <HAL_UART_Receive+0xa4>
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	691b      	ldr	r3, [r3, #16]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d104      	bne.n	800b63e <HAL_UART_Receive+0x9a>
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	22ff      	movs	r2, #255	; 0xff
 800b638:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b63c:	e01b      	b.n	800b676 <HAL_UART_Receive+0xd2>
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	227f      	movs	r2, #127	; 0x7f
 800b642:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b646:	e016      	b.n	800b676 <HAL_UART_Receive+0xd2>
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b650:	d10d      	bne.n	800b66e <HAL_UART_Receive+0xca>
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	691b      	ldr	r3, [r3, #16]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d104      	bne.n	800b664 <HAL_UART_Receive+0xc0>
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	227f      	movs	r2, #127	; 0x7f
 800b65e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b662:	e008      	b.n	800b676 <HAL_UART_Receive+0xd2>
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	223f      	movs	r2, #63	; 0x3f
 800b668:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b66c:	e003      	b.n	800b676 <HAL_UART_Receive+0xd2>
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2200      	movs	r2, #0
 800b672:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b67c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b686:	d108      	bne.n	800b69a <HAL_UART_Receive+0xf6>
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	691b      	ldr	r3, [r3, #16]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d104      	bne.n	800b69a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800b690:	2300      	movs	r3, #0
 800b692:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	61bb      	str	r3, [r7, #24]
 800b698:	e003      	b.n	800b6a2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b6a2:	e036      	b.n	800b712 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	9300      	str	r3, [sp, #0]
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	2120      	movs	r1, #32
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f000 fc1a 	bl	800bee8 <UART_WaitOnFlagUntilTimeout>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d005      	beq.n	800b6c6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2220      	movs	r2, #32
 800b6be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800b6c2:	2303      	movs	r3, #3
 800b6c4:	e032      	b.n	800b72c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d10c      	bne.n	800b6e6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	8a7b      	ldrh	r3, [r7, #18]
 800b6d6:	4013      	ands	r3, r2
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	69bb      	ldr	r3, [r7, #24]
 800b6dc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b6de:	69bb      	ldr	r3, [r7, #24]
 800b6e0:	3302      	adds	r3, #2
 800b6e2:	61bb      	str	r3, [r7, #24]
 800b6e4:	e00c      	b.n	800b700 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ec:	b2da      	uxtb	r2, r3
 800b6ee:	8a7b      	ldrh	r3, [r7, #18]
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	4013      	ands	r3, r2
 800b6f4:	b2da      	uxtb	r2, r3
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b6fa:	69fb      	ldr	r3, [r7, #28]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b706:	b29b      	uxth	r3, r3
 800b708:	3b01      	subs	r3, #1
 800b70a:	b29a      	uxth	r2, r3
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b718:	b29b      	uxth	r3, r3
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1c2      	bne.n	800b6a4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2220      	movs	r2, #32
 800b722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800b726:	2300      	movs	r3, #0
 800b728:	e000      	b.n	800b72c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800b72a:	2302      	movs	r3, #2
  }
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3720      	adds	r7, #32
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b0ba      	sub	sp, #232	; 0xe8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	69db      	ldr	r3, [r3, #28]
 800b742:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b75a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b75e:	f640 030f 	movw	r3, #2063	; 0x80f
 800b762:	4013      	ands	r3, r2
 800b764:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b768:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d11b      	bne.n	800b7a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b774:	f003 0320 	and.w	r3, r3, #32
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d015      	beq.n	800b7a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b77c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b780:	f003 0320 	and.w	r3, r3, #32
 800b784:	2b00      	cmp	r3, #0
 800b786:	d105      	bne.n	800b794 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b78c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b790:	2b00      	cmp	r3, #0
 800b792:	d009      	beq.n	800b7a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b798:	2b00      	cmp	r3, #0
 800b79a:	f000 8377 	beq.w	800be8c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	4798      	blx	r3
      }
      return;
 800b7a6:	e371      	b.n	800be8c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b7a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f000 8123 	beq.w	800b9f8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b7b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b7b6:	4b8d      	ldr	r3, [pc, #564]	; (800b9ec <HAL_UART_IRQHandler+0x2b8>)
 800b7b8:	4013      	ands	r3, r2
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d106      	bne.n	800b7cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b7be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b7c2:	4b8b      	ldr	r3, [pc, #556]	; (800b9f0 <HAL_UART_IRQHandler+0x2bc>)
 800b7c4:	4013      	ands	r3, r2
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f000 8116 	beq.w	800b9f8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b7cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7d0:	f003 0301 	and.w	r3, r3, #1
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d011      	beq.n	800b7fc <HAL_UART_IRQHandler+0xc8>
 800b7d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00b      	beq.n	800b7fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7f2:	f043 0201 	orr.w	r2, r3, #1
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b800:	f003 0302 	and.w	r3, r3, #2
 800b804:	2b00      	cmp	r3, #0
 800b806:	d011      	beq.n	800b82c <HAL_UART_IRQHandler+0xf8>
 800b808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b80c:	f003 0301 	and.w	r3, r3, #1
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00b      	beq.n	800b82c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	2202      	movs	r2, #2
 800b81a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b822:	f043 0204 	orr.w	r2, r3, #4
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b82c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b830:	f003 0304 	and.w	r3, r3, #4
 800b834:	2b00      	cmp	r3, #0
 800b836:	d011      	beq.n	800b85c <HAL_UART_IRQHandler+0x128>
 800b838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b83c:	f003 0301 	and.w	r3, r3, #1
 800b840:	2b00      	cmp	r3, #0
 800b842:	d00b      	beq.n	800b85c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2204      	movs	r2, #4
 800b84a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b852:	f043 0202 	orr.w	r2, r3, #2
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b85c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b860:	f003 0308 	and.w	r3, r3, #8
 800b864:	2b00      	cmp	r3, #0
 800b866:	d017      	beq.n	800b898 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b86c:	f003 0320 	and.w	r3, r3, #32
 800b870:	2b00      	cmp	r3, #0
 800b872:	d105      	bne.n	800b880 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b874:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b878:	4b5c      	ldr	r3, [pc, #368]	; (800b9ec <HAL_UART_IRQHandler+0x2b8>)
 800b87a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d00b      	beq.n	800b898 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2208      	movs	r2, #8
 800b886:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b88e:	f043 0208 	orr.w	r2, r3, #8
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b89c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d012      	beq.n	800b8ca <HAL_UART_IRQHandler+0x196>
 800b8a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d00c      	beq.n	800b8ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b8b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8c0:	f043 0220 	orr.w	r2, r3, #32
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f000 82dd 	beq.w	800be90 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b8d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8da:	f003 0320 	and.w	r3, r3, #32
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d013      	beq.n	800b90a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b8e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8e6:	f003 0320 	and.w	r3, r3, #32
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d105      	bne.n	800b8fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b8ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d007      	beq.n	800b90a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d003      	beq.n	800b90a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b910:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b91e:	2b40      	cmp	r3, #64	; 0x40
 800b920:	d005      	beq.n	800b92e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b926:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d054      	beq.n	800b9d8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 fb42 	bl	800bfb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b93e:	2b40      	cmp	r3, #64	; 0x40
 800b940:	d146      	bne.n	800b9d0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	3308      	adds	r3, #8
 800b948:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b94c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b950:	e853 3f00 	ldrex	r3, [r3]
 800b954:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b958:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b95c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b960:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	3308      	adds	r3, #8
 800b96a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b96e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b972:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b976:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b97a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b97e:	e841 2300 	strex	r3, r2, [r1]
 800b982:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d1d9      	bne.n	800b942 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b994:	2b00      	cmp	r3, #0
 800b996:	d017      	beq.n	800b9c8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b99e:	4a15      	ldr	r2, [pc, #84]	; (800b9f4 <HAL_UART_IRQHandler+0x2c0>)
 800b9a0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7f8 fb59 	bl	8004060 <HAL_DMA_Abort_IT>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d019      	beq.n	800b9e8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b9c2:	4610      	mov	r0, r2
 800b9c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9c6:	e00f      	b.n	800b9e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 fa77 	bl	800bebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9ce:	e00b      	b.n	800b9e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 fa73 	bl	800bebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9d6:	e007      	b.n	800b9e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 fa6f 	bl	800bebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b9e6:	e253      	b.n	800be90 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9e8:	bf00      	nop
    return;
 800b9ea:	e251      	b.n	800be90 <HAL_UART_IRQHandler+0x75c>
 800b9ec:	10000001 	.word	0x10000001
 800b9f0:	04000120 	.word	0x04000120
 800b9f4:	0800c085 	.word	0x0800c085

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	f040 81e7 	bne.w	800bdd0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ba02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba06:	f003 0310 	and.w	r3, r3, #16
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	f000 81e0 	beq.w	800bdd0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ba10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba14:	f003 0310 	and.w	r3, r3, #16
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	f000 81d9 	beq.w	800bdd0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2210      	movs	r2, #16
 800ba24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba30:	2b40      	cmp	r3, #64	; 0x40
 800ba32:	f040 8151 	bne.w	800bcd8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a96      	ldr	r2, [pc, #600]	; (800bc98 <HAL_UART_IRQHandler+0x564>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d068      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a93      	ldr	r2, [pc, #588]	; (800bc9c <HAL_UART_IRQHandler+0x568>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d061      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a91      	ldr	r2, [pc, #580]	; (800bca0 <HAL_UART_IRQHandler+0x56c>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d05a      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a8e      	ldr	r2, [pc, #568]	; (800bca4 <HAL_UART_IRQHandler+0x570>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d053      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a8c      	ldr	r2, [pc, #560]	; (800bca8 <HAL_UART_IRQHandler+0x574>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d04c      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a89      	ldr	r2, [pc, #548]	; (800bcac <HAL_UART_IRQHandler+0x578>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d045      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4a87      	ldr	r2, [pc, #540]	; (800bcb0 <HAL_UART_IRQHandler+0x57c>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d03e      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a84      	ldr	r2, [pc, #528]	; (800bcb4 <HAL_UART_IRQHandler+0x580>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d037      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4a82      	ldr	r2, [pc, #520]	; (800bcb8 <HAL_UART_IRQHandler+0x584>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d030      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a7f      	ldr	r2, [pc, #508]	; (800bcbc <HAL_UART_IRQHandler+0x588>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d029      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a7d      	ldr	r2, [pc, #500]	; (800bcc0 <HAL_UART_IRQHandler+0x58c>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d022      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a7a      	ldr	r2, [pc, #488]	; (800bcc4 <HAL_UART_IRQHandler+0x590>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d01b      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a78      	ldr	r2, [pc, #480]	; (800bcc8 <HAL_UART_IRQHandler+0x594>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d014      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4a75      	ldr	r2, [pc, #468]	; (800bccc <HAL_UART_IRQHandler+0x598>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d00d      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a73      	ldr	r2, [pc, #460]	; (800bcd0 <HAL_UART_IRQHandler+0x59c>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d006      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a70      	ldr	r2, [pc, #448]	; (800bcd4 <HAL_UART_IRQHandler+0x5a0>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d106      	bne.n	800bb24 <HAL_UART_IRQHandler+0x3f0>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	e005      	b.n	800bb30 <HAL_UART_IRQHandler+0x3fc>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bb34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	f000 81ab 	beq.w	800be94 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bb44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	f080 81a3 	bcs.w	800be94 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bb54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb5e:	69db      	ldr	r3, [r3, #28]
 800bb60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb64:	f000 8087 	beq.w	800bc76 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bb74:	e853 3f00 	ldrex	r3, [r3]
 800bb78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bb7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bb80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bb92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bb96:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bb9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bba2:	e841 2300 	strex	r3, r2, [r1]
 800bba6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bbaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d1da      	bne.n	800bb68 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	3308      	adds	r3, #8
 800bbb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbbc:	e853 3f00 	ldrex	r3, [r3]
 800bbc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bbc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bbc4:	f023 0301 	bic.w	r3, r3, #1
 800bbc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	3308      	adds	r3, #8
 800bbd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bbd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bbda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbdc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bbde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bbe2:	e841 2300 	strex	r3, r2, [r1]
 800bbe6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bbe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1e1      	bne.n	800bbb2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	3308      	adds	r3, #8
 800bbf4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bbf8:	e853 3f00 	ldrex	r3, [r3]
 800bbfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bbfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	3308      	adds	r3, #8
 800bc0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bc12:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bc14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bc18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bc1a:	e841 2300 	strex	r3, r2, [r1]
 800bc1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bc20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1e3      	bne.n	800bbee <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2220      	movs	r2, #32
 800bc2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc3c:	e853 3f00 	ldrex	r3, [r3]
 800bc40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bc42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc44:	f023 0310 	bic.w	r3, r3, #16
 800bc48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	461a      	mov	r2, r3
 800bc52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bc56:	65bb      	str	r3, [r7, #88]	; 0x58
 800bc58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc5e:	e841 2300 	strex	r3, r2, [r1]
 800bc62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bc64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d1e4      	bne.n	800bc34 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7f7 fed7 	bl	8003a24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2202      	movs	r2, #2
 800bc7a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	1ad3      	subs	r3, r2, r3
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	4619      	mov	r1, r3
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 f91d 	bl	800bed0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bc96:	e0fd      	b.n	800be94 <HAL_UART_IRQHandler+0x760>
 800bc98:	40020010 	.word	0x40020010
 800bc9c:	40020028 	.word	0x40020028
 800bca0:	40020040 	.word	0x40020040
 800bca4:	40020058 	.word	0x40020058
 800bca8:	40020070 	.word	0x40020070
 800bcac:	40020088 	.word	0x40020088
 800bcb0:	400200a0 	.word	0x400200a0
 800bcb4:	400200b8 	.word	0x400200b8
 800bcb8:	40020410 	.word	0x40020410
 800bcbc:	40020428 	.word	0x40020428
 800bcc0:	40020440 	.word	0x40020440
 800bcc4:	40020458 	.word	0x40020458
 800bcc8:	40020470 	.word	0x40020470
 800bccc:	40020488 	.word	0x40020488
 800bcd0:	400204a0 	.word	0x400204a0
 800bcd4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	1ad3      	subs	r3, r2, r3
 800bce8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f000 80cf 	beq.w	800be98 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bcfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	f000 80ca 	beq.w	800be98 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd0c:	e853 3f00 	ldrex	r3, [r3]
 800bd10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bd12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	461a      	mov	r2, r3
 800bd22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd26:	647b      	str	r3, [r7, #68]	; 0x44
 800bd28:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd2e:	e841 2300 	strex	r3, r2, [r1]
 800bd32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bd34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d1e4      	bne.n	800bd04 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	3308      	adds	r3, #8
 800bd40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd44:	e853 3f00 	ldrex	r3, [r3]
 800bd48:	623b      	str	r3, [r7, #32]
   return(result);
 800bd4a:	6a3a      	ldr	r2, [r7, #32]
 800bd4c:	4b55      	ldr	r3, [pc, #340]	; (800bea4 <HAL_UART_IRQHandler+0x770>)
 800bd4e:	4013      	ands	r3, r2
 800bd50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	3308      	adds	r3, #8
 800bd5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bd5e:	633a      	str	r2, [r7, #48]	; 0x30
 800bd60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd66:	e841 2300 	strex	r3, r2, [r1]
 800bd6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d1e3      	bne.n	800bd3a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2220      	movs	r2, #32
 800bd76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2200      	movs	r2, #0
 800bd84:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	e853 3f00 	ldrex	r3, [r3]
 800bd92:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f023 0310 	bic.w	r3, r3, #16
 800bd9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	461a      	mov	r2, r3
 800bda4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bda8:	61fb      	str	r3, [r7, #28]
 800bdaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdac:	69b9      	ldr	r1, [r7, #24]
 800bdae:	69fa      	ldr	r2, [r7, #28]
 800bdb0:	e841 2300 	strex	r3, r2, [r1]
 800bdb4:	617b      	str	r3, [r7, #20]
   return(result);
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d1e4      	bne.n	800bd86 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2202      	movs	r2, #2
 800bdc0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bdc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f000 f881 	bl	800bed0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bdce:	e063      	b.n	800be98 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bdd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d00e      	beq.n	800bdfa <HAL_UART_IRQHandler+0x6c6>
 800bddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bde0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d008      	beq.n	800bdfa <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bdf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 f987 	bl	800c106 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bdf8:	e051      	b.n	800be9e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bdfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be02:	2b00      	cmp	r3, #0
 800be04:	d014      	beq.n	800be30 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800be06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d105      	bne.n	800be1e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800be12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d008      	beq.n	800be30 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be22:	2b00      	cmp	r3, #0
 800be24:	d03a      	beq.n	800be9c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	4798      	blx	r3
    }
    return;
 800be2e:	e035      	b.n	800be9c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800be30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d009      	beq.n	800be50 <HAL_UART_IRQHandler+0x71c>
 800be3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be44:	2b00      	cmp	r3, #0
 800be46:	d003      	beq.n	800be50 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 f931 	bl	800c0b0 <UART_EndTransmit_IT>
    return;
 800be4e:	e026      	b.n	800be9e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800be50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d009      	beq.n	800be70 <HAL_UART_IRQHandler+0x73c>
 800be5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800be64:	2b00      	cmp	r3, #0
 800be66:	d003      	beq.n	800be70 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 f960 	bl	800c12e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be6e:	e016      	b.n	800be9e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800be70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d010      	beq.n	800be9e <HAL_UART_IRQHandler+0x76a>
 800be7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be80:	2b00      	cmp	r3, #0
 800be82:	da0c      	bge.n	800be9e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 f948 	bl	800c11a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be8a:	e008      	b.n	800be9e <HAL_UART_IRQHandler+0x76a>
      return;
 800be8c:	bf00      	nop
 800be8e:	e006      	b.n	800be9e <HAL_UART_IRQHandler+0x76a>
    return;
 800be90:	bf00      	nop
 800be92:	e004      	b.n	800be9e <HAL_UART_IRQHandler+0x76a>
      return;
 800be94:	bf00      	nop
 800be96:	e002      	b.n	800be9e <HAL_UART_IRQHandler+0x76a>
      return;
 800be98:	bf00      	nop
 800be9a:	e000      	b.n	800be9e <HAL_UART_IRQHandler+0x76a>
    return;
 800be9c:	bf00      	nop
  }
}
 800be9e:	37e8      	adds	r7, #232	; 0xe8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	effffffe 	.word	0xeffffffe

0800bea8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b083      	sub	sp, #12
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800beb0:	bf00      	nop
 800beb2:	370c      	adds	r7, #12
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr

0800bebc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bec4:	bf00      	nop
 800bec6:	370c      	adds	r7, #12
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	460b      	mov	r3, r1
 800beda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bedc:	bf00      	nop
 800bede:	370c      	adds	r7, #12
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	603b      	str	r3, [r7, #0]
 800bef4:	4613      	mov	r3, r2
 800bef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bef8:	e049      	b.n	800bf8e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800befa:	69bb      	ldr	r3, [r7, #24]
 800befc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf00:	d045      	beq.n	800bf8e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf02:	f7f7 fc57 	bl	80037b4 <HAL_GetTick>
 800bf06:	4602      	mov	r2, r0
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	1ad3      	subs	r3, r2, r3
 800bf0c:	69ba      	ldr	r2, [r7, #24]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d302      	bcc.n	800bf18 <UART_WaitOnFlagUntilTimeout+0x30>
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d101      	bne.n	800bf1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bf18:	2303      	movs	r3, #3
 800bf1a:	e048      	b.n	800bfae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f003 0304 	and.w	r3, r3, #4
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d031      	beq.n	800bf8e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	69db      	ldr	r3, [r3, #28]
 800bf30:	f003 0308 	and.w	r3, r3, #8
 800bf34:	2b08      	cmp	r3, #8
 800bf36:	d110      	bne.n	800bf5a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2208      	movs	r2, #8
 800bf3e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f000 f839 	bl	800bfb8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2208      	movs	r2, #8
 800bf4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2200      	movs	r2, #0
 800bf52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800bf56:	2301      	movs	r3, #1
 800bf58:	e029      	b.n	800bfae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	69db      	ldr	r3, [r3, #28]
 800bf60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf68:	d111      	bne.n	800bf8e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bf74:	68f8      	ldr	r0, [r7, #12]
 800bf76:	f000 f81f 	bl	800bfb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2220      	movs	r2, #32
 800bf7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bf8a:	2303      	movs	r3, #3
 800bf8c:	e00f      	b.n	800bfae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	69da      	ldr	r2, [r3, #28]
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	4013      	ands	r3, r2
 800bf98:	68ba      	ldr	r2, [r7, #8]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	bf0c      	ite	eq
 800bf9e:	2301      	moveq	r3, #1
 800bfa0:	2300      	movne	r3, #0
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	79fb      	ldrb	r3, [r7, #7]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d0a6      	beq.n	800befa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3710      	adds	r7, #16
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
	...

0800bfb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b095      	sub	sp, #84	; 0x54
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfc8:	e853 3f00 	ldrex	r3, [r3]
 800bfcc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bfd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	461a      	mov	r2, r3
 800bfdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfde:	643b      	str	r3, [r7, #64]	; 0x40
 800bfe0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bfe4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bfe6:	e841 2300 	strex	r3, r2, [r1]
 800bfea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1e6      	bne.n	800bfc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	3308      	adds	r3, #8
 800bff8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bffa:	6a3b      	ldr	r3, [r7, #32]
 800bffc:	e853 3f00 	ldrex	r3, [r3]
 800c000:	61fb      	str	r3, [r7, #28]
   return(result);
 800c002:	69fa      	ldr	r2, [r7, #28]
 800c004:	4b1e      	ldr	r3, [pc, #120]	; (800c080 <UART_EndRxTransfer+0xc8>)
 800c006:	4013      	ands	r3, r2
 800c008:	64bb      	str	r3, [r7, #72]	; 0x48
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	3308      	adds	r3, #8
 800c010:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c012:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c014:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c016:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c01a:	e841 2300 	strex	r3, r2, [r1]
 800c01e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c022:	2b00      	cmp	r3, #0
 800c024:	d1e5      	bne.n	800bff2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d118      	bne.n	800c060 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	e853 3f00 	ldrex	r3, [r3]
 800c03a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	f023 0310 	bic.w	r3, r3, #16
 800c042:	647b      	str	r3, [r7, #68]	; 0x44
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	461a      	mov	r2, r3
 800c04a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c04c:	61bb      	str	r3, [r7, #24]
 800c04e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c050:	6979      	ldr	r1, [r7, #20]
 800c052:	69ba      	ldr	r2, [r7, #24]
 800c054:	e841 2300 	strex	r3, r2, [r1]
 800c058:	613b      	str	r3, [r7, #16]
   return(result);
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1e6      	bne.n	800c02e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2220      	movs	r2, #32
 800c064:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2200      	movs	r2, #0
 800c06c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c074:	bf00      	nop
 800c076:	3754      	adds	r7, #84	; 0x54
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr
 800c080:	effffffe 	.word	0xeffffffe

0800c084 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c090:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2200      	movs	r2, #0
 800c096:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2200      	movs	r2, #0
 800c09e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f7ff ff0a 	bl	800bebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0a8:	bf00      	nop
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b088      	sub	sp, #32
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	e853 3f00 	ldrex	r3, [r3]
 800c0c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0cc:	61fb      	str	r3, [r7, #28]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	61bb      	str	r3, [r7, #24]
 800c0d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0da:	6979      	ldr	r1, [r7, #20]
 800c0dc:	69ba      	ldr	r2, [r7, #24]
 800c0de:	e841 2300 	strex	r3, r2, [r1]
 800c0e2:	613b      	str	r3, [r7, #16]
   return(result);
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d1e6      	bne.n	800c0b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2220      	movs	r2, #32
 800c0ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f7ff fed5 	bl	800bea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0fe:	bf00      	nop
 800c100:	3720      	adds	r7, #32
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c106:	b480      	push	{r7}
 800c108:	b083      	sub	sp, #12
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c10e:	bf00      	nop
 800c110:	370c      	adds	r7, #12
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr

0800c11a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c11a:	b480      	push	{r7}
 800c11c:	b083      	sub	sp, #12
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c122:	bf00      	nop
 800c124:	370c      	adds	r7, #12
 800c126:	46bd      	mov	sp, r7
 800c128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12c:	4770      	bx	lr

0800c12e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c12e:	b480      	push	{r7}
 800c130:	b083      	sub	sp, #12
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c136:	bf00      	nop
 800c138:	370c      	adds	r7, #12
 800c13a:	46bd      	mov	sp, r7
 800c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c140:	4770      	bx	lr
	...

0800c144 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d121      	bne.n	800c19a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681a      	ldr	r2, [r3, #0]
 800c15a:	4b27      	ldr	r3, [pc, #156]	; (800c1f8 <FMC_SDRAM_Init+0xb4>)
 800c15c:	4013      	ands	r3, r2
 800c15e:	683a      	ldr	r2, [r7, #0]
 800c160:	6851      	ldr	r1, [r2, #4]
 800c162:	683a      	ldr	r2, [r7, #0]
 800c164:	6892      	ldr	r2, [r2, #8]
 800c166:	4311      	orrs	r1, r2
 800c168:	683a      	ldr	r2, [r7, #0]
 800c16a:	68d2      	ldr	r2, [r2, #12]
 800c16c:	4311      	orrs	r1, r2
 800c16e:	683a      	ldr	r2, [r7, #0]
 800c170:	6912      	ldr	r2, [r2, #16]
 800c172:	4311      	orrs	r1, r2
 800c174:	683a      	ldr	r2, [r7, #0]
 800c176:	6952      	ldr	r2, [r2, #20]
 800c178:	4311      	orrs	r1, r2
 800c17a:	683a      	ldr	r2, [r7, #0]
 800c17c:	6992      	ldr	r2, [r2, #24]
 800c17e:	4311      	orrs	r1, r2
 800c180:	683a      	ldr	r2, [r7, #0]
 800c182:	69d2      	ldr	r2, [r2, #28]
 800c184:	4311      	orrs	r1, r2
 800c186:	683a      	ldr	r2, [r7, #0]
 800c188:	6a12      	ldr	r2, [r2, #32]
 800c18a:	4311      	orrs	r1, r2
 800c18c:	683a      	ldr	r2, [r7, #0]
 800c18e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c190:	430a      	orrs	r2, r1
 800c192:	431a      	orrs	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	601a      	str	r2, [r3, #0]
 800c198:	e026      	b.n	800c1e8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	69d9      	ldr	r1, [r3, #28]
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	6a1b      	ldr	r3, [r3, #32]
 800c1aa:	4319      	orrs	r1, r3
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b0:	430b      	orrs	r3, r1
 800c1b2:	431a      	orrs	r2, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	685a      	ldr	r2, [r3, #4]
 800c1bc:	4b0e      	ldr	r3, [pc, #56]	; (800c1f8 <FMC_SDRAM_Init+0xb4>)
 800c1be:	4013      	ands	r3, r2
 800c1c0:	683a      	ldr	r2, [r7, #0]
 800c1c2:	6851      	ldr	r1, [r2, #4]
 800c1c4:	683a      	ldr	r2, [r7, #0]
 800c1c6:	6892      	ldr	r2, [r2, #8]
 800c1c8:	4311      	orrs	r1, r2
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	68d2      	ldr	r2, [r2, #12]
 800c1ce:	4311      	orrs	r1, r2
 800c1d0:	683a      	ldr	r2, [r7, #0]
 800c1d2:	6912      	ldr	r2, [r2, #16]
 800c1d4:	4311      	orrs	r1, r2
 800c1d6:	683a      	ldr	r2, [r7, #0]
 800c1d8:	6952      	ldr	r2, [r2, #20]
 800c1da:	4311      	orrs	r1, r2
 800c1dc:	683a      	ldr	r2, [r7, #0]
 800c1de:	6992      	ldr	r2, [r2, #24]
 800c1e0:	430a      	orrs	r2, r1
 800c1e2:	431a      	orrs	r2, r3
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c1e8:	2300      	movs	r3, #0
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	370c      	adds	r7, #12
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr
 800c1f6:	bf00      	nop
 800c1f8:	ffff8000 	.word	0xffff8000

0800c1fc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b085      	sub	sp, #20
 800c200:	af00      	add	r7, sp, #0
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d128      	bne.n	800c260 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	689b      	ldr	r3, [r3, #8]
 800c212:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	1e59      	subs	r1, r3, #1
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	3b01      	subs	r3, #1
 800c222:	011b      	lsls	r3, r3, #4
 800c224:	4319      	orrs	r1, r3
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	3b01      	subs	r3, #1
 800c22c:	021b      	lsls	r3, r3, #8
 800c22e:	4319      	orrs	r1, r3
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	3b01      	subs	r3, #1
 800c236:	031b      	lsls	r3, r3, #12
 800c238:	4319      	orrs	r1, r3
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	691b      	ldr	r3, [r3, #16]
 800c23e:	3b01      	subs	r3, #1
 800c240:	041b      	lsls	r3, r3, #16
 800c242:	4319      	orrs	r1, r3
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	695b      	ldr	r3, [r3, #20]
 800c248:	3b01      	subs	r3, #1
 800c24a:	051b      	lsls	r3, r3, #20
 800c24c:	4319      	orrs	r1, r3
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	699b      	ldr	r3, [r3, #24]
 800c252:	3b01      	subs	r3, #1
 800c254:	061b      	lsls	r3, r3, #24
 800c256:	430b      	orrs	r3, r1
 800c258:	431a      	orrs	r2, r3
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	609a      	str	r2, [r3, #8]
 800c25e:	e02d      	b.n	800c2bc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	689a      	ldr	r2, [r3, #8]
 800c264:	4b19      	ldr	r3, [pc, #100]	; (800c2cc <FMC_SDRAM_Timing_Init+0xd0>)
 800c266:	4013      	ands	r3, r2
 800c268:	68ba      	ldr	r2, [r7, #8]
 800c26a:	68d2      	ldr	r2, [r2, #12]
 800c26c:	3a01      	subs	r2, #1
 800c26e:	0311      	lsls	r1, r2, #12
 800c270:	68ba      	ldr	r2, [r7, #8]
 800c272:	6952      	ldr	r2, [r2, #20]
 800c274:	3a01      	subs	r2, #1
 800c276:	0512      	lsls	r2, r2, #20
 800c278:	430a      	orrs	r2, r1
 800c27a:	431a      	orrs	r2, r3
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	68db      	ldr	r3, [r3, #12]
 800c284:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	1e59      	subs	r1, r3, #1
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	3b01      	subs	r3, #1
 800c294:	011b      	lsls	r3, r3, #4
 800c296:	4319      	orrs	r1, r3
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	3b01      	subs	r3, #1
 800c29e:	021b      	lsls	r3, r3, #8
 800c2a0:	4319      	orrs	r1, r3
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	691b      	ldr	r3, [r3, #16]
 800c2a6:	3b01      	subs	r3, #1
 800c2a8:	041b      	lsls	r3, r3, #16
 800c2aa:	4319      	orrs	r1, r3
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	699b      	ldr	r3, [r3, #24]
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	061b      	lsls	r3, r3, #24
 800c2b4:	430b      	orrs	r3, r1
 800c2b6:	431a      	orrs	r2, r3
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800c2bc:	2300      	movs	r3, #0
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3714      	adds	r7, #20
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr
 800c2ca:	bf00      	nop
 800c2cc:	ff0f0fff 	.word	0xff0f0fff

0800c2d0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	691a      	ldr	r2, [r3, #16]
 800c2e0:	4b0c      	ldr	r3, [pc, #48]	; (800c314 <FMC_SDRAM_SendCommand+0x44>)
 800c2e2:	4013      	ands	r3, r2
 800c2e4:	68ba      	ldr	r2, [r7, #8]
 800c2e6:	6811      	ldr	r1, [r2, #0]
 800c2e8:	68ba      	ldr	r2, [r7, #8]
 800c2ea:	6852      	ldr	r2, [r2, #4]
 800c2ec:	4311      	orrs	r1, r2
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	6892      	ldr	r2, [r2, #8]
 800c2f2:	3a01      	subs	r2, #1
 800c2f4:	0152      	lsls	r2, r2, #5
 800c2f6:	4311      	orrs	r1, r2
 800c2f8:	68ba      	ldr	r2, [r7, #8]
 800c2fa:	68d2      	ldr	r2, [r2, #12]
 800c2fc:	0252      	lsls	r2, r2, #9
 800c2fe:	430a      	orrs	r2, r1
 800c300:	431a      	orrs	r2, r3
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800c306:	2300      	movs	r3, #0
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3714      	adds	r7, #20
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr
 800c314:	ffc00000 	.word	0xffc00000

0800c318 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c318:	b480      	push	{r7}
 800c31a:	b083      	sub	sp, #12
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	695a      	ldr	r2, [r3, #20]
 800c326:	4b07      	ldr	r3, [pc, #28]	; (800c344 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800c328:	4013      	ands	r3, r2
 800c32a:	683a      	ldr	r2, [r7, #0]
 800c32c:	0052      	lsls	r2, r2, #1
 800c32e:	431a      	orrs	r2, r3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c334:	2300      	movs	r3, #0
}
 800c336:	4618      	mov	r0, r3
 800c338:	370c      	adds	r7, #12
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop
 800c344:	ffffc001 	.word	0xffffc001

0800c348 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c348:	b480      	push	{r7}
 800c34a:	b085      	sub	sp, #20
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	68fa      	ldr	r2, [r7, #12]
 800c35c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	689a      	ldr	r2, [r3, #8]
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	689b      	ldr	r3, [r3, #8]
 800c36a:	683a      	ldr	r2, [r7, #0]
 800c36c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	683a      	ldr	r2, [r7, #0]
 800c372:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	1c5a      	adds	r2, r3, #1
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	601a      	str	r2, [r3, #0]
}
 800c384:	bf00      	nop
 800c386:	3714      	adds	r7, #20
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	6892      	ldr	r2, [r2, #8]
 800c3a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	6852      	ldr	r2, [r2, #4]
 800c3b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d103      	bne.n	800c3c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	689a      	ldr	r2, [r3, #8]
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	1e5a      	subs	r2, r3, #1
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3714      	adds	r7, #20
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b086      	sub	sp, #24
 800c3e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3ee:	4b4f      	ldr	r3, [pc, #316]	; (800c52c <xTaskIncrementTick+0x148>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	f040 808f 	bne.w	800c516 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c3f8:	4b4d      	ldr	r3, [pc, #308]	; (800c530 <xTaskIncrementTick+0x14c>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c400:	4a4b      	ldr	r2, [pc, #300]	; (800c530 <xTaskIncrementTick+0x14c>)
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d120      	bne.n	800c44e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c40c:	4b49      	ldr	r3, [pc, #292]	; (800c534 <xTaskIncrementTick+0x150>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00a      	beq.n	800c42c <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41a:	f383 8811 	msr	BASEPRI, r3
 800c41e:	f3bf 8f6f 	isb	sy
 800c422:	f3bf 8f4f 	dsb	sy
 800c426:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c428:	bf00      	nop
 800c42a:	e7fe      	b.n	800c42a <xTaskIncrementTick+0x46>
 800c42c:	4b41      	ldr	r3, [pc, #260]	; (800c534 <xTaskIncrementTick+0x150>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	60fb      	str	r3, [r7, #12]
 800c432:	4b41      	ldr	r3, [pc, #260]	; (800c538 <xTaskIncrementTick+0x154>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4a3f      	ldr	r2, [pc, #252]	; (800c534 <xTaskIncrementTick+0x150>)
 800c438:	6013      	str	r3, [r2, #0]
 800c43a:	4a3f      	ldr	r2, [pc, #252]	; (800c538 <xTaskIncrementTick+0x154>)
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	6013      	str	r3, [r2, #0]
 800c440:	4b3e      	ldr	r3, [pc, #248]	; (800c53c <xTaskIncrementTick+0x158>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	3301      	adds	r3, #1
 800c446:	4a3d      	ldr	r2, [pc, #244]	; (800c53c <xTaskIncrementTick+0x158>)
 800c448:	6013      	str	r3, [r2, #0]
 800c44a:	f000 f8e3 	bl	800c614 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c44e:	4b3c      	ldr	r3, [pc, #240]	; (800c540 <xTaskIncrementTick+0x15c>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	693a      	ldr	r2, [r7, #16]
 800c454:	429a      	cmp	r2, r3
 800c456:	d349      	bcc.n	800c4ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c458:	4b36      	ldr	r3, [pc, #216]	; (800c534 <xTaskIncrementTick+0x150>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d104      	bne.n	800c46c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c462:	4b37      	ldr	r3, [pc, #220]	; (800c540 <xTaskIncrementTick+0x15c>)
 800c464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c468:	601a      	str	r2, [r3, #0]
					break;
 800c46a:	e03f      	b.n	800c4ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c46c:	4b31      	ldr	r3, [pc, #196]	; (800c534 <xTaskIncrementTick+0x150>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68db      	ldr	r3, [r3, #12]
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c47c:	693a      	ldr	r2, [r7, #16]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	429a      	cmp	r2, r3
 800c482:	d203      	bcs.n	800c48c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c484:	4a2e      	ldr	r2, [pc, #184]	; (800c540 <xTaskIncrementTick+0x15c>)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c48a:	e02f      	b.n	800c4ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	3304      	adds	r3, #4
 800c490:	4618      	mov	r0, r3
 800c492:	f7ff ff7d 	bl	800c390 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d004      	beq.n	800c4a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	3318      	adds	r3, #24
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7ff ff74 	bl	800c390 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ac:	4b25      	ldr	r3, [pc, #148]	; (800c544 <xTaskIncrementTick+0x160>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d903      	bls.n	800c4bc <xTaskIncrementTick+0xd8>
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b8:	4a22      	ldr	r2, [pc, #136]	; (800c544 <xTaskIncrementTick+0x160>)
 800c4ba:	6013      	str	r3, [r2, #0]
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	4413      	add	r3, r2
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	4a1f      	ldr	r2, [pc, #124]	; (800c548 <xTaskIncrementTick+0x164>)
 800c4ca:	441a      	add	r2, r3
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	3304      	adds	r3, #4
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	4610      	mov	r0, r2
 800c4d4:	f7ff ff38 	bl	800c348 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4dc:	4b1b      	ldr	r3, [pc, #108]	; (800c54c <xTaskIncrementTick+0x168>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d3b8      	bcc.n	800c458 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4ea:	e7b5      	b.n	800c458 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c4ec:	4b17      	ldr	r3, [pc, #92]	; (800c54c <xTaskIncrementTick+0x168>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f2:	4915      	ldr	r1, [pc, #84]	; (800c548 <xTaskIncrementTick+0x164>)
 800c4f4:	4613      	mov	r3, r2
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	4413      	add	r3, r2
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	440b      	add	r3, r1
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2b01      	cmp	r3, #1
 800c502:	d901      	bls.n	800c508 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c504:	2301      	movs	r3, #1
 800c506:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c508:	4b11      	ldr	r3, [pc, #68]	; (800c550 <xTaskIncrementTick+0x16c>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d007      	beq.n	800c520 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c510:	2301      	movs	r3, #1
 800c512:	617b      	str	r3, [r7, #20]
 800c514:	e004      	b.n	800c520 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c516:	4b0f      	ldr	r3, [pc, #60]	; (800c554 <xTaskIncrementTick+0x170>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	3301      	adds	r3, #1
 800c51c:	4a0d      	ldr	r2, [pc, #52]	; (800c554 <xTaskIncrementTick+0x170>)
 800c51e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c520:	697b      	ldr	r3, [r7, #20]
}
 800c522:	4618      	mov	r0, r3
 800c524:	3718      	adds	r7, #24
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	24001504 	.word	0x24001504
 800c530:	240014e8 	.word	0x240014e8
 800c534:	240014e0 	.word	0x240014e0
 800c538:	240014e4 	.word	0x240014e4
 800c53c:	240014fc 	.word	0x240014fc
 800c540:	24001500 	.word	0x24001500
 800c544:	240014ec 	.word	0x240014ec
 800c548:	24001080 	.word	0x24001080
 800c54c:	2400107c 	.word	0x2400107c
 800c550:	240014f8 	.word	0x240014f8
 800c554:	240014f4 	.word	0x240014f4

0800c558 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c558:	b480      	push	{r7}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c55e:	4b28      	ldr	r3, [pc, #160]	; (800c600 <vTaskSwitchContext+0xa8>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d003      	beq.n	800c56e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c566:	4b27      	ldr	r3, [pc, #156]	; (800c604 <vTaskSwitchContext+0xac>)
 800c568:	2201      	movs	r2, #1
 800c56a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c56c:	e041      	b.n	800c5f2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c56e:	4b25      	ldr	r3, [pc, #148]	; (800c604 <vTaskSwitchContext+0xac>)
 800c570:	2200      	movs	r2, #0
 800c572:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c574:	4b24      	ldr	r3, [pc, #144]	; (800c608 <vTaskSwitchContext+0xb0>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	60fb      	str	r3, [r7, #12]
 800c57a:	e010      	b.n	800c59e <vTaskSwitchContext+0x46>
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d10a      	bne.n	800c598 <vTaskSwitchContext+0x40>
	__asm volatile
 800c582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c586:	f383 8811 	msr	BASEPRI, r3
 800c58a:	f3bf 8f6f 	isb	sy
 800c58e:	f3bf 8f4f 	dsb	sy
 800c592:	607b      	str	r3, [r7, #4]
}
 800c594:	bf00      	nop
 800c596:	e7fe      	b.n	800c596 <vTaskSwitchContext+0x3e>
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	3b01      	subs	r3, #1
 800c59c:	60fb      	str	r3, [r7, #12]
 800c59e:	491b      	ldr	r1, [pc, #108]	; (800c60c <vTaskSwitchContext+0xb4>)
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	4413      	add	r3, r2
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	440b      	add	r3, r1
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d0e4      	beq.n	800c57c <vTaskSwitchContext+0x24>
 800c5b2:	68fa      	ldr	r2, [r7, #12]
 800c5b4:	4613      	mov	r3, r2
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	4413      	add	r3, r2
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	4a13      	ldr	r2, [pc, #76]	; (800c60c <vTaskSwitchContext+0xb4>)
 800c5be:	4413      	add	r3, r2
 800c5c0:	60bb      	str	r3, [r7, #8]
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	685a      	ldr	r2, [r3, #4]
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	605a      	str	r2, [r3, #4]
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	685a      	ldr	r2, [r3, #4]
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	3308      	adds	r3, #8
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d104      	bne.n	800c5e2 <vTaskSwitchContext+0x8a>
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	685a      	ldr	r2, [r3, #4]
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	605a      	str	r2, [r3, #4]
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	4a09      	ldr	r2, [pc, #36]	; (800c610 <vTaskSwitchContext+0xb8>)
 800c5ea:	6013      	str	r3, [r2, #0]
 800c5ec:	4a06      	ldr	r2, [pc, #24]	; (800c608 <vTaskSwitchContext+0xb0>)
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	6013      	str	r3, [r2, #0]
}
 800c5f2:	bf00      	nop
 800c5f4:	3714      	adds	r7, #20
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr
 800c5fe:	bf00      	nop
 800c600:	24001504 	.word	0x24001504
 800c604:	240014f8 	.word	0x240014f8
 800c608:	240014ec 	.word	0x240014ec
 800c60c:	24001080 	.word	0x24001080
 800c610:	2400107c 	.word	0x2400107c

0800c614 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c614:	b480      	push	{r7}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c61a:	4b0c      	ldr	r3, [pc, #48]	; (800c64c <prvResetNextTaskUnblockTime+0x38>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d104      	bne.n	800c62e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c624:	4b0a      	ldr	r3, [pc, #40]	; (800c650 <prvResetNextTaskUnblockTime+0x3c>)
 800c626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c62a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c62c:	e008      	b.n	800c640 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c62e:	4b07      	ldr	r3, [pc, #28]	; (800c64c <prvResetNextTaskUnblockTime+0x38>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	68db      	ldr	r3, [r3, #12]
 800c636:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	4a04      	ldr	r2, [pc, #16]	; (800c650 <prvResetNextTaskUnblockTime+0x3c>)
 800c63e:	6013      	str	r3, [r2, #0]
}
 800c640:	bf00      	nop
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr
 800c64c:	240014e0 	.word	0x240014e0
 800c650:	24001500 	.word	0x24001500

0800c654 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c65a:	4b0b      	ldr	r3, [pc, #44]	; (800c688 <xTaskGetSchedulerState+0x34>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d102      	bne.n	800c668 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c662:	2301      	movs	r3, #1
 800c664:	607b      	str	r3, [r7, #4]
 800c666:	e008      	b.n	800c67a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c668:	4b08      	ldr	r3, [pc, #32]	; (800c68c <xTaskGetSchedulerState+0x38>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d102      	bne.n	800c676 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c670:	2302      	movs	r3, #2
 800c672:	607b      	str	r3, [r7, #4]
 800c674:	e001      	b.n	800c67a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c676:	2300      	movs	r3, #0
 800c678:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c67a:	687b      	ldr	r3, [r7, #4]
	}
 800c67c:	4618      	mov	r0, r3
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr
 800c688:	240014f0 	.word	0x240014f0
 800c68c:	24001504 	.word	0x24001504

0800c690 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c690:	4b07      	ldr	r3, [pc, #28]	; (800c6b0 <pxCurrentTCBConst2>)
 800c692:	6819      	ldr	r1, [r3, #0]
 800c694:	6808      	ldr	r0, [r1, #0]
 800c696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c69a:	f380 8809 	msr	PSP, r0
 800c69e:	f3bf 8f6f 	isb	sy
 800c6a2:	f04f 0000 	mov.w	r0, #0
 800c6a6:	f380 8811 	msr	BASEPRI, r0
 800c6aa:	4770      	bx	lr
 800c6ac:	f3af 8000 	nop.w

0800c6b0 <pxCurrentTCBConst2>:
 800c6b0:	2400107c 	.word	0x2400107c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c6b4:	bf00      	nop
 800c6b6:	bf00      	nop
	...

0800c6c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c6c0:	f3ef 8009 	mrs	r0, PSP
 800c6c4:	f3bf 8f6f 	isb	sy
 800c6c8:	4b15      	ldr	r3, [pc, #84]	; (800c720 <pxCurrentTCBConst>)
 800c6ca:	681a      	ldr	r2, [r3, #0]
 800c6cc:	f01e 0f10 	tst.w	lr, #16
 800c6d0:	bf08      	it	eq
 800c6d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c6d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6da:	6010      	str	r0, [r2, #0]
 800c6dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c6e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c6e4:	f380 8811 	msr	BASEPRI, r0
 800c6e8:	f3bf 8f4f 	dsb	sy
 800c6ec:	f3bf 8f6f 	isb	sy
 800c6f0:	f7ff ff32 	bl	800c558 <vTaskSwitchContext>
 800c6f4:	f04f 0000 	mov.w	r0, #0
 800c6f8:	f380 8811 	msr	BASEPRI, r0
 800c6fc:	bc09      	pop	{r0, r3}
 800c6fe:	6819      	ldr	r1, [r3, #0]
 800c700:	6808      	ldr	r0, [r1, #0]
 800c702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c706:	f01e 0f10 	tst.w	lr, #16
 800c70a:	bf08      	it	eq
 800c70c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c710:	f380 8809 	msr	PSP, r0
 800c714:	f3bf 8f6f 	isb	sy
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop
 800c71c:	f3af 8000 	nop.w

0800c720 <pxCurrentTCBConst>:
 800c720:	2400107c 	.word	0x2400107c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c724:	bf00      	nop
 800c726:	bf00      	nop

0800c728 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
	__asm volatile
 800c72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c732:	f383 8811 	msr	BASEPRI, r3
 800c736:	f3bf 8f6f 	isb	sy
 800c73a:	f3bf 8f4f 	dsb	sy
 800c73e:	607b      	str	r3, [r7, #4]
}
 800c740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c742:	f7ff fe4f 	bl	800c3e4 <xTaskIncrementTick>
 800c746:	4603      	mov	r3, r0
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d003      	beq.n	800c754 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c74c:	4b06      	ldr	r3, [pc, #24]	; (800c768 <xPortSysTickHandler+0x40>)
 800c74e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c752:	601a      	str	r2, [r3, #0]
 800c754:	2300      	movs	r3, #0
 800c756:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c75e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c760:	bf00      	nop
 800c762:	3708      	adds	r7, #8
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}
 800c768:	e000ed04 	.word	0xe000ed04

0800c76c <pianoMain>:
long Time_playinf = 0;

static TS_State_t TS_State;

void pianoMain()
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	af00      	add	r7, sp, #0
  BSP_LCD_GetXSize(0, &x_size);
 800c770:	490e      	ldr	r1, [pc, #56]	; (800c7ac <pianoMain+0x40>)
 800c772:	2000      	movs	r0, #0
 800c774:	f7f5 febe 	bl	80024f4 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 800c778:	490d      	ldr	r1, [pc, #52]	; (800c7b0 <pianoMain+0x44>)
 800c77a:	2000      	movs	r0, #0
 800c77c:	f7f5 fed8 	bl	8002530 <BSP_LCD_GetYSize>

  MX_TIM2_Init();
 800c780:	f000 fbe2 	bl	800cf48 <MX_TIM2_Init>

  Draw_Menu();
 800c784:	f000 f818 	bl	800c7b8 <Draw_Menu>

  // define time for random
  Time_playinf = HAL_GetTick();
 800c788:	f7f7 f814 	bl	80037b4 <HAL_GetTick>
 800c78c:	4603      	mov	r3, r0
 800c78e:	461a      	mov	r2, r3
 800c790:	4b08      	ldr	r3, [pc, #32]	; (800c7b4 <pianoMain+0x48>)
 800c792:	601a      	str	r2, [r3, #0]
  while (1)
  {
      if ((HAL_GetTick() - Time_playinf) > 1000)
 800c794:	f7f7 f80e 	bl	80037b4 <HAL_GetTick>
 800c798:	4603      	mov	r3, r0
 800c79a:	4a06      	ldr	r2, [pc, #24]	; (800c7b4 <pianoMain+0x48>)
 800c79c:	6812      	ldr	r2, [r2, #0]
 800c79e:	1a9b      	subs	r3, r3, r2
 800c7a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c7a4:	d9f6      	bls.n	800c794 <pianoMain+0x28>
      {
        GetPosition();
 800c7a6:	f000 f907 	bl	800c9b8 <GetPosition>
      if ((HAL_GetTick() - Time_playinf) > 1000)
 800c7aa:	e7f3      	b.n	800c794 <pianoMain+0x28>
 800c7ac:	24001560 	.word	0x24001560
 800c7b0:	24001564 	.word	0x24001564
 800c7b4:	2400156c 	.word	0x2400156c

0800c7b8 <Draw_Menu>:
  }
}


static void Draw_Menu(void)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af02      	add	r7, sp, #8
  /* Set background Layer */
  UTIL_LCD_SetLayer(0);
 800c7be:	2000      	movs	r0, #0
 800c7c0:	f7f4 f83a 	bl	8000838 <UTIL_LCD_SetLayer>

  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 800c7c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7c8:	f7f4 f8c0 	bl	800094c <UTIL_LCD_Clear>

  // border around screen
  UTIL_LCD_DrawRect(0, 0, x_size - 2, 2, UTIL_LCD_COLOR_BLACK);
 800c7cc:	4b4b      	ldr	r3, [pc, #300]	; (800c8fc <Draw_Menu+0x144>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	1e9a      	subs	r2, r3, #2
 800c7d2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c7d6:	9300      	str	r3, [sp, #0]
 800c7d8:	2302      	movs	r3, #2
 800c7da:	2100      	movs	r1, #0
 800c7dc:	2000      	movs	r0, #0
 800c7de:	f7f4 f8cb 	bl	8000978 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(0, 0, 2, y_size, UTIL_LCD_COLOR_BLACK);
 800c7e2:	4b47      	ldr	r3, [pc, #284]	; (800c900 <Draw_Menu+0x148>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800c7ea:	9200      	str	r2, [sp, #0]
 800c7ec:	2202      	movs	r2, #2
 800c7ee:	2100      	movs	r1, #0
 800c7f0:	2000      	movs	r0, #0
 800c7f2:	f7f4 f8c1 	bl	8000978 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(x_size - 2, 1, 2, y_size, UTIL_LCD_COLOR_BLACK);
 800c7f6:	4b41      	ldr	r3, [pc, #260]	; (800c8fc <Draw_Menu+0x144>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	1e98      	subs	r0, r3, #2
 800c7fc:	4b40      	ldr	r3, [pc, #256]	; (800c900 <Draw_Menu+0x148>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800c804:	9200      	str	r2, [sp, #0]
 800c806:	2202      	movs	r2, #2
 800c808:	2101      	movs	r1, #1
 800c80a:	f7f4 f8b5 	bl	8000978 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(1, y_size - 2, x_size, 2, UTIL_LCD_COLOR_BLACK);
 800c80e:	4b3c      	ldr	r3, [pc, #240]	; (800c900 <Draw_Menu+0x148>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	1e99      	subs	r1, r3, #2
 800c814:	4b39      	ldr	r3, [pc, #228]	; (800c8fc <Draw_Menu+0x144>)
 800c816:	681a      	ldr	r2, [r3, #0]
 800c818:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c81c:	9300      	str	r3, [sp, #0]
 800c81e:	2302      	movs	r3, #2
 800c820:	2001      	movs	r0, #1
 800c822:	f7f4 f8a9 	bl	8000978 <UTIL_LCD_DrawRect>
 //DRAW KEYS
  x_move = 0;
 800c826:	4b37      	ldr	r3, [pc, #220]	; (800c904 <Draw_Menu+0x14c>)
 800c828:	2200      	movs	r2, #0
 800c82a:	801a      	strh	r2, [r3, #0]
  y_move = 0;
 800c82c:	4b36      	ldr	r3, [pc, #216]	; (800c908 <Draw_Menu+0x150>)
 800c82e:	2200      	movs	r2, #0
 800c830:	801a      	strh	r2, [r3, #0]
  //while (y_move < 11)
  //{
    while (x_move < 11)
 800c832:	e02b      	b.n	800c88c <Draw_Menu+0xd4>
    {
      // draws a squear
      UTIL_LCD_FillRect(20 + (x_move * 40), 43 ,40, 2+200, UTIL_LCD_COLOR_WHITE);
 800c834:	4b33      	ldr	r3, [pc, #204]	; (800c904 <Draw_Menu+0x14c>)
 800c836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c83a:	461a      	mov	r2, r3
 800c83c:	4613      	mov	r3, r2
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	4413      	add	r3, r2
 800c842:	00db      	lsls	r3, r3, #3
 800c844:	3314      	adds	r3, #20
 800c846:	4618      	mov	r0, r3
 800c848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c84c:	9300      	str	r3, [sp, #0]
 800c84e:	23ca      	movs	r3, #202	; 0xca
 800c850:	2228      	movs	r2, #40	; 0x28
 800c852:	212b      	movs	r1, #43	; 0x2b
 800c854:	f7f4 f8ba 	bl	80009cc <UTIL_LCD_FillRect>
      UTIL_LCD_DrawRect(20 + (x_move * 40), 43 ,40, 2+200, UTIL_LCD_COLOR_LIGHTGRAY);
 800c858:	4b2a      	ldr	r3, [pc, #168]	; (800c904 <Draw_Menu+0x14c>)
 800c85a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c85e:	461a      	mov	r2, r3
 800c860:	4613      	mov	r3, r2
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	4413      	add	r3, r2
 800c866:	00db      	lsls	r3, r3, #3
 800c868:	3314      	adds	r3, #20
 800c86a:	4618      	mov	r0, r3
 800c86c:	4b27      	ldr	r3, [pc, #156]	; (800c90c <Draw_Menu+0x154>)
 800c86e:	9300      	str	r3, [sp, #0]
 800c870:	23ca      	movs	r3, #202	; 0xca
 800c872:	2228      	movs	r2, #40	; 0x28
 800c874:	212b      	movs	r1, #43	; 0x2b
 800c876:	f7f4 f87f 	bl	8000978 <UTIL_LCD_DrawRect>
      x_move++;
 800c87a:	4b22      	ldr	r3, [pc, #136]	; (800c904 <Draw_Menu+0x14c>)
 800c87c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c880:	b29b      	uxth	r3, r3
 800c882:	3301      	adds	r3, #1
 800c884:	b29b      	uxth	r3, r3
 800c886:	b21a      	sxth	r2, r3
 800c888:	4b1e      	ldr	r3, [pc, #120]	; (800c904 <Draw_Menu+0x14c>)
 800c88a:	801a      	strh	r2, [r3, #0]
    while (x_move < 11)
 800c88c:	4b1d      	ldr	r3, [pc, #116]	; (800c904 <Draw_Menu+0x14c>)
 800c88e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c892:	2b0a      	cmp	r3, #10
 800c894:	ddce      	ble.n	800c834 <Draw_Menu+0x7c>
    }
    x_move = 0;
 800c896:	4b1b      	ldr	r3, [pc, #108]	; (800c904 <Draw_Menu+0x14c>)
 800c898:	2200      	movs	r2, #0
 800c89a:	801a      	strh	r2, [r3, #0]
    while (x_move < 10)
 800c89c:	e024      	b.n	800c8e8 <Draw_Menu+0x130>
        {
    	if(x_move != 3 && x_move!= 6){
 800c89e:	4b19      	ldr	r3, [pc, #100]	; (800c904 <Draw_Menu+0x14c>)
 800c8a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8a4:	2b03      	cmp	r3, #3
 800c8a6:	d016      	beq.n	800c8d6 <Draw_Menu+0x11e>
 800c8a8:	4b16      	ldr	r3, [pc, #88]	; (800c904 <Draw_Menu+0x14c>)
 800c8aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8ae:	2b06      	cmp	r3, #6
 800c8b0:	d011      	beq.n	800c8d6 <Draw_Menu+0x11e>
    		UTIL_LCD_FillRect(50 + (x_move * 40), 43 ,25, 2+100, UTIL_LCD_COLOR_BLACK);
 800c8b2:	4b14      	ldr	r3, [pc, #80]	; (800c904 <Draw_Menu+0x14c>)
 800c8b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	009b      	lsls	r3, r3, #2
 800c8be:	4413      	add	r3, r2
 800c8c0:	00db      	lsls	r3, r3, #3
 800c8c2:	3332      	adds	r3, #50	; 0x32
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	2366      	movs	r3, #102	; 0x66
 800c8ce:	2219      	movs	r2, #25
 800c8d0:	212b      	movs	r1, #43	; 0x2b
 800c8d2:	f7f4 f87b 	bl	80009cc <UTIL_LCD_FillRect>
    	}
          x_move++;
 800c8d6:	4b0b      	ldr	r3, [pc, #44]	; (800c904 <Draw_Menu+0x14c>)
 800c8d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	3301      	adds	r3, #1
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	b21a      	sxth	r2, r3
 800c8e4:	4b07      	ldr	r3, [pc, #28]	; (800c904 <Draw_Menu+0x14c>)
 800c8e6:	801a      	strh	r2, [r3, #0]
    while (x_move < 10)
 800c8e8:	4b06      	ldr	r3, [pc, #24]	; (800c904 <Draw_Menu+0x14c>)
 800c8ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8ee:	2b09      	cmp	r3, #9
 800c8f0:	ddd5      	ble.n	800c89e <Draw_Menu+0xe6>
        }

}
 800c8f2:	bf00      	nop
 800c8f4:	bf00      	nop
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	24001560 	.word	0x24001560
 800c900:	24001564 	.word	0x24001564
 800c904:	24001568 	.word	0x24001568
 800c908:	2400156a 	.word	0x2400156a
 800c90c:	ffd3d3d3 	.word	0xffd3d3d3

0800c910 <reDraw>:

static void reDraw()
{
 800c910:	b580      	push	{r7, lr}
 800c912:	af00      	add	r7, sp, #0
	clean(-1,-1);
 800c914:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c91c:	f000 f904 	bl	800cb28 <clean>
}
 800c920:	bf00      	nop
 800c922:	bd80      	pop	{r7, pc}

0800c924 <colorWhite>:
static void colorWhite(int index)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af02      	add	r7, sp, #8
 800c92a:	6078      	str	r0, [r7, #4]

	UTIL_LCD_FillRect(20 + (index * 40), 43 ,40, 2+200, UTIL_LCD_COLOR_LIGHTGRAY);
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	4613      	mov	r3, r2
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	4413      	add	r3, r2
 800c934:	00db      	lsls	r3, r3, #3
 800c936:	3314      	adds	r3, #20
 800c938:	4618      	mov	r0, r3
 800c93a:	4b1e      	ldr	r3, [pc, #120]	; (800c9b4 <colorWhite+0x90>)
 800c93c:	9300      	str	r3, [sp, #0]
 800c93e:	23ca      	movs	r3, #202	; 0xca
 800c940:	2228      	movs	r2, #40	; 0x28
 800c942:	212b      	movs	r1, #43	; 0x2b
 800c944:	f7f4 f842 	bl	80009cc <UTIL_LCD_FillRect>
	if((index) != 3 && (index)!= 6 && (index)<10){
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2b03      	cmp	r3, #3
 800c94c:	d014      	beq.n	800c978 <colorWhite+0x54>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2b06      	cmp	r3, #6
 800c952:	d011      	beq.n	800c978 <colorWhite+0x54>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2b09      	cmp	r3, #9
 800c958:	dc0e      	bgt.n	800c978 <colorWhite+0x54>
		UTIL_LCD_FillRect(50 + ((index) * 40), 43 ,25, 2+100, UTIL_LCD_COLOR_BLACK);
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	4613      	mov	r3, r2
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	4413      	add	r3, r2
 800c962:	00db      	lsls	r3, r3, #3
 800c964:	3332      	adds	r3, #50	; 0x32
 800c966:	4618      	mov	r0, r3
 800c968:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c96c:	9300      	str	r3, [sp, #0]
 800c96e:	2366      	movs	r3, #102	; 0x66
 800c970:	2219      	movs	r2, #25
 800c972:	212b      	movs	r1, #43	; 0x2b
 800c974:	f7f4 f82a 	bl	80009cc <UTIL_LCD_FillRect>
	}
	if((index-1) != 3 && (index-1) != 6 && (index-1)>=0){
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2b04      	cmp	r3, #4
 800c97c:	d015      	beq.n	800c9aa <colorWhite+0x86>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2b07      	cmp	r3, #7
 800c982:	d012      	beq.n	800c9aa <colorWhite+0x86>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2b00      	cmp	r3, #0
 800c988:	dd0f      	ble.n	800c9aa <colorWhite+0x86>
		UTIL_LCD_FillRect(50 + ((index-1)* 40), 43 ,25, 2+100, UTIL_LCD_COLOR_BLACK);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	1e5a      	subs	r2, r3, #1
 800c98e:	4613      	mov	r3, r2
 800c990:	009b      	lsls	r3, r3, #2
 800c992:	4413      	add	r3, r2
 800c994:	00db      	lsls	r3, r3, #3
 800c996:	3332      	adds	r3, #50	; 0x32
 800c998:	4618      	mov	r0, r3
 800c99a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c99e:	9300      	str	r3, [sp, #0]
 800c9a0:	2366      	movs	r3, #102	; 0x66
 800c9a2:	2219      	movs	r2, #25
 800c9a4:	212b      	movs	r1, #43	; 0x2b
 800c9a6:	f7f4 f811 	bl	80009cc <UTIL_LCD_FillRect>
	}

}
 800c9aa:	bf00      	nop
 800c9ac:	3708      	adds	r7, #8
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	ffd3d3d3 	.word	0xffd3d3d3

0800c9b8 <GetPosition>:
static void GetPosition()
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	af00      	add	r7, sp, #0

  /* Get Touch screen position */
  BSP_TS_GetState(0, &TS_State);
 800c9bc:	4950      	ldr	r1, [pc, #320]	; (800cb00 <GetPosition+0x148>)
 800c9be:	2000      	movs	r0, #0
 800c9c0:	f7f6 fcfa 	bl	80033b8 <BSP_TS_GetState>

  /* Read the coordinate */

  x = TS_State.TouchX;
 800c9c4:	4b4e      	ldr	r3, [pc, #312]	; (800cb00 <GetPosition+0x148>)
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	b29a      	uxth	r2, r3
 800c9ca:	4b4e      	ldr	r3, [pc, #312]	; (800cb04 <GetPosition+0x14c>)
 800c9cc:	801a      	strh	r2, [r3, #0]
  y = TS_State.TouchY;
 800c9ce:	4b4c      	ldr	r3, [pc, #304]	; (800cb00 <GetPosition+0x148>)
 800c9d0:	689b      	ldr	r3, [r3, #8]
 800c9d2:	b29a      	uxth	r2, r3
 800c9d4:	4b4c      	ldr	r3, [pc, #304]	; (800cb08 <GetPosition+0x150>)
 800c9d6:	801a      	strh	r2, [r3, #0]


  if (!TS_State.TouchDetected)
 800c9d8:	4b49      	ldr	r3, [pc, #292]	; (800cb00 <GetPosition+0x148>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d115      	bne.n	800ca0c <GetPosition+0x54>
  {
	if(isPlaing == 1){
 800c9e0:	4b4a      	ldr	r3, [pc, #296]	; (800cb0c <GetPosition+0x154>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d10c      	bne.n	800ca02 <GetPosition+0x4a>
		reDraw();
 800c9e8:	f7ff ff92 	bl	800c910 <reDraw>
		isPlaing = 0;
 800c9ec:	4b47      	ldr	r3, [pc, #284]	; (800cb0c <GetPosition+0x154>)
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	601a      	str	r2, [r3, #0]
		colorPlay=-1;
 800c9f2:	4b47      	ldr	r3, [pc, #284]	; (800cb10 <GetPosition+0x158>)
 800c9f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9f8:	601a      	str	r2, [r3, #0]
		noteNum=-1;
 800c9fa:	4b46      	ldr	r3, [pc, #280]	; (800cb14 <GetPosition+0x15c>)
 800c9fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca00:	601a      	str	r2, [r3, #0]
	}
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4); // stop generation of pwm
 800ca02:	210c      	movs	r1, #12
 800ca04:	4844      	ldr	r0, [pc, #272]	; (800cb18 <GetPosition+0x160>)
 800ca06:	f7fd fc6b 	bl	800a2e0 <HAL_TIM_PWM_Stop>
    return;
 800ca0a:	e077      	b.n	800cafc <GetPosition+0x144>
  }

  Px = x; Py = y;
 800ca0c:	4b3d      	ldr	r3, [pc, #244]	; (800cb04 <GetPosition+0x14c>)
 800ca0e:	881a      	ldrh	r2, [r3, #0]
 800ca10:	4b42      	ldr	r3, [pc, #264]	; (800cb1c <GetPosition+0x164>)
 800ca12:	801a      	strh	r2, [r3, #0]
 800ca14:	4b3c      	ldr	r3, [pc, #240]	; (800cb08 <GetPosition+0x150>)
 800ca16:	881a      	ldrh	r2, [r3, #0]
 800ca18:	4b41      	ldr	r3, [pc, #260]	; (800cb20 <GetPosition+0x168>)
 800ca1a:	801a      	strh	r2, [r3, #0]
  if ((x > 20) && (x < 460) && (y > 43) && (y < 263))
 800ca1c:	4b39      	ldr	r3, [pc, #228]	; (800cb04 <GetPosition+0x14c>)
 800ca1e:	881b      	ldrh	r3, [r3, #0]
 800ca20:	2b14      	cmp	r3, #20
 800ca22:	d96b      	bls.n	800cafc <GetPosition+0x144>
 800ca24:	4b37      	ldr	r3, [pc, #220]	; (800cb04 <GetPosition+0x14c>)
 800ca26:	881b      	ldrh	r3, [r3, #0]
 800ca28:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 800ca2c:	d266      	bcs.n	800cafc <GetPosition+0x144>
 800ca2e:	4b36      	ldr	r3, [pc, #216]	; (800cb08 <GetPosition+0x150>)
 800ca30:	881b      	ldrh	r3, [r3, #0]
 800ca32:	2b2b      	cmp	r3, #43	; 0x2b
 800ca34:	d962      	bls.n	800cafc <GetPosition+0x144>
 800ca36:	4b34      	ldr	r3, [pc, #208]	; (800cb08 <GetPosition+0x150>)
 800ca38:	881b      	ldrh	r3, [r3, #0]
 800ca3a:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800ca3e:	d85d      	bhi.n	800cafc <GetPosition+0x144>
  {
	isPlaing = 1;
 800ca40:	4b32      	ldr	r3, [pc, #200]	; (800cb0c <GetPosition+0x154>)
 800ca42:	2201      	movs	r2, #1
 800ca44:	601a      	str	r2, [r3, #0]
	if(y<140){
 800ca46:	4b30      	ldr	r3, [pc, #192]	; (800cb08 <GetPosition+0x150>)
 800ca48:	881b      	ldrh	r3, [r3, #0]
 800ca4a:	2b8b      	cmp	r3, #139	; 0x8b
 800ca4c:	d830      	bhi.n	800cab0 <GetPosition+0xf8>
		x=x-50;
 800ca4e:	4b2d      	ldr	r3, [pc, #180]	; (800cb04 <GetPosition+0x14c>)
 800ca50:	881b      	ldrh	r3, [r3, #0]
 800ca52:	3b32      	subs	r3, #50	; 0x32
 800ca54:	b29a      	uxth	r2, r3
 800ca56:	4b2b      	ldr	r3, [pc, #172]	; (800cb04 <GetPosition+0x14c>)
 800ca58:	801a      	strh	r2, [r3, #0]
		x=x/40;
 800ca5a:	4b2a      	ldr	r3, [pc, #168]	; (800cb04 <GetPosition+0x14c>)
 800ca5c:	881b      	ldrh	r3, [r3, #0]
 800ca5e:	4a31      	ldr	r2, [pc, #196]	; (800cb24 <GetPosition+0x16c>)
 800ca60:	fba2 2303 	umull	r2, r3, r2, r3
 800ca64:	095b      	lsrs	r3, r3, #5
 800ca66:	b29a      	uxth	r2, r3
 800ca68:	4b26      	ldr	r3, [pc, #152]	; (800cb04 <GetPosition+0x14c>)
 800ca6a:	801a      	strh	r2, [r3, #0]
		clean(x,0);
 800ca6c:	4b25      	ldr	r3, [pc, #148]	; (800cb04 <GetPosition+0x14c>)
 800ca6e:	881b      	ldrh	r3, [r3, #0]
 800ca70:	b25b      	sxtb	r3, r3
 800ca72:	2100      	movs	r1, #0
 800ca74:	4618      	mov	r0, r3
 800ca76:	f000 f857 	bl	800cb28 <clean>
		PlayBlack(x);
 800ca7a:	4b22      	ldr	r3, [pc, #136]	; (800cb04 <GetPosition+0x14c>)
 800ca7c:	881b      	ldrh	r3, [r3, #0]
 800ca7e:	b25b      	sxtb	r3, r3
 800ca80:	4618      	mov	r0, r3
 800ca82:	f000 f8f5 	bl	800cc70 <PlayBlack>
		if(x!=3&&x!=6 && x>=0 && x<10){
 800ca86:	4b1f      	ldr	r3, [pc, #124]	; (800cb04 <GetPosition+0x14c>)
 800ca88:	881b      	ldrh	r3, [r3, #0]
 800ca8a:	2b03      	cmp	r3, #3
 800ca8c:	d035      	beq.n	800cafa <GetPosition+0x142>
 800ca8e:	4b1d      	ldr	r3, [pc, #116]	; (800cb04 <GetPosition+0x14c>)
 800ca90:	881b      	ldrh	r3, [r3, #0]
 800ca92:	2b06      	cmp	r3, #6
 800ca94:	d031      	beq.n	800cafa <GetPosition+0x142>
 800ca96:	4b1b      	ldr	r3, [pc, #108]	; (800cb04 <GetPosition+0x14c>)
 800ca98:	881b      	ldrh	r3, [r3, #0]
 800ca9a:	2b09      	cmp	r3, #9
 800ca9c:	d82d      	bhi.n	800cafa <GetPosition+0x142>
			colorPlay = 0;
 800ca9e:	4b1c      	ldr	r3, [pc, #112]	; (800cb10 <GetPosition+0x158>)
 800caa0:	2200      	movs	r2, #0
 800caa2:	601a      	str	r2, [r3, #0]
			noteNum = x;
 800caa4:	4b17      	ldr	r3, [pc, #92]	; (800cb04 <GetPosition+0x14c>)
 800caa6:	881b      	ldrh	r3, [r3, #0]
 800caa8:	461a      	mov	r2, r3
 800caaa:	4b1a      	ldr	r3, [pc, #104]	; (800cb14 <GetPosition+0x15c>)
 800caac:	601a      	str	r2, [r3, #0]
		}
		return;
 800caae:	e024      	b.n	800cafa <GetPosition+0x142>
	}
	x=x-20;
 800cab0:	4b14      	ldr	r3, [pc, #80]	; (800cb04 <GetPosition+0x14c>)
 800cab2:	881b      	ldrh	r3, [r3, #0]
 800cab4:	3b14      	subs	r3, #20
 800cab6:	b29a      	uxth	r2, r3
 800cab8:	4b12      	ldr	r3, [pc, #72]	; (800cb04 <GetPosition+0x14c>)
 800caba:	801a      	strh	r2, [r3, #0]
	x=x/40;
 800cabc:	4b11      	ldr	r3, [pc, #68]	; (800cb04 <GetPosition+0x14c>)
 800cabe:	881b      	ldrh	r3, [r3, #0]
 800cac0:	4a18      	ldr	r2, [pc, #96]	; (800cb24 <GetPosition+0x16c>)
 800cac2:	fba2 2303 	umull	r2, r3, r2, r3
 800cac6:	095b      	lsrs	r3, r3, #5
 800cac8:	b29a      	uxth	r2, r3
 800caca:	4b0e      	ldr	r3, [pc, #56]	; (800cb04 <GetPosition+0x14c>)
 800cacc:	801a      	strh	r2, [r3, #0]
	clean(x,1);
 800cace:	4b0d      	ldr	r3, [pc, #52]	; (800cb04 <GetPosition+0x14c>)
 800cad0:	881b      	ldrh	r3, [r3, #0]
 800cad2:	b25b      	sxtb	r3, r3
 800cad4:	2101      	movs	r1, #1
 800cad6:	4618      	mov	r0, r3
 800cad8:	f000 f826 	bl	800cb28 <clean>
	PlayWhite(x);
 800cadc:	4b09      	ldr	r3, [pc, #36]	; (800cb04 <GetPosition+0x14c>)
 800cade:	881b      	ldrh	r3, [r3, #0]
 800cae0:	b25b      	sxtb	r3, r3
 800cae2:	4618      	mov	r0, r3
 800cae4:	f000 f962 	bl	800cdac <PlayWhite>
	colorPlay = 1;
 800cae8:	4b09      	ldr	r3, [pc, #36]	; (800cb10 <GetPosition+0x158>)
 800caea:	2201      	movs	r2, #1
 800caec:	601a      	str	r2, [r3, #0]
	noteNum = x;
 800caee:	4b05      	ldr	r3, [pc, #20]	; (800cb04 <GetPosition+0x14c>)
 800caf0:	881b      	ldrh	r3, [r3, #0]
 800caf2:	461a      	mov	r2, r3
 800caf4:	4b07      	ldr	r3, [pc, #28]	; (800cb14 <GetPosition+0x15c>)
 800caf6:	601a      	str	r2, [r3, #0]
	return;
 800caf8:	e000      	b.n	800cafc <GetPosition+0x144>
		return;
 800cafa:	bf00      	nop
  }

}
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	24001570 	.word	0x24001570
 800cb04:	24001558 	.word	0x24001558
 800cb08:	2400155a 	.word	0x2400155a
 800cb0c:	24001554 	.word	0x24001554
 800cb10:	24000048 	.word	0x24000048
 800cb14:	2400004c 	.word	0x2400004c
 800cb18:	24001508 	.word	0x24001508
 800cb1c:	2400155c 	.word	0x2400155c
 800cb20:	2400155e 	.word	0x2400155e
 800cb24:	cccccccd 	.word	0xcccccccd

0800cb28 <clean>:
static void clean(int8_t x, int col){
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b084      	sub	sp, #16
 800cb2c:	af02      	add	r7, sp, #8
 800cb2e:	4603      	mov	r3, r0
 800cb30:	6039      	str	r1, [r7, #0]
 800cb32:	71fb      	strb	r3, [r7, #7]
	if(colorPlay == -1 &&  noteNum == -1){return;}
 800cb34:	4b4b      	ldr	r3, [pc, #300]	; (800cc64 <clean+0x13c>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb3c:	d105      	bne.n	800cb4a <clean+0x22>
 800cb3e:	4b4a      	ldr	r3, [pc, #296]	; (800cc68 <clean+0x140>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb46:	f000 8089 	beq.w	800cc5c <clean+0x134>
	if(colorPlay != col ||  noteNum != x){
 800cb4a:	4b46      	ldr	r3, [pc, #280]	; (800cc64 <clean+0x13c>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	683a      	ldr	r2, [r7, #0]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d105      	bne.n	800cb60 <clean+0x38>
 800cb54:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800cb58:	4b43      	ldr	r3, [pc, #268]	; (800cc68 <clean+0x140>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d07e      	beq.n	800cc5e <clean+0x136>
		if(colorPlay==0){
 800cb60:	4b40      	ldr	r3, [pc, #256]	; (800cc64 <clean+0x13c>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d118      	bne.n	800cb9a <clean+0x72>
			UTIL_LCD_FillRect(50 + (noteNum * 40), 43 ,25, 2+100, UTIL_LCD_COLOR_BLACK);
 800cb68:	4b3f      	ldr	r3, [pc, #252]	; (800cc68 <clean+0x140>)
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	4613      	mov	r3, r2
 800cb6e:	009b      	lsls	r3, r3, #2
 800cb70:	4413      	add	r3, r2
 800cb72:	00db      	lsls	r3, r3, #3
 800cb74:	3332      	adds	r3, #50	; 0x32
 800cb76:	4618      	mov	r0, r3
 800cb78:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800cb7c:	9300      	str	r3, [sp, #0]
 800cb7e:	2366      	movs	r3, #102	; 0x66
 800cb80:	2219      	movs	r2, #25
 800cb82:	212b      	movs	r1, #43	; 0x2b
 800cb84:	f7f3 ff22 	bl	80009cc <UTIL_LCD_FillRect>
			colorPlay=-1;
 800cb88:	4b36      	ldr	r3, [pc, #216]	; (800cc64 <clean+0x13c>)
 800cb8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb8e:	601a      	str	r2, [r3, #0]
			noteNum=-1;
 800cb90:	4b35      	ldr	r3, [pc, #212]	; (800cc68 <clean+0x140>)
 800cb92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb96:	601a      	str	r2, [r3, #0]
			return;
 800cb98:	e061      	b.n	800cc5e <clean+0x136>
		}
			UTIL_LCD_FillRect(20 + (noteNum * 40), 43 ,40, 2+200, UTIL_LCD_COLOR_WHITE);
 800cb9a:	4b33      	ldr	r3, [pc, #204]	; (800cc68 <clean+0x140>)
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	4613      	mov	r3, r2
 800cba0:	009b      	lsls	r3, r3, #2
 800cba2:	4413      	add	r3, r2
 800cba4:	00db      	lsls	r3, r3, #3
 800cba6:	3314      	adds	r3, #20
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbae:	9300      	str	r3, [sp, #0]
 800cbb0:	23ca      	movs	r3, #202	; 0xca
 800cbb2:	2228      	movs	r2, #40	; 0x28
 800cbb4:	212b      	movs	r1, #43	; 0x2b
 800cbb6:	f7f3 ff09 	bl	80009cc <UTIL_LCD_FillRect>
			UTIL_LCD_DrawRect(20 + (noteNum * 40), 43 ,40, 2+200, UTIL_LCD_COLOR_LIGHTGRAY);
 800cbba:	4b2b      	ldr	r3, [pc, #172]	; (800cc68 <clean+0x140>)
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	4413      	add	r3, r2
 800cbc4:	00db      	lsls	r3, r3, #3
 800cbc6:	3314      	adds	r3, #20
 800cbc8:	4618      	mov	r0, r3
 800cbca:	4b28      	ldr	r3, [pc, #160]	; (800cc6c <clean+0x144>)
 800cbcc:	9300      	str	r3, [sp, #0]
 800cbce:	23ca      	movs	r3, #202	; 0xca
 800cbd0:	2228      	movs	r2, #40	; 0x28
 800cbd2:	212b      	movs	r1, #43	; 0x2b
 800cbd4:	f7f3 fed0 	bl	8000978 <UTIL_LCD_DrawRect>
			if((noteNum) != 3 && (noteNum)!= 6 && (noteNum)<10){
 800cbd8:	4b23      	ldr	r3, [pc, #140]	; (800cc68 <clean+0x140>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	2b03      	cmp	r3, #3
 800cbde:	d017      	beq.n	800cc10 <clean+0xe8>
 800cbe0:	4b21      	ldr	r3, [pc, #132]	; (800cc68 <clean+0x140>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2b06      	cmp	r3, #6
 800cbe6:	d013      	beq.n	800cc10 <clean+0xe8>
 800cbe8:	4b1f      	ldr	r3, [pc, #124]	; (800cc68 <clean+0x140>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2b09      	cmp	r3, #9
 800cbee:	dc0f      	bgt.n	800cc10 <clean+0xe8>
				UTIL_LCD_FillRect(50 + ((noteNum) * 40), 43 ,25, 2+100, UTIL_LCD_COLOR_BLACK);
 800cbf0:	4b1d      	ldr	r3, [pc, #116]	; (800cc68 <clean+0x140>)
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	4413      	add	r3, r2
 800cbfa:	00db      	lsls	r3, r3, #3
 800cbfc:	3332      	adds	r3, #50	; 0x32
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800cc04:	9300      	str	r3, [sp, #0]
 800cc06:	2366      	movs	r3, #102	; 0x66
 800cc08:	2219      	movs	r2, #25
 800cc0a:	212b      	movs	r1, #43	; 0x2b
 800cc0c:	f7f3 fede 	bl	80009cc <UTIL_LCD_FillRect>
			}
			if((noteNum-1) != 3 && (noteNum-1) != 6 && (noteNum-1)>=0){
 800cc10:	4b15      	ldr	r3, [pc, #84]	; (800cc68 <clean+0x140>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2b04      	cmp	r3, #4
 800cc16:	d018      	beq.n	800cc4a <clean+0x122>
 800cc18:	4b13      	ldr	r3, [pc, #76]	; (800cc68 <clean+0x140>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2b07      	cmp	r3, #7
 800cc1e:	d014      	beq.n	800cc4a <clean+0x122>
 800cc20:	4b11      	ldr	r3, [pc, #68]	; (800cc68 <clean+0x140>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	dd10      	ble.n	800cc4a <clean+0x122>
				UTIL_LCD_FillRect(50 + ((noteNum-1)* 40), 43 ,25, 2+100, UTIL_LCD_COLOR_BLACK);
 800cc28:	4b0f      	ldr	r3, [pc, #60]	; (800cc68 <clean+0x140>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	1e5a      	subs	r2, r3, #1
 800cc2e:	4613      	mov	r3, r2
 800cc30:	009b      	lsls	r3, r3, #2
 800cc32:	4413      	add	r3, r2
 800cc34:	00db      	lsls	r3, r3, #3
 800cc36:	3332      	adds	r3, #50	; 0x32
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	2366      	movs	r3, #102	; 0x66
 800cc42:	2219      	movs	r2, #25
 800cc44:	212b      	movs	r1, #43	; 0x2b
 800cc46:	f7f3 fec1 	bl	80009cc <UTIL_LCD_FillRect>
			}
			colorPlay=-1;
 800cc4a:	4b06      	ldr	r3, [pc, #24]	; (800cc64 <clean+0x13c>)
 800cc4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc50:	601a      	str	r2, [r3, #0]
			noteNum=-1;
 800cc52:	4b05      	ldr	r3, [pc, #20]	; (800cc68 <clean+0x140>)
 800cc54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc58:	601a      	str	r2, [r3, #0]
 800cc5a:	e000      	b.n	800cc5e <clean+0x136>
	if(colorPlay == -1 &&  noteNum == -1){return;}
 800cc5c:	bf00      	nop
	}
}
 800cc5e:	3708      	adds	r7, #8
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	24000048 	.word	0x24000048
 800cc68:	2400004c 	.word	0x2400004c
 800cc6c:	ffd3d3d3 	.word	0xffd3d3d3

0800cc70 <PlayBlack>:


static void PlayBlack(int8_t x){
 800cc70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc72:	b097      	sub	sp, #92	; 0x5c
 800cc74:	af12      	add	r7, sp, #72	; 0x48
 800cc76:	4603      	mov	r3, r0
 800cc78:	71fb      	strb	r3, [r7, #7]
	if(x<10 && x != 3 && x != 6)
 800cc7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc7e:	2b09      	cmp	r3, #9
 800cc80:	dc16      	bgt.n	800ccb0 <PlayBlack+0x40>
 800cc82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc86:	2b03      	cmp	r3, #3
 800cc88:	d012      	beq.n	800ccb0 <PlayBlack+0x40>
 800cc8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc8e:	2b06      	cmp	r3, #6
 800cc90:	d00e      	beq.n	800ccb0 <PlayBlack+0x40>
		UTIL_LCD_FillRect(50 + (x * 40), 43 ,25, 2+100, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
 800cc92:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800cc96:	4613      	mov	r3, r2
 800cc98:	009b      	lsls	r3, r3, #2
 800cc9a:	4413      	add	r3, r2
 800cc9c:	00db      	lsls	r3, r3, #3
 800cc9e:	3332      	adds	r3, #50	; 0x32
 800cca0:	4618      	mov	r0, r3
 800cca2:	4b3d      	ldr	r3, [pc, #244]	; (800cd98 <PlayBlack+0x128>)
 800cca4:	9300      	str	r3, [sp, #0]
 800cca6:	2366      	movs	r3, #102	; 0x66
 800cca8:	2219      	movs	r2, #25
 800ccaa:	212b      	movs	r1, #43	; 0x2b
 800ccac:	f7f3 fe8e 	bl	80009cc <UTIL_LCD_FillRect>
			int ARR_period;
			int NoteFreq;
			//int Delaymsecs;
			  switch(x){
 800ccb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccb4:	2b09      	cmp	r3, #9
 800ccb6:	d86a      	bhi.n	800cd8e <PlayBlack+0x11e>
 800ccb8:	a201      	add	r2, pc, #4	; (adr r2, 800ccc0 <PlayBlack+0x50>)
 800ccba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccbe:	bf00      	nop
 800ccc0:	0800cce9 	.word	0x0800cce9
 800ccc4:	0800ccf1 	.word	0x0800ccf1
 800ccc8:	0800ccf9 	.word	0x0800ccf9
 800cccc:	0800cd8f 	.word	0x0800cd8f
 800ccd0:	0800cd01 	.word	0x0800cd01
 800ccd4:	0800cd09 	.word	0x0800cd09
 800ccd8:	0800cd8f 	.word	0x0800cd8f
 800ccdc:	0800cd11 	.word	0x0800cd11
 800cce0:	0800cd19 	.word	0x0800cd19
 800cce4:	0800cd21 	.word	0x0800cd21
			  	 case 0:
			  		NoteFreq = NOTE_FS4;
 800cce8:	f44f 73b9 	mov.w	r3, #370	; 0x172
 800ccec:	60fb      	str	r3, [r7, #12]
			  		break;
 800ccee:	e01b      	b.n	800cd28 <PlayBlack+0xb8>
			  	case 1:
			  		NoteFreq = NOTE_GS4;
 800ccf0:	f240 139f 	movw	r3, #415	; 0x19f
 800ccf4:	60fb      	str	r3, [r7, #12]
			  		break;
 800ccf6:	e017      	b.n	800cd28 <PlayBlack+0xb8>
			  	case 2:
			  		NoteFreq = NOTE_AS4;
 800ccf8:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
 800ccfc:	60fb      	str	r3, [r7, #12]
			  		break;
 800ccfe:	e013      	b.n	800cd28 <PlayBlack+0xb8>
			  	case 4:
			  		NoteFreq = NOTE_CS5;
 800cd00:	f240 232a 	movw	r3, #554	; 0x22a
 800cd04:	60fb      	str	r3, [r7, #12]
			  		break;
 800cd06:	e00f      	b.n	800cd28 <PlayBlack+0xb8>
			  	case 5:
			  		NoteFreq = NOTE_DS5;
 800cd08:	f240 236e 	movw	r3, #622	; 0x26e
 800cd0c:	60fb      	str	r3, [r7, #12]
			  		break;
 800cd0e:	e00b      	b.n	800cd28 <PlayBlack+0xb8>
			  	case 7:
			  		NoteFreq = NOTE_FS5;
 800cd10:	f44f 7339 	mov.w	r3, #740	; 0x2e4
 800cd14:	60fb      	str	r3, [r7, #12]
			  		break;
 800cd16:	e007      	b.n	800cd28 <PlayBlack+0xb8>
			  	case 8:
			  		NoteFreq = NOTE_GS5;
 800cd18:	f240 333f 	movw	r3, #831	; 0x33f
 800cd1c:	60fb      	str	r3, [r7, #12]
			  		break;
 800cd1e:	e003      	b.n	800cd28 <PlayBlack+0xb8>
			  	case 9:
			  		NoteFreq = NOTE_AS5;
 800cd20:	f44f 7369 	mov.w	r3, #932	; 0x3a4
 800cd24:	60fb      	str	r3, [r7, #12]
			  		break;
 800cd26:	bf00      	nop
			  	default:
			  		return;
			  }
			  			  if (NoteFreq == 0) NoteFreq = 1;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d101      	bne.n	800cd32 <PlayBlack+0xc2>
 800cd2e:	2301      	movs	r3, #1
 800cd30:	60fb      	str	r3, [r7, #12]

			  			  ARR_period = (int)(1000000/NoteFreq);  //Already prescaled to 1 MHz
 800cd32:	4a1a      	ldr	r2, [pc, #104]	; (800cd9c <PlayBlack+0x12c>)
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	fb92 f3f3 	sdiv	r3, r2, r3
 800cd3a:	60bb      	str	r3, [r7, #8]
			  			  if(colorPlay != 0 || noteNum != x)
 800cd3c:	4b18      	ldr	r3, [pc, #96]	; (800cda0 <PlayBlack+0x130>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d105      	bne.n	800cd50 <PlayBlack+0xe0>
 800cd44:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800cd48:	4b16      	ldr	r3, [pc, #88]	; (800cda4 <PlayBlack+0x134>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d01f      	beq.n	800cd90 <PlayBlack+0x120>
			  				  setPWM(htim2, TIM_CHANNEL_4, ARR_period, ARR_period/2);
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	b29a      	uxth	r2, r3
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	da00      	bge.n	800cd5c <PlayBlack+0xec>
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	105b      	asrs	r3, r3, #1
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	4e11      	ldr	r6, [pc, #68]	; (800cda8 <PlayBlack+0x138>)
 800cd62:	9311      	str	r3, [sp, #68]	; 0x44
 800cd64:	9210      	str	r2, [sp, #64]	; 0x40
 800cd66:	230c      	movs	r3, #12
 800cd68:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd6a:	466d      	mov	r5, sp
 800cd6c:	f106 0410 	add.w	r4, r6, #16
 800cd70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cd74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cd78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cd7c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800cd80:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800cd84:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800cd88:	f000 f8ae 	bl	800cee8 <setPWM>
 800cd8c:	e000      	b.n	800cd90 <PlayBlack+0x120>
			  		return;
 800cd8e:	bf00      	nop
			  			  Delaymsecs = 150;

			  		  	  HAL_Delay(Delaymsecs);
			  			   */

}
 800cd90:	3714      	adds	r7, #20
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd96:	bf00      	nop
 800cd98:	ffb9c4ca 	.word	0xffb9c4ca
 800cd9c:	000f4240 	.word	0x000f4240
 800cda0:	24000048 	.word	0x24000048
 800cda4:	2400004c 	.word	0x2400004c
 800cda8:	24001508 	.word	0x24001508

0800cdac <PlayWhite>:
static void PlayWhite(int8_t x){
 800cdac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdae:	b097      	sub	sp, #92	; 0x5c
 800cdb0:	af12      	add	r7, sp, #72	; 0x48
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	71fb      	strb	r3, [r7, #7]
	if(colorPlay != 1 || noteNum != x){
 800cdb6:	4b48      	ldr	r3, [pc, #288]	; (800ced8 <PlayWhite+0x12c>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d105      	bne.n	800cdca <PlayWhite+0x1e>
 800cdbe:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800cdc2:	4b46      	ldr	r3, [pc, #280]	; (800cedc <PlayWhite+0x130>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d004      	beq.n	800cdd4 <PlayWhite+0x28>
		colorWhite(x);
 800cdca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7ff fda8 	bl	800c924 <colorWhite>

		int ARR_period;
		int NoteFreq;
		int Delaymsecs;

		switch(x){
 800cdd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdd8:	2b0a      	cmp	r3, #10
 800cdda:	d878      	bhi.n	800cece <PlayWhite+0x122>
 800cddc:	a201      	add	r2, pc, #4	; (adr r2, 800cde4 <PlayWhite+0x38>)
 800cdde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cde2:	bf00      	nop
 800cde4:	0800ce11 	.word	0x0800ce11
 800cde8:	0800ce19 	.word	0x0800ce19
 800cdec:	0800ce21 	.word	0x0800ce21
 800cdf0:	0800ce29 	.word	0x0800ce29
 800cdf4:	0800ce31 	.word	0x0800ce31
 800cdf8:	0800ce39 	.word	0x0800ce39
 800cdfc:	0800ce41 	.word	0x0800ce41
 800ce00:	0800ce49 	.word	0x0800ce49
 800ce04:	0800ce51 	.word	0x0800ce51
 800ce08:	0800ce59 	.word	0x0800ce59
 800ce0c:	0800ce61 	.word	0x0800ce61
			case 0:
				NoteFreq = NOTE_F4;
 800ce10:	f240 135d 	movw	r3, #349	; 0x15d
 800ce14:	60fb      	str	r3, [r7, #12]
				break;
 800ce16:	e027      	b.n	800ce68 <PlayWhite+0xbc>
			case 1:
				NoteFreq = NOTE_G4;
 800ce18:	f44f 73c4 	mov.w	r3, #392	; 0x188
 800ce1c:	60fb      	str	r3, [r7, #12]
				break;
 800ce1e:	e023      	b.n	800ce68 <PlayWhite+0xbc>
			case 2:
				NoteFreq = NOTE_A4;
 800ce20:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800ce24:	60fb      	str	r3, [r7, #12]
				break;
 800ce26:	e01f      	b.n	800ce68 <PlayWhite+0xbc>
			case 3:
				NoteFreq = NOTE_B4;
 800ce28:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
 800ce2c:	60fb      	str	r3, [r7, #12]
				break;
 800ce2e:	e01b      	b.n	800ce68 <PlayWhite+0xbc>
			case 4:
				NoteFreq = NOTE_C5;
 800ce30:	f240 230b 	movw	r3, #523	; 0x20b
 800ce34:	60fb      	str	r3, [r7, #12]
				break;
 800ce36:	e017      	b.n	800ce68 <PlayWhite+0xbc>
			case 5:
				NoteFreq = NOTE_D5;
 800ce38:	f240 234b 	movw	r3, #587	; 0x24b
 800ce3c:	60fb      	str	r3, [r7, #12]
				break;
 800ce3e:	e013      	b.n	800ce68 <PlayWhite+0xbc>
			case 6:
				NoteFreq = NOTE_E5;
 800ce40:	f240 2393 	movw	r3, #659	; 0x293
 800ce44:	60fb      	str	r3, [r7, #12]
				break;
 800ce46:	e00f      	b.n	800ce68 <PlayWhite+0xbc>
			case 7:
				NoteFreq = NOTE_F5;
 800ce48:	f240 23ba 	movw	r3, #698	; 0x2ba
 800ce4c:	60fb      	str	r3, [r7, #12]
				break;
 800ce4e:	e00b      	b.n	800ce68 <PlayWhite+0xbc>
			case 8:
				NoteFreq = NOTE_G5;
 800ce50:	f44f 7344 	mov.w	r3, #784	; 0x310
 800ce54:	60fb      	str	r3, [r7, #12]
				break;
 800ce56:	e007      	b.n	800ce68 <PlayWhite+0xbc>
			case 9:
				NoteFreq = NOTE_A5;
 800ce58:	f44f 735c 	mov.w	r3, #880	; 0x370
 800ce5c:	60fb      	str	r3, [r7, #12]
				break;
 800ce5e:	e003      	b.n	800ce68 <PlayWhite+0xbc>
			case 10:
				NoteFreq = NOTE_B5;
 800ce60:	f44f 7377 	mov.w	r3, #988	; 0x3dc
 800ce64:	60fb      	str	r3, [r7, #12]
				break;
 800ce66:	bf00      	nop
			default:
				return;
			}

	  if (NoteFreq == 0) NoteFreq = 1;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d101      	bne.n	800ce72 <PlayWhite+0xc6>
 800ce6e:	2301      	movs	r3, #1
 800ce70:	60fb      	str	r3, [r7, #12]

	  ARR_period = (int)(1000000/NoteFreq);  //Already prescaled to 1 MHz
 800ce72:	4a1b      	ldr	r2, [pc, #108]	; (800cee0 <PlayWhite+0x134>)
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	fb92 f3f3 	sdiv	r3, r2, r3
 800ce7a:	60bb      	str	r3, [r7, #8]
	  if(colorPlay != 1 || noteNum != x){
 800ce7c:	4b16      	ldr	r3, [pc, #88]	; (800ced8 <PlayWhite+0x12c>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	d105      	bne.n	800ce90 <PlayWhite+0xe4>
 800ce84:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800ce88:	4b14      	ldr	r3, [pc, #80]	; (800cedc <PlayWhite+0x130>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d01f      	beq.n	800ced0 <PlayWhite+0x124>
		  setPWM(htim2, TIM_CHANNEL_4, ARR_period, ARR_period/2);
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	b29a      	uxth	r2, r3
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	da00      	bge.n	800ce9c <PlayWhite+0xf0>
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	105b      	asrs	r3, r3, #1
 800ce9e:	b29b      	uxth	r3, r3
 800cea0:	4e10      	ldr	r6, [pc, #64]	; (800cee4 <PlayWhite+0x138>)
 800cea2:	9311      	str	r3, [sp, #68]	; 0x44
 800cea4:	9210      	str	r2, [sp, #64]	; 0x40
 800cea6:	230c      	movs	r3, #12
 800cea8:	930f      	str	r3, [sp, #60]	; 0x3c
 800ceaa:	466d      	mov	r5, sp
 800ceac:	f106 0410 	add.w	r4, r6, #16
 800ceb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ceb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ceb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ceb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ceb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ceba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cebc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800cec0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800cec4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800cec8:	f000 f80e 	bl	800cee8 <setPWM>
 800cecc:	e000      	b.n	800ced0 <PlayWhite+0x124>
				return;
 800cece:	bf00      	nop
	  }

	 // Delaymsecs = 150;
  	  //HAL_Delay(Delaymsecs);

}
 800ced0:	3714      	adds	r7, #20
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ced6:	bf00      	nop
 800ced8:	24000048 	.word	0x24000048
 800cedc:	2400004c 	.word	0x2400004c
 800cee0:	000f4240 	.word	0x000f4240
 800cee4:	24001508 	.word	0x24001508

0800cee8 <setPWM>:

void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 800cee8:	b084      	sub	sp, #16
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b088      	sub	sp, #32
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800cef4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 800cef8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cefa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cefe:	f7fd f9ef 	bl	800a2e0 <HAL_TIM_PWM_Stop>
	 TIM_OC_InitTypeDef sConfigOC;
	 timer.Init.Period = period; // set the period duration
 800cf02:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800cf06:	637b      	str	r3, [r7, #52]	; 0x34
	 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 800cf08:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cf0c:	f7fd f812 	bl	8009f34 <HAL_TIM_PWM_Init>
	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cf10:	2360      	movs	r3, #96	; 0x60
 800cf12:	607b      	str	r3, [r7, #4]
	 sConfigOC.Pulse = pulse; // set the pulse duration
 800cf14:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800cf18:	60bb      	str	r3, [r7, #8]
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	60fb      	str	r3, [r7, #12]
	 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	617b      	str	r3, [r7, #20]
	 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 800cf22:	1d3b      	adds	r3, r7, #4
 800cf24:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800cf26:	4619      	mov	r1, r3
 800cf28:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cf2c:	f7fd fb8e 	bl	800a64c <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 800cf30:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cf32:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cf36:	f7fd f8c5 	bl	800a0c4 <HAL_TIM_PWM_Start>
}
 800cf3a:	bf00      	nop
 800cf3c:	3720      	adds	r7, #32
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cf44:	b004      	add	sp, #16
 800cf46:	4770      	bx	lr

0800cf48 <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b08e      	sub	sp, #56	; 0x38
 800cf4c:	af00      	add	r7, sp, #0
	 /* USER CODE BEGIN TIM2_Init 0 */

	  /* USER CODE END TIM2_Init 0 */

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800cf4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cf52:	2200      	movs	r2, #0
 800cf54:	601a      	str	r2, [r3, #0]
 800cf56:	605a      	str	r2, [r3, #4]
 800cf58:	609a      	str	r2, [r3, #8]
 800cf5a:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cf5c:	f107 031c 	add.w	r3, r7, #28
 800cf60:	2200      	movs	r2, #0
 800cf62:	601a      	str	r2, [r3, #0]
 800cf64:	605a      	str	r2, [r3, #4]
 800cf66:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800cf68:	463b      	mov	r3, r7
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	601a      	str	r2, [r3, #0]
 800cf6e:	605a      	str	r2, [r3, #4]
 800cf70:	609a      	str	r2, [r3, #8]
 800cf72:	60da      	str	r2, [r3, #12]
 800cf74:	611a      	str	r2, [r3, #16]
 800cf76:	615a      	str	r2, [r3, #20]
 800cf78:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM2_Init 1 */

	  /* USER CODE END TIM2_Init 1 */
	  htim2.Instance = TIM2;
 800cf7a:	4b2d      	ldr	r3, [pc, #180]	; (800d030 <MX_TIM2_Init+0xe8>)
 800cf7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cf80:	601a      	str	r2, [r3, #0]
	  htim2.Init.Prescaler = 63;
 800cf82:	4b2b      	ldr	r3, [pc, #172]	; (800d030 <MX_TIM2_Init+0xe8>)
 800cf84:	223f      	movs	r2, #63	; 0x3f
 800cf86:	605a      	str	r2, [r3, #4]
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cf88:	4b29      	ldr	r3, [pc, #164]	; (800d030 <MX_TIM2_Init+0xe8>)
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	609a      	str	r2, [r3, #8]
	  htim2.Init.Period = 4294967295;
 800cf8e:	4b28      	ldr	r3, [pc, #160]	; (800d030 <MX_TIM2_Init+0xe8>)
 800cf90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf94:	60da      	str	r2, [r3, #12]
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cf96:	4b26      	ldr	r3, [pc, #152]	; (800d030 <MX_TIM2_Init+0xe8>)
 800cf98:	2200      	movs	r2, #0
 800cf9a:	611a      	str	r2, [r3, #16]
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cf9c:	4b24      	ldr	r3, [pc, #144]	; (800d030 <MX_TIM2_Init+0xe8>)
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800cfa2:	4823      	ldr	r0, [pc, #140]	; (800d030 <MX_TIM2_Init+0xe8>)
 800cfa4:	f7fc ff6f 	bl	8009e86 <HAL_TIM_Base_Init>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d001      	beq.n	800cfb2 <MX_TIM2_Init+0x6a>
	  {
	    Error_Handler();
 800cfae:	f7f3 fb37 	bl	8000620 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cfb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfb6:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800cfb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	481c      	ldr	r0, [pc, #112]	; (800d030 <MX_TIM2_Init+0xe8>)
 800cfc0:	f7fd fc58 	bl	800a874 <HAL_TIM_ConfigClockSource>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d001      	beq.n	800cfce <MX_TIM2_Init+0x86>
	  {
	    Error_Handler();
 800cfca:	f7f3 fb29 	bl	8000620 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800cfce:	4818      	ldr	r0, [pc, #96]	; (800d030 <MX_TIM2_Init+0xe8>)
 800cfd0:	f7fc ffb0 	bl	8009f34 <HAL_TIM_PWM_Init>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d001      	beq.n	800cfde <MX_TIM2_Init+0x96>
	  {
	    Error_Handler();
 800cfda:	f7f3 fb21 	bl	8000620 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	61fb      	str	r3, [r7, #28]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800cfe6:	f107 031c 	add.w	r3, r7, #28
 800cfea:	4619      	mov	r1, r3
 800cfec:	4810      	ldr	r0, [pc, #64]	; (800d030 <MX_TIM2_Init+0xe8>)
 800cfee:	f7fe f99f 	bl	800b330 <HAL_TIMEx_MasterConfigSynchronization>
 800cff2:	4603      	mov	r3, r0
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d001      	beq.n	800cffc <MX_TIM2_Init+0xb4>
	  {
	    Error_Handler();
 800cff8:	f7f3 fb12 	bl	8000620 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cffc:	2360      	movs	r3, #96	; 0x60
 800cffe:	603b      	str	r3, [r7, #0]
	  sConfigOC.Pulse = 0;
 800d000:	2300      	movs	r3, #0
 800d002:	607b      	str	r3, [r7, #4]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d004:	2300      	movs	r3, #0
 800d006:	60bb      	str	r3, [r7, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d008:	2300      	movs	r3, #0
 800d00a:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d00c:	463b      	mov	r3, r7
 800d00e:	220c      	movs	r2, #12
 800d010:	4619      	mov	r1, r3
 800d012:	4807      	ldr	r0, [pc, #28]	; (800d030 <MX_TIM2_Init+0xe8>)
 800d014:	f7fd fb1a 	bl	800a64c <HAL_TIM_PWM_ConfigChannel>
 800d018:	4603      	mov	r3, r0
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d001      	beq.n	800d022 <MX_TIM2_Init+0xda>
	  {
	    Error_Handler();
 800d01e:	f7f3 faff 	bl	8000620 <Error_Handler>
	  }
	  /* USER CODE BEGIN TIM2_Init 2 */

	  /* USER CODE END TIM2_Init 2 */
	  HAL_TIM_MspPostInit(&htim2);
 800d022:	4803      	ldr	r0, [pc, #12]	; (800d030 <MX_TIM2_Init+0xe8>)
 800d024:	f7f3 fd6a 	bl	8000afc <HAL_TIM_MspPostInit>


}
 800d028:	bf00      	nop
 800d02a:	3738      	adds	r7, #56	; 0x38
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}
 800d030:	24001508 	.word	0x24001508

0800d034 <__errno>:
 800d034:	4b01      	ldr	r3, [pc, #4]	; (800d03c <__errno+0x8>)
 800d036:	6818      	ldr	r0, [r3, #0]
 800d038:	4770      	bx	lr
 800d03a:	bf00      	nop
 800d03c:	24000050 	.word	0x24000050

0800d040 <__libc_init_array>:
 800d040:	b570      	push	{r4, r5, r6, lr}
 800d042:	4d0d      	ldr	r5, [pc, #52]	; (800d078 <__libc_init_array+0x38>)
 800d044:	4c0d      	ldr	r4, [pc, #52]	; (800d07c <__libc_init_array+0x3c>)
 800d046:	1b64      	subs	r4, r4, r5
 800d048:	10a4      	asrs	r4, r4, #2
 800d04a:	2600      	movs	r6, #0
 800d04c:	42a6      	cmp	r6, r4
 800d04e:	d109      	bne.n	800d064 <__libc_init_array+0x24>
 800d050:	4d0b      	ldr	r5, [pc, #44]	; (800d080 <__libc_init_array+0x40>)
 800d052:	4c0c      	ldr	r4, [pc, #48]	; (800d084 <__libc_init_array+0x44>)
 800d054:	f001 f87c 	bl	800e150 <_init>
 800d058:	1b64      	subs	r4, r4, r5
 800d05a:	10a4      	asrs	r4, r4, #2
 800d05c:	2600      	movs	r6, #0
 800d05e:	42a6      	cmp	r6, r4
 800d060:	d105      	bne.n	800d06e <__libc_init_array+0x2e>
 800d062:	bd70      	pop	{r4, r5, r6, pc}
 800d064:	f855 3b04 	ldr.w	r3, [r5], #4
 800d068:	4798      	blx	r3
 800d06a:	3601      	adds	r6, #1
 800d06c:	e7ee      	b.n	800d04c <__libc_init_array+0xc>
 800d06e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d072:	4798      	blx	r3
 800d074:	3601      	adds	r6, #1
 800d076:	e7f2      	b.n	800d05e <__libc_init_array+0x1e>
 800d078:	0800e378 	.word	0x0800e378
 800d07c:	0800e378 	.word	0x0800e378
 800d080:	0800e378 	.word	0x0800e378
 800d084:	0800e37c 	.word	0x0800e37c

0800d088 <memset>:
 800d088:	4402      	add	r2, r0
 800d08a:	4603      	mov	r3, r0
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d100      	bne.n	800d092 <memset+0xa>
 800d090:	4770      	bx	lr
 800d092:	f803 1b01 	strb.w	r1, [r3], #1
 800d096:	e7f9      	b.n	800d08c <memset+0x4>

0800d098 <srand>:
 800d098:	b538      	push	{r3, r4, r5, lr}
 800d09a:	4b10      	ldr	r3, [pc, #64]	; (800d0dc <srand+0x44>)
 800d09c:	681d      	ldr	r5, [r3, #0]
 800d09e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d0a0:	4604      	mov	r4, r0
 800d0a2:	b9b3      	cbnz	r3, 800d0d2 <srand+0x3a>
 800d0a4:	2018      	movs	r0, #24
 800d0a6:	f000 faa1 	bl	800d5ec <malloc>
 800d0aa:	4602      	mov	r2, r0
 800d0ac:	63a8      	str	r0, [r5, #56]	; 0x38
 800d0ae:	b920      	cbnz	r0, 800d0ba <srand+0x22>
 800d0b0:	4b0b      	ldr	r3, [pc, #44]	; (800d0e0 <srand+0x48>)
 800d0b2:	480c      	ldr	r0, [pc, #48]	; (800d0e4 <srand+0x4c>)
 800d0b4:	2142      	movs	r1, #66	; 0x42
 800d0b6:	f000 f837 	bl	800d128 <__assert_func>
 800d0ba:	490b      	ldr	r1, [pc, #44]	; (800d0e8 <srand+0x50>)
 800d0bc:	4b0b      	ldr	r3, [pc, #44]	; (800d0ec <srand+0x54>)
 800d0be:	e9c0 1300 	strd	r1, r3, [r0]
 800d0c2:	4b0b      	ldr	r3, [pc, #44]	; (800d0f0 <srand+0x58>)
 800d0c4:	6083      	str	r3, [r0, #8]
 800d0c6:	230b      	movs	r3, #11
 800d0c8:	8183      	strh	r3, [r0, #12]
 800d0ca:	2100      	movs	r1, #0
 800d0cc:	2001      	movs	r0, #1
 800d0ce:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d0d2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	611c      	str	r4, [r3, #16]
 800d0d8:	615a      	str	r2, [r3, #20]
 800d0da:	bd38      	pop	{r3, r4, r5, pc}
 800d0dc:	24000050 	.word	0x24000050
 800d0e0:	0800e234 	.word	0x0800e234
 800d0e4:	0800e24b 	.word	0x0800e24b
 800d0e8:	abcd330e 	.word	0xabcd330e
 800d0ec:	e66d1234 	.word	0xe66d1234
 800d0f0:	0005deec 	.word	0x0005deec

0800d0f4 <time>:
 800d0f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0f6:	4b0b      	ldr	r3, [pc, #44]	; (800d124 <time+0x30>)
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	4669      	mov	r1, sp
 800d0fc:	4604      	mov	r4, r0
 800d0fe:	6818      	ldr	r0, [r3, #0]
 800d100:	f000 f9fa 	bl	800d4f8 <_gettimeofday_r>
 800d104:	2800      	cmp	r0, #0
 800d106:	bfbe      	ittt	lt
 800d108:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800d10c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d110:	e9cd 2300 	strdlt	r2, r3, [sp]
 800d114:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d118:	b10c      	cbz	r4, 800d11e <time+0x2a>
 800d11a:	e9c4 0100 	strd	r0, r1, [r4]
 800d11e:	b004      	add	sp, #16
 800d120:	bd10      	pop	{r4, pc}
 800d122:	bf00      	nop
 800d124:	24000050 	.word	0x24000050

0800d128 <__assert_func>:
 800d128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d12a:	4614      	mov	r4, r2
 800d12c:	461a      	mov	r2, r3
 800d12e:	4b09      	ldr	r3, [pc, #36]	; (800d154 <__assert_func+0x2c>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4605      	mov	r5, r0
 800d134:	68d8      	ldr	r0, [r3, #12]
 800d136:	b14c      	cbz	r4, 800d14c <__assert_func+0x24>
 800d138:	4b07      	ldr	r3, [pc, #28]	; (800d158 <__assert_func+0x30>)
 800d13a:	9100      	str	r1, [sp, #0]
 800d13c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d140:	4906      	ldr	r1, [pc, #24]	; (800d15c <__assert_func+0x34>)
 800d142:	462b      	mov	r3, r5
 800d144:	f000 f9a6 	bl	800d494 <fiprintf>
 800d148:	f000 ff4c 	bl	800dfe4 <abort>
 800d14c:	4b04      	ldr	r3, [pc, #16]	; (800d160 <__assert_func+0x38>)
 800d14e:	461c      	mov	r4, r3
 800d150:	e7f3      	b.n	800d13a <__assert_func+0x12>
 800d152:	bf00      	nop
 800d154:	24000050 	.word	0x24000050
 800d158:	0800e2a6 	.word	0x0800e2a6
 800d15c:	0800e2b3 	.word	0x0800e2b3
 800d160:	0800e2e1 	.word	0x0800e2e1

0800d164 <__sflush_r>:
 800d164:	898a      	ldrh	r2, [r1, #12]
 800d166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d16a:	4605      	mov	r5, r0
 800d16c:	0710      	lsls	r0, r2, #28
 800d16e:	460c      	mov	r4, r1
 800d170:	d458      	bmi.n	800d224 <__sflush_r+0xc0>
 800d172:	684b      	ldr	r3, [r1, #4]
 800d174:	2b00      	cmp	r3, #0
 800d176:	dc05      	bgt.n	800d184 <__sflush_r+0x20>
 800d178:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	dc02      	bgt.n	800d184 <__sflush_r+0x20>
 800d17e:	2000      	movs	r0, #0
 800d180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d186:	2e00      	cmp	r6, #0
 800d188:	d0f9      	beq.n	800d17e <__sflush_r+0x1a>
 800d18a:	2300      	movs	r3, #0
 800d18c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d190:	682f      	ldr	r7, [r5, #0]
 800d192:	602b      	str	r3, [r5, #0]
 800d194:	d032      	beq.n	800d1fc <__sflush_r+0x98>
 800d196:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d198:	89a3      	ldrh	r3, [r4, #12]
 800d19a:	075a      	lsls	r2, r3, #29
 800d19c:	d505      	bpl.n	800d1aa <__sflush_r+0x46>
 800d19e:	6863      	ldr	r3, [r4, #4]
 800d1a0:	1ac0      	subs	r0, r0, r3
 800d1a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1a4:	b10b      	cbz	r3, 800d1aa <__sflush_r+0x46>
 800d1a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d1a8:	1ac0      	subs	r0, r0, r3
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1b0:	6a21      	ldr	r1, [r4, #32]
 800d1b2:	4628      	mov	r0, r5
 800d1b4:	47b0      	blx	r6
 800d1b6:	1c43      	adds	r3, r0, #1
 800d1b8:	89a3      	ldrh	r3, [r4, #12]
 800d1ba:	d106      	bne.n	800d1ca <__sflush_r+0x66>
 800d1bc:	6829      	ldr	r1, [r5, #0]
 800d1be:	291d      	cmp	r1, #29
 800d1c0:	d82c      	bhi.n	800d21c <__sflush_r+0xb8>
 800d1c2:	4a2a      	ldr	r2, [pc, #168]	; (800d26c <__sflush_r+0x108>)
 800d1c4:	40ca      	lsrs	r2, r1
 800d1c6:	07d6      	lsls	r6, r2, #31
 800d1c8:	d528      	bpl.n	800d21c <__sflush_r+0xb8>
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	6062      	str	r2, [r4, #4]
 800d1ce:	04d9      	lsls	r1, r3, #19
 800d1d0:	6922      	ldr	r2, [r4, #16]
 800d1d2:	6022      	str	r2, [r4, #0]
 800d1d4:	d504      	bpl.n	800d1e0 <__sflush_r+0x7c>
 800d1d6:	1c42      	adds	r2, r0, #1
 800d1d8:	d101      	bne.n	800d1de <__sflush_r+0x7a>
 800d1da:	682b      	ldr	r3, [r5, #0]
 800d1dc:	b903      	cbnz	r3, 800d1e0 <__sflush_r+0x7c>
 800d1de:	6560      	str	r0, [r4, #84]	; 0x54
 800d1e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1e2:	602f      	str	r7, [r5, #0]
 800d1e4:	2900      	cmp	r1, #0
 800d1e6:	d0ca      	beq.n	800d17e <__sflush_r+0x1a>
 800d1e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1ec:	4299      	cmp	r1, r3
 800d1ee:	d002      	beq.n	800d1f6 <__sflush_r+0x92>
 800d1f0:	4628      	mov	r0, r5
 800d1f2:	f000 fa03 	bl	800d5fc <_free_r>
 800d1f6:	2000      	movs	r0, #0
 800d1f8:	6360      	str	r0, [r4, #52]	; 0x34
 800d1fa:	e7c1      	b.n	800d180 <__sflush_r+0x1c>
 800d1fc:	6a21      	ldr	r1, [r4, #32]
 800d1fe:	2301      	movs	r3, #1
 800d200:	4628      	mov	r0, r5
 800d202:	47b0      	blx	r6
 800d204:	1c41      	adds	r1, r0, #1
 800d206:	d1c7      	bne.n	800d198 <__sflush_r+0x34>
 800d208:	682b      	ldr	r3, [r5, #0]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d0c4      	beq.n	800d198 <__sflush_r+0x34>
 800d20e:	2b1d      	cmp	r3, #29
 800d210:	d001      	beq.n	800d216 <__sflush_r+0xb2>
 800d212:	2b16      	cmp	r3, #22
 800d214:	d101      	bne.n	800d21a <__sflush_r+0xb6>
 800d216:	602f      	str	r7, [r5, #0]
 800d218:	e7b1      	b.n	800d17e <__sflush_r+0x1a>
 800d21a:	89a3      	ldrh	r3, [r4, #12]
 800d21c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d220:	81a3      	strh	r3, [r4, #12]
 800d222:	e7ad      	b.n	800d180 <__sflush_r+0x1c>
 800d224:	690f      	ldr	r7, [r1, #16]
 800d226:	2f00      	cmp	r7, #0
 800d228:	d0a9      	beq.n	800d17e <__sflush_r+0x1a>
 800d22a:	0793      	lsls	r3, r2, #30
 800d22c:	680e      	ldr	r6, [r1, #0]
 800d22e:	bf08      	it	eq
 800d230:	694b      	ldreq	r3, [r1, #20]
 800d232:	600f      	str	r7, [r1, #0]
 800d234:	bf18      	it	ne
 800d236:	2300      	movne	r3, #0
 800d238:	eba6 0807 	sub.w	r8, r6, r7
 800d23c:	608b      	str	r3, [r1, #8]
 800d23e:	f1b8 0f00 	cmp.w	r8, #0
 800d242:	dd9c      	ble.n	800d17e <__sflush_r+0x1a>
 800d244:	6a21      	ldr	r1, [r4, #32]
 800d246:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d248:	4643      	mov	r3, r8
 800d24a:	463a      	mov	r2, r7
 800d24c:	4628      	mov	r0, r5
 800d24e:	47b0      	blx	r6
 800d250:	2800      	cmp	r0, #0
 800d252:	dc06      	bgt.n	800d262 <__sflush_r+0xfe>
 800d254:	89a3      	ldrh	r3, [r4, #12]
 800d256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d25a:	81a3      	strh	r3, [r4, #12]
 800d25c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d260:	e78e      	b.n	800d180 <__sflush_r+0x1c>
 800d262:	4407      	add	r7, r0
 800d264:	eba8 0800 	sub.w	r8, r8, r0
 800d268:	e7e9      	b.n	800d23e <__sflush_r+0xda>
 800d26a:	bf00      	nop
 800d26c:	20400001 	.word	0x20400001

0800d270 <_fflush_r>:
 800d270:	b538      	push	{r3, r4, r5, lr}
 800d272:	690b      	ldr	r3, [r1, #16]
 800d274:	4605      	mov	r5, r0
 800d276:	460c      	mov	r4, r1
 800d278:	b913      	cbnz	r3, 800d280 <_fflush_r+0x10>
 800d27a:	2500      	movs	r5, #0
 800d27c:	4628      	mov	r0, r5
 800d27e:	bd38      	pop	{r3, r4, r5, pc}
 800d280:	b118      	cbz	r0, 800d28a <_fflush_r+0x1a>
 800d282:	6983      	ldr	r3, [r0, #24]
 800d284:	b90b      	cbnz	r3, 800d28a <_fflush_r+0x1a>
 800d286:	f000 f887 	bl	800d398 <__sinit>
 800d28a:	4b14      	ldr	r3, [pc, #80]	; (800d2dc <_fflush_r+0x6c>)
 800d28c:	429c      	cmp	r4, r3
 800d28e:	d11b      	bne.n	800d2c8 <_fflush_r+0x58>
 800d290:	686c      	ldr	r4, [r5, #4]
 800d292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d0ef      	beq.n	800d27a <_fflush_r+0xa>
 800d29a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d29c:	07d0      	lsls	r0, r2, #31
 800d29e:	d404      	bmi.n	800d2aa <_fflush_r+0x3a>
 800d2a0:	0599      	lsls	r1, r3, #22
 800d2a2:	d402      	bmi.n	800d2aa <_fflush_r+0x3a>
 800d2a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2a6:	f000 f93a 	bl	800d51e <__retarget_lock_acquire_recursive>
 800d2aa:	4628      	mov	r0, r5
 800d2ac:	4621      	mov	r1, r4
 800d2ae:	f7ff ff59 	bl	800d164 <__sflush_r>
 800d2b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2b4:	07da      	lsls	r2, r3, #31
 800d2b6:	4605      	mov	r5, r0
 800d2b8:	d4e0      	bmi.n	800d27c <_fflush_r+0xc>
 800d2ba:	89a3      	ldrh	r3, [r4, #12]
 800d2bc:	059b      	lsls	r3, r3, #22
 800d2be:	d4dd      	bmi.n	800d27c <_fflush_r+0xc>
 800d2c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2c2:	f000 f92d 	bl	800d520 <__retarget_lock_release_recursive>
 800d2c6:	e7d9      	b.n	800d27c <_fflush_r+0xc>
 800d2c8:	4b05      	ldr	r3, [pc, #20]	; (800d2e0 <_fflush_r+0x70>)
 800d2ca:	429c      	cmp	r4, r3
 800d2cc:	d101      	bne.n	800d2d2 <_fflush_r+0x62>
 800d2ce:	68ac      	ldr	r4, [r5, #8]
 800d2d0:	e7df      	b.n	800d292 <_fflush_r+0x22>
 800d2d2:	4b04      	ldr	r3, [pc, #16]	; (800d2e4 <_fflush_r+0x74>)
 800d2d4:	429c      	cmp	r4, r3
 800d2d6:	bf08      	it	eq
 800d2d8:	68ec      	ldreq	r4, [r5, #12]
 800d2da:	e7da      	b.n	800d292 <_fflush_r+0x22>
 800d2dc:	0800e304 	.word	0x0800e304
 800d2e0:	0800e324 	.word	0x0800e324
 800d2e4:	0800e2e4 	.word	0x0800e2e4

0800d2e8 <std>:
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	b510      	push	{r4, lr}
 800d2ec:	4604      	mov	r4, r0
 800d2ee:	e9c0 3300 	strd	r3, r3, [r0]
 800d2f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d2f6:	6083      	str	r3, [r0, #8]
 800d2f8:	8181      	strh	r1, [r0, #12]
 800d2fa:	6643      	str	r3, [r0, #100]	; 0x64
 800d2fc:	81c2      	strh	r2, [r0, #14]
 800d2fe:	6183      	str	r3, [r0, #24]
 800d300:	4619      	mov	r1, r3
 800d302:	2208      	movs	r2, #8
 800d304:	305c      	adds	r0, #92	; 0x5c
 800d306:	f7ff febf 	bl	800d088 <memset>
 800d30a:	4b05      	ldr	r3, [pc, #20]	; (800d320 <std+0x38>)
 800d30c:	6263      	str	r3, [r4, #36]	; 0x24
 800d30e:	4b05      	ldr	r3, [pc, #20]	; (800d324 <std+0x3c>)
 800d310:	62a3      	str	r3, [r4, #40]	; 0x28
 800d312:	4b05      	ldr	r3, [pc, #20]	; (800d328 <std+0x40>)
 800d314:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d316:	4b05      	ldr	r3, [pc, #20]	; (800d32c <std+0x44>)
 800d318:	6224      	str	r4, [r4, #32]
 800d31a:	6323      	str	r3, [r4, #48]	; 0x30
 800d31c:	bd10      	pop	{r4, pc}
 800d31e:	bf00      	nop
 800d320:	0800ddb9 	.word	0x0800ddb9
 800d324:	0800dddb 	.word	0x0800dddb
 800d328:	0800de13 	.word	0x0800de13
 800d32c:	0800de37 	.word	0x0800de37

0800d330 <_cleanup_r>:
 800d330:	4901      	ldr	r1, [pc, #4]	; (800d338 <_cleanup_r+0x8>)
 800d332:	f000 b8c1 	b.w	800d4b8 <_fwalk_reent>
 800d336:	bf00      	nop
 800d338:	0800d271 	.word	0x0800d271

0800d33c <__sfmoreglue>:
 800d33c:	b570      	push	{r4, r5, r6, lr}
 800d33e:	2268      	movs	r2, #104	; 0x68
 800d340:	1e4d      	subs	r5, r1, #1
 800d342:	4355      	muls	r5, r2
 800d344:	460e      	mov	r6, r1
 800d346:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d34a:	f000 f9c3 	bl	800d6d4 <_malloc_r>
 800d34e:	4604      	mov	r4, r0
 800d350:	b140      	cbz	r0, 800d364 <__sfmoreglue+0x28>
 800d352:	2100      	movs	r1, #0
 800d354:	e9c0 1600 	strd	r1, r6, [r0]
 800d358:	300c      	adds	r0, #12
 800d35a:	60a0      	str	r0, [r4, #8]
 800d35c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d360:	f7ff fe92 	bl	800d088 <memset>
 800d364:	4620      	mov	r0, r4
 800d366:	bd70      	pop	{r4, r5, r6, pc}

0800d368 <__sfp_lock_acquire>:
 800d368:	4801      	ldr	r0, [pc, #4]	; (800d370 <__sfp_lock_acquire+0x8>)
 800d36a:	f000 b8d8 	b.w	800d51e <__retarget_lock_acquire_recursive>
 800d36e:	bf00      	nop
 800d370:	2400157d 	.word	0x2400157d

0800d374 <__sfp_lock_release>:
 800d374:	4801      	ldr	r0, [pc, #4]	; (800d37c <__sfp_lock_release+0x8>)
 800d376:	f000 b8d3 	b.w	800d520 <__retarget_lock_release_recursive>
 800d37a:	bf00      	nop
 800d37c:	2400157d 	.word	0x2400157d

0800d380 <__sinit_lock_acquire>:
 800d380:	4801      	ldr	r0, [pc, #4]	; (800d388 <__sinit_lock_acquire+0x8>)
 800d382:	f000 b8cc 	b.w	800d51e <__retarget_lock_acquire_recursive>
 800d386:	bf00      	nop
 800d388:	2400157e 	.word	0x2400157e

0800d38c <__sinit_lock_release>:
 800d38c:	4801      	ldr	r0, [pc, #4]	; (800d394 <__sinit_lock_release+0x8>)
 800d38e:	f000 b8c7 	b.w	800d520 <__retarget_lock_release_recursive>
 800d392:	bf00      	nop
 800d394:	2400157e 	.word	0x2400157e

0800d398 <__sinit>:
 800d398:	b510      	push	{r4, lr}
 800d39a:	4604      	mov	r4, r0
 800d39c:	f7ff fff0 	bl	800d380 <__sinit_lock_acquire>
 800d3a0:	69a3      	ldr	r3, [r4, #24]
 800d3a2:	b11b      	cbz	r3, 800d3ac <__sinit+0x14>
 800d3a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3a8:	f7ff bff0 	b.w	800d38c <__sinit_lock_release>
 800d3ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d3b0:	6523      	str	r3, [r4, #80]	; 0x50
 800d3b2:	4b13      	ldr	r3, [pc, #76]	; (800d400 <__sinit+0x68>)
 800d3b4:	4a13      	ldr	r2, [pc, #76]	; (800d404 <__sinit+0x6c>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800d3ba:	42a3      	cmp	r3, r4
 800d3bc:	bf04      	itt	eq
 800d3be:	2301      	moveq	r3, #1
 800d3c0:	61a3      	streq	r3, [r4, #24]
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f000 f820 	bl	800d408 <__sfp>
 800d3c8:	6060      	str	r0, [r4, #4]
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	f000 f81c 	bl	800d408 <__sfp>
 800d3d0:	60a0      	str	r0, [r4, #8]
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	f000 f818 	bl	800d408 <__sfp>
 800d3d8:	2200      	movs	r2, #0
 800d3da:	60e0      	str	r0, [r4, #12]
 800d3dc:	2104      	movs	r1, #4
 800d3de:	6860      	ldr	r0, [r4, #4]
 800d3e0:	f7ff ff82 	bl	800d2e8 <std>
 800d3e4:	68a0      	ldr	r0, [r4, #8]
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	2109      	movs	r1, #9
 800d3ea:	f7ff ff7d 	bl	800d2e8 <std>
 800d3ee:	68e0      	ldr	r0, [r4, #12]
 800d3f0:	2202      	movs	r2, #2
 800d3f2:	2112      	movs	r1, #18
 800d3f4:	f7ff ff78 	bl	800d2e8 <std>
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	61a3      	str	r3, [r4, #24]
 800d3fc:	e7d2      	b.n	800d3a4 <__sinit+0xc>
 800d3fe:	bf00      	nop
 800d400:	0800e230 	.word	0x0800e230
 800d404:	0800d331 	.word	0x0800d331

0800d408 <__sfp>:
 800d408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d40a:	4607      	mov	r7, r0
 800d40c:	f7ff ffac 	bl	800d368 <__sfp_lock_acquire>
 800d410:	4b1e      	ldr	r3, [pc, #120]	; (800d48c <__sfp+0x84>)
 800d412:	681e      	ldr	r6, [r3, #0]
 800d414:	69b3      	ldr	r3, [r6, #24]
 800d416:	b913      	cbnz	r3, 800d41e <__sfp+0x16>
 800d418:	4630      	mov	r0, r6
 800d41a:	f7ff ffbd 	bl	800d398 <__sinit>
 800d41e:	3648      	adds	r6, #72	; 0x48
 800d420:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d424:	3b01      	subs	r3, #1
 800d426:	d503      	bpl.n	800d430 <__sfp+0x28>
 800d428:	6833      	ldr	r3, [r6, #0]
 800d42a:	b30b      	cbz	r3, 800d470 <__sfp+0x68>
 800d42c:	6836      	ldr	r6, [r6, #0]
 800d42e:	e7f7      	b.n	800d420 <__sfp+0x18>
 800d430:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d434:	b9d5      	cbnz	r5, 800d46c <__sfp+0x64>
 800d436:	4b16      	ldr	r3, [pc, #88]	; (800d490 <__sfp+0x88>)
 800d438:	60e3      	str	r3, [r4, #12]
 800d43a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d43e:	6665      	str	r5, [r4, #100]	; 0x64
 800d440:	f000 f86c 	bl	800d51c <__retarget_lock_init_recursive>
 800d444:	f7ff ff96 	bl	800d374 <__sfp_lock_release>
 800d448:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d44c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d450:	6025      	str	r5, [r4, #0]
 800d452:	61a5      	str	r5, [r4, #24]
 800d454:	2208      	movs	r2, #8
 800d456:	4629      	mov	r1, r5
 800d458:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d45c:	f7ff fe14 	bl	800d088 <memset>
 800d460:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d464:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d468:	4620      	mov	r0, r4
 800d46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d46c:	3468      	adds	r4, #104	; 0x68
 800d46e:	e7d9      	b.n	800d424 <__sfp+0x1c>
 800d470:	2104      	movs	r1, #4
 800d472:	4638      	mov	r0, r7
 800d474:	f7ff ff62 	bl	800d33c <__sfmoreglue>
 800d478:	4604      	mov	r4, r0
 800d47a:	6030      	str	r0, [r6, #0]
 800d47c:	2800      	cmp	r0, #0
 800d47e:	d1d5      	bne.n	800d42c <__sfp+0x24>
 800d480:	f7ff ff78 	bl	800d374 <__sfp_lock_release>
 800d484:	230c      	movs	r3, #12
 800d486:	603b      	str	r3, [r7, #0]
 800d488:	e7ee      	b.n	800d468 <__sfp+0x60>
 800d48a:	bf00      	nop
 800d48c:	0800e230 	.word	0x0800e230
 800d490:	ffff0001 	.word	0xffff0001

0800d494 <fiprintf>:
 800d494:	b40e      	push	{r1, r2, r3}
 800d496:	b503      	push	{r0, r1, lr}
 800d498:	4601      	mov	r1, r0
 800d49a:	ab03      	add	r3, sp, #12
 800d49c:	4805      	ldr	r0, [pc, #20]	; (800d4b4 <fiprintf+0x20>)
 800d49e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4a2:	6800      	ldr	r0, [r0, #0]
 800d4a4:	9301      	str	r3, [sp, #4]
 800d4a6:	f000 f9b3 	bl	800d810 <_vfiprintf_r>
 800d4aa:	b002      	add	sp, #8
 800d4ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4b0:	b003      	add	sp, #12
 800d4b2:	4770      	bx	lr
 800d4b4:	24000050 	.word	0x24000050

0800d4b8 <_fwalk_reent>:
 800d4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4bc:	4606      	mov	r6, r0
 800d4be:	4688      	mov	r8, r1
 800d4c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d4c4:	2700      	movs	r7, #0
 800d4c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d4ca:	f1b9 0901 	subs.w	r9, r9, #1
 800d4ce:	d505      	bpl.n	800d4dc <_fwalk_reent+0x24>
 800d4d0:	6824      	ldr	r4, [r4, #0]
 800d4d2:	2c00      	cmp	r4, #0
 800d4d4:	d1f7      	bne.n	800d4c6 <_fwalk_reent+0xe>
 800d4d6:	4638      	mov	r0, r7
 800d4d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4dc:	89ab      	ldrh	r3, [r5, #12]
 800d4de:	2b01      	cmp	r3, #1
 800d4e0:	d907      	bls.n	800d4f2 <_fwalk_reent+0x3a>
 800d4e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	d003      	beq.n	800d4f2 <_fwalk_reent+0x3a>
 800d4ea:	4629      	mov	r1, r5
 800d4ec:	4630      	mov	r0, r6
 800d4ee:	47c0      	blx	r8
 800d4f0:	4307      	orrs	r7, r0
 800d4f2:	3568      	adds	r5, #104	; 0x68
 800d4f4:	e7e9      	b.n	800d4ca <_fwalk_reent+0x12>
	...

0800d4f8 <_gettimeofday_r>:
 800d4f8:	b538      	push	{r3, r4, r5, lr}
 800d4fa:	4d07      	ldr	r5, [pc, #28]	; (800d518 <_gettimeofday_r+0x20>)
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	4604      	mov	r4, r0
 800d500:	4608      	mov	r0, r1
 800d502:	4611      	mov	r1, r2
 800d504:	602b      	str	r3, [r5, #0]
 800d506:	f000 fe1b 	bl	800e140 <_gettimeofday>
 800d50a:	1c43      	adds	r3, r0, #1
 800d50c:	d102      	bne.n	800d514 <_gettimeofday_r+0x1c>
 800d50e:	682b      	ldr	r3, [r5, #0]
 800d510:	b103      	cbz	r3, 800d514 <_gettimeofday_r+0x1c>
 800d512:	6023      	str	r3, [r4, #0]
 800d514:	bd38      	pop	{r3, r4, r5, pc}
 800d516:	bf00      	nop
 800d518:	24001588 	.word	0x24001588

0800d51c <__retarget_lock_init_recursive>:
 800d51c:	4770      	bx	lr

0800d51e <__retarget_lock_acquire_recursive>:
 800d51e:	4770      	bx	lr

0800d520 <__retarget_lock_release_recursive>:
 800d520:	4770      	bx	lr

0800d522 <__swhatbuf_r>:
 800d522:	b570      	push	{r4, r5, r6, lr}
 800d524:	460e      	mov	r6, r1
 800d526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d52a:	2900      	cmp	r1, #0
 800d52c:	b096      	sub	sp, #88	; 0x58
 800d52e:	4614      	mov	r4, r2
 800d530:	461d      	mov	r5, r3
 800d532:	da08      	bge.n	800d546 <__swhatbuf_r+0x24>
 800d534:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d538:	2200      	movs	r2, #0
 800d53a:	602a      	str	r2, [r5, #0]
 800d53c:	061a      	lsls	r2, r3, #24
 800d53e:	d410      	bmi.n	800d562 <__swhatbuf_r+0x40>
 800d540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d544:	e00e      	b.n	800d564 <__swhatbuf_r+0x42>
 800d546:	466a      	mov	r2, sp
 800d548:	f000 fd64 	bl	800e014 <_fstat_r>
 800d54c:	2800      	cmp	r0, #0
 800d54e:	dbf1      	blt.n	800d534 <__swhatbuf_r+0x12>
 800d550:	9a01      	ldr	r2, [sp, #4]
 800d552:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d556:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d55a:	425a      	negs	r2, r3
 800d55c:	415a      	adcs	r2, r3
 800d55e:	602a      	str	r2, [r5, #0]
 800d560:	e7ee      	b.n	800d540 <__swhatbuf_r+0x1e>
 800d562:	2340      	movs	r3, #64	; 0x40
 800d564:	2000      	movs	r0, #0
 800d566:	6023      	str	r3, [r4, #0]
 800d568:	b016      	add	sp, #88	; 0x58
 800d56a:	bd70      	pop	{r4, r5, r6, pc}

0800d56c <__smakebuf_r>:
 800d56c:	898b      	ldrh	r3, [r1, #12]
 800d56e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d570:	079d      	lsls	r5, r3, #30
 800d572:	4606      	mov	r6, r0
 800d574:	460c      	mov	r4, r1
 800d576:	d507      	bpl.n	800d588 <__smakebuf_r+0x1c>
 800d578:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d57c:	6023      	str	r3, [r4, #0]
 800d57e:	6123      	str	r3, [r4, #16]
 800d580:	2301      	movs	r3, #1
 800d582:	6163      	str	r3, [r4, #20]
 800d584:	b002      	add	sp, #8
 800d586:	bd70      	pop	{r4, r5, r6, pc}
 800d588:	ab01      	add	r3, sp, #4
 800d58a:	466a      	mov	r2, sp
 800d58c:	f7ff ffc9 	bl	800d522 <__swhatbuf_r>
 800d590:	9900      	ldr	r1, [sp, #0]
 800d592:	4605      	mov	r5, r0
 800d594:	4630      	mov	r0, r6
 800d596:	f000 f89d 	bl	800d6d4 <_malloc_r>
 800d59a:	b948      	cbnz	r0, 800d5b0 <__smakebuf_r+0x44>
 800d59c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5a0:	059a      	lsls	r2, r3, #22
 800d5a2:	d4ef      	bmi.n	800d584 <__smakebuf_r+0x18>
 800d5a4:	f023 0303 	bic.w	r3, r3, #3
 800d5a8:	f043 0302 	orr.w	r3, r3, #2
 800d5ac:	81a3      	strh	r3, [r4, #12]
 800d5ae:	e7e3      	b.n	800d578 <__smakebuf_r+0xc>
 800d5b0:	4b0d      	ldr	r3, [pc, #52]	; (800d5e8 <__smakebuf_r+0x7c>)
 800d5b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800d5b4:	89a3      	ldrh	r3, [r4, #12]
 800d5b6:	6020      	str	r0, [r4, #0]
 800d5b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5bc:	81a3      	strh	r3, [r4, #12]
 800d5be:	9b00      	ldr	r3, [sp, #0]
 800d5c0:	6163      	str	r3, [r4, #20]
 800d5c2:	9b01      	ldr	r3, [sp, #4]
 800d5c4:	6120      	str	r0, [r4, #16]
 800d5c6:	b15b      	cbz	r3, 800d5e0 <__smakebuf_r+0x74>
 800d5c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5cc:	4630      	mov	r0, r6
 800d5ce:	f000 fd33 	bl	800e038 <_isatty_r>
 800d5d2:	b128      	cbz	r0, 800d5e0 <__smakebuf_r+0x74>
 800d5d4:	89a3      	ldrh	r3, [r4, #12]
 800d5d6:	f023 0303 	bic.w	r3, r3, #3
 800d5da:	f043 0301 	orr.w	r3, r3, #1
 800d5de:	81a3      	strh	r3, [r4, #12]
 800d5e0:	89a0      	ldrh	r0, [r4, #12]
 800d5e2:	4305      	orrs	r5, r0
 800d5e4:	81a5      	strh	r5, [r4, #12]
 800d5e6:	e7cd      	b.n	800d584 <__smakebuf_r+0x18>
 800d5e8:	0800d331 	.word	0x0800d331

0800d5ec <malloc>:
 800d5ec:	4b02      	ldr	r3, [pc, #8]	; (800d5f8 <malloc+0xc>)
 800d5ee:	4601      	mov	r1, r0
 800d5f0:	6818      	ldr	r0, [r3, #0]
 800d5f2:	f000 b86f 	b.w	800d6d4 <_malloc_r>
 800d5f6:	bf00      	nop
 800d5f8:	24000050 	.word	0x24000050

0800d5fc <_free_r>:
 800d5fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5fe:	2900      	cmp	r1, #0
 800d600:	d044      	beq.n	800d68c <_free_r+0x90>
 800d602:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d606:	9001      	str	r0, [sp, #4]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	f1a1 0404 	sub.w	r4, r1, #4
 800d60e:	bfb8      	it	lt
 800d610:	18e4      	addlt	r4, r4, r3
 800d612:	f000 fd33 	bl	800e07c <__malloc_lock>
 800d616:	4a1e      	ldr	r2, [pc, #120]	; (800d690 <_free_r+0x94>)
 800d618:	9801      	ldr	r0, [sp, #4]
 800d61a:	6813      	ldr	r3, [r2, #0]
 800d61c:	b933      	cbnz	r3, 800d62c <_free_r+0x30>
 800d61e:	6063      	str	r3, [r4, #4]
 800d620:	6014      	str	r4, [r2, #0]
 800d622:	b003      	add	sp, #12
 800d624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d628:	f000 bd2e 	b.w	800e088 <__malloc_unlock>
 800d62c:	42a3      	cmp	r3, r4
 800d62e:	d908      	bls.n	800d642 <_free_r+0x46>
 800d630:	6825      	ldr	r5, [r4, #0]
 800d632:	1961      	adds	r1, r4, r5
 800d634:	428b      	cmp	r3, r1
 800d636:	bf01      	itttt	eq
 800d638:	6819      	ldreq	r1, [r3, #0]
 800d63a:	685b      	ldreq	r3, [r3, #4]
 800d63c:	1949      	addeq	r1, r1, r5
 800d63e:	6021      	streq	r1, [r4, #0]
 800d640:	e7ed      	b.n	800d61e <_free_r+0x22>
 800d642:	461a      	mov	r2, r3
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	b10b      	cbz	r3, 800d64c <_free_r+0x50>
 800d648:	42a3      	cmp	r3, r4
 800d64a:	d9fa      	bls.n	800d642 <_free_r+0x46>
 800d64c:	6811      	ldr	r1, [r2, #0]
 800d64e:	1855      	adds	r5, r2, r1
 800d650:	42a5      	cmp	r5, r4
 800d652:	d10b      	bne.n	800d66c <_free_r+0x70>
 800d654:	6824      	ldr	r4, [r4, #0]
 800d656:	4421      	add	r1, r4
 800d658:	1854      	adds	r4, r2, r1
 800d65a:	42a3      	cmp	r3, r4
 800d65c:	6011      	str	r1, [r2, #0]
 800d65e:	d1e0      	bne.n	800d622 <_free_r+0x26>
 800d660:	681c      	ldr	r4, [r3, #0]
 800d662:	685b      	ldr	r3, [r3, #4]
 800d664:	6053      	str	r3, [r2, #4]
 800d666:	4421      	add	r1, r4
 800d668:	6011      	str	r1, [r2, #0]
 800d66a:	e7da      	b.n	800d622 <_free_r+0x26>
 800d66c:	d902      	bls.n	800d674 <_free_r+0x78>
 800d66e:	230c      	movs	r3, #12
 800d670:	6003      	str	r3, [r0, #0]
 800d672:	e7d6      	b.n	800d622 <_free_r+0x26>
 800d674:	6825      	ldr	r5, [r4, #0]
 800d676:	1961      	adds	r1, r4, r5
 800d678:	428b      	cmp	r3, r1
 800d67a:	bf04      	itt	eq
 800d67c:	6819      	ldreq	r1, [r3, #0]
 800d67e:	685b      	ldreq	r3, [r3, #4]
 800d680:	6063      	str	r3, [r4, #4]
 800d682:	bf04      	itt	eq
 800d684:	1949      	addeq	r1, r1, r5
 800d686:	6021      	streq	r1, [r4, #0]
 800d688:	6054      	str	r4, [r2, #4]
 800d68a:	e7ca      	b.n	800d622 <_free_r+0x26>
 800d68c:	b003      	add	sp, #12
 800d68e:	bd30      	pop	{r4, r5, pc}
 800d690:	24001580 	.word	0x24001580

0800d694 <sbrk_aligned>:
 800d694:	b570      	push	{r4, r5, r6, lr}
 800d696:	4e0e      	ldr	r6, [pc, #56]	; (800d6d0 <sbrk_aligned+0x3c>)
 800d698:	460c      	mov	r4, r1
 800d69a:	6831      	ldr	r1, [r6, #0]
 800d69c:	4605      	mov	r5, r0
 800d69e:	b911      	cbnz	r1, 800d6a6 <sbrk_aligned+0x12>
 800d6a0:	f000 fb7a 	bl	800dd98 <_sbrk_r>
 800d6a4:	6030      	str	r0, [r6, #0]
 800d6a6:	4621      	mov	r1, r4
 800d6a8:	4628      	mov	r0, r5
 800d6aa:	f000 fb75 	bl	800dd98 <_sbrk_r>
 800d6ae:	1c43      	adds	r3, r0, #1
 800d6b0:	d00a      	beq.n	800d6c8 <sbrk_aligned+0x34>
 800d6b2:	1cc4      	adds	r4, r0, #3
 800d6b4:	f024 0403 	bic.w	r4, r4, #3
 800d6b8:	42a0      	cmp	r0, r4
 800d6ba:	d007      	beq.n	800d6cc <sbrk_aligned+0x38>
 800d6bc:	1a21      	subs	r1, r4, r0
 800d6be:	4628      	mov	r0, r5
 800d6c0:	f000 fb6a 	bl	800dd98 <_sbrk_r>
 800d6c4:	3001      	adds	r0, #1
 800d6c6:	d101      	bne.n	800d6cc <sbrk_aligned+0x38>
 800d6c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d6cc:	4620      	mov	r0, r4
 800d6ce:	bd70      	pop	{r4, r5, r6, pc}
 800d6d0:	24001584 	.word	0x24001584

0800d6d4 <_malloc_r>:
 800d6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6d8:	1ccd      	adds	r5, r1, #3
 800d6da:	f025 0503 	bic.w	r5, r5, #3
 800d6de:	3508      	adds	r5, #8
 800d6e0:	2d0c      	cmp	r5, #12
 800d6e2:	bf38      	it	cc
 800d6e4:	250c      	movcc	r5, #12
 800d6e6:	2d00      	cmp	r5, #0
 800d6e8:	4607      	mov	r7, r0
 800d6ea:	db01      	blt.n	800d6f0 <_malloc_r+0x1c>
 800d6ec:	42a9      	cmp	r1, r5
 800d6ee:	d905      	bls.n	800d6fc <_malloc_r+0x28>
 800d6f0:	230c      	movs	r3, #12
 800d6f2:	603b      	str	r3, [r7, #0]
 800d6f4:	2600      	movs	r6, #0
 800d6f6:	4630      	mov	r0, r6
 800d6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6fc:	4e2e      	ldr	r6, [pc, #184]	; (800d7b8 <_malloc_r+0xe4>)
 800d6fe:	f000 fcbd 	bl	800e07c <__malloc_lock>
 800d702:	6833      	ldr	r3, [r6, #0]
 800d704:	461c      	mov	r4, r3
 800d706:	bb34      	cbnz	r4, 800d756 <_malloc_r+0x82>
 800d708:	4629      	mov	r1, r5
 800d70a:	4638      	mov	r0, r7
 800d70c:	f7ff ffc2 	bl	800d694 <sbrk_aligned>
 800d710:	1c43      	adds	r3, r0, #1
 800d712:	4604      	mov	r4, r0
 800d714:	d14d      	bne.n	800d7b2 <_malloc_r+0xde>
 800d716:	6834      	ldr	r4, [r6, #0]
 800d718:	4626      	mov	r6, r4
 800d71a:	2e00      	cmp	r6, #0
 800d71c:	d140      	bne.n	800d7a0 <_malloc_r+0xcc>
 800d71e:	6823      	ldr	r3, [r4, #0]
 800d720:	4631      	mov	r1, r6
 800d722:	4638      	mov	r0, r7
 800d724:	eb04 0803 	add.w	r8, r4, r3
 800d728:	f000 fb36 	bl	800dd98 <_sbrk_r>
 800d72c:	4580      	cmp	r8, r0
 800d72e:	d13a      	bne.n	800d7a6 <_malloc_r+0xd2>
 800d730:	6821      	ldr	r1, [r4, #0]
 800d732:	3503      	adds	r5, #3
 800d734:	1a6d      	subs	r5, r5, r1
 800d736:	f025 0503 	bic.w	r5, r5, #3
 800d73a:	3508      	adds	r5, #8
 800d73c:	2d0c      	cmp	r5, #12
 800d73e:	bf38      	it	cc
 800d740:	250c      	movcc	r5, #12
 800d742:	4629      	mov	r1, r5
 800d744:	4638      	mov	r0, r7
 800d746:	f7ff ffa5 	bl	800d694 <sbrk_aligned>
 800d74a:	3001      	adds	r0, #1
 800d74c:	d02b      	beq.n	800d7a6 <_malloc_r+0xd2>
 800d74e:	6823      	ldr	r3, [r4, #0]
 800d750:	442b      	add	r3, r5
 800d752:	6023      	str	r3, [r4, #0]
 800d754:	e00e      	b.n	800d774 <_malloc_r+0xa0>
 800d756:	6822      	ldr	r2, [r4, #0]
 800d758:	1b52      	subs	r2, r2, r5
 800d75a:	d41e      	bmi.n	800d79a <_malloc_r+0xc6>
 800d75c:	2a0b      	cmp	r2, #11
 800d75e:	d916      	bls.n	800d78e <_malloc_r+0xba>
 800d760:	1961      	adds	r1, r4, r5
 800d762:	42a3      	cmp	r3, r4
 800d764:	6025      	str	r5, [r4, #0]
 800d766:	bf18      	it	ne
 800d768:	6059      	strne	r1, [r3, #4]
 800d76a:	6863      	ldr	r3, [r4, #4]
 800d76c:	bf08      	it	eq
 800d76e:	6031      	streq	r1, [r6, #0]
 800d770:	5162      	str	r2, [r4, r5]
 800d772:	604b      	str	r3, [r1, #4]
 800d774:	4638      	mov	r0, r7
 800d776:	f104 060b 	add.w	r6, r4, #11
 800d77a:	f000 fc85 	bl	800e088 <__malloc_unlock>
 800d77e:	f026 0607 	bic.w	r6, r6, #7
 800d782:	1d23      	adds	r3, r4, #4
 800d784:	1af2      	subs	r2, r6, r3
 800d786:	d0b6      	beq.n	800d6f6 <_malloc_r+0x22>
 800d788:	1b9b      	subs	r3, r3, r6
 800d78a:	50a3      	str	r3, [r4, r2]
 800d78c:	e7b3      	b.n	800d6f6 <_malloc_r+0x22>
 800d78e:	6862      	ldr	r2, [r4, #4]
 800d790:	42a3      	cmp	r3, r4
 800d792:	bf0c      	ite	eq
 800d794:	6032      	streq	r2, [r6, #0]
 800d796:	605a      	strne	r2, [r3, #4]
 800d798:	e7ec      	b.n	800d774 <_malloc_r+0xa0>
 800d79a:	4623      	mov	r3, r4
 800d79c:	6864      	ldr	r4, [r4, #4]
 800d79e:	e7b2      	b.n	800d706 <_malloc_r+0x32>
 800d7a0:	4634      	mov	r4, r6
 800d7a2:	6876      	ldr	r6, [r6, #4]
 800d7a4:	e7b9      	b.n	800d71a <_malloc_r+0x46>
 800d7a6:	230c      	movs	r3, #12
 800d7a8:	603b      	str	r3, [r7, #0]
 800d7aa:	4638      	mov	r0, r7
 800d7ac:	f000 fc6c 	bl	800e088 <__malloc_unlock>
 800d7b0:	e7a1      	b.n	800d6f6 <_malloc_r+0x22>
 800d7b2:	6025      	str	r5, [r4, #0]
 800d7b4:	e7de      	b.n	800d774 <_malloc_r+0xa0>
 800d7b6:	bf00      	nop
 800d7b8:	24001580 	.word	0x24001580

0800d7bc <__sfputc_r>:
 800d7bc:	6893      	ldr	r3, [r2, #8]
 800d7be:	3b01      	subs	r3, #1
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	b410      	push	{r4}
 800d7c4:	6093      	str	r3, [r2, #8]
 800d7c6:	da08      	bge.n	800d7da <__sfputc_r+0x1e>
 800d7c8:	6994      	ldr	r4, [r2, #24]
 800d7ca:	42a3      	cmp	r3, r4
 800d7cc:	db01      	blt.n	800d7d2 <__sfputc_r+0x16>
 800d7ce:	290a      	cmp	r1, #10
 800d7d0:	d103      	bne.n	800d7da <__sfputc_r+0x1e>
 800d7d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7d6:	f000 bb33 	b.w	800de40 <__swbuf_r>
 800d7da:	6813      	ldr	r3, [r2, #0]
 800d7dc:	1c58      	adds	r0, r3, #1
 800d7de:	6010      	str	r0, [r2, #0]
 800d7e0:	7019      	strb	r1, [r3, #0]
 800d7e2:	4608      	mov	r0, r1
 800d7e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7e8:	4770      	bx	lr

0800d7ea <__sfputs_r>:
 800d7ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ec:	4606      	mov	r6, r0
 800d7ee:	460f      	mov	r7, r1
 800d7f0:	4614      	mov	r4, r2
 800d7f2:	18d5      	adds	r5, r2, r3
 800d7f4:	42ac      	cmp	r4, r5
 800d7f6:	d101      	bne.n	800d7fc <__sfputs_r+0x12>
 800d7f8:	2000      	movs	r0, #0
 800d7fa:	e007      	b.n	800d80c <__sfputs_r+0x22>
 800d7fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d800:	463a      	mov	r2, r7
 800d802:	4630      	mov	r0, r6
 800d804:	f7ff ffda 	bl	800d7bc <__sfputc_r>
 800d808:	1c43      	adds	r3, r0, #1
 800d80a:	d1f3      	bne.n	800d7f4 <__sfputs_r+0xa>
 800d80c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d810 <_vfiprintf_r>:
 800d810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d814:	460d      	mov	r5, r1
 800d816:	b09d      	sub	sp, #116	; 0x74
 800d818:	4614      	mov	r4, r2
 800d81a:	4698      	mov	r8, r3
 800d81c:	4606      	mov	r6, r0
 800d81e:	b118      	cbz	r0, 800d828 <_vfiprintf_r+0x18>
 800d820:	6983      	ldr	r3, [r0, #24]
 800d822:	b90b      	cbnz	r3, 800d828 <_vfiprintf_r+0x18>
 800d824:	f7ff fdb8 	bl	800d398 <__sinit>
 800d828:	4b89      	ldr	r3, [pc, #548]	; (800da50 <_vfiprintf_r+0x240>)
 800d82a:	429d      	cmp	r5, r3
 800d82c:	d11b      	bne.n	800d866 <_vfiprintf_r+0x56>
 800d82e:	6875      	ldr	r5, [r6, #4]
 800d830:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d832:	07d9      	lsls	r1, r3, #31
 800d834:	d405      	bmi.n	800d842 <_vfiprintf_r+0x32>
 800d836:	89ab      	ldrh	r3, [r5, #12]
 800d838:	059a      	lsls	r2, r3, #22
 800d83a:	d402      	bmi.n	800d842 <_vfiprintf_r+0x32>
 800d83c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d83e:	f7ff fe6e 	bl	800d51e <__retarget_lock_acquire_recursive>
 800d842:	89ab      	ldrh	r3, [r5, #12]
 800d844:	071b      	lsls	r3, r3, #28
 800d846:	d501      	bpl.n	800d84c <_vfiprintf_r+0x3c>
 800d848:	692b      	ldr	r3, [r5, #16]
 800d84a:	b9eb      	cbnz	r3, 800d888 <_vfiprintf_r+0x78>
 800d84c:	4629      	mov	r1, r5
 800d84e:	4630      	mov	r0, r6
 800d850:	f000 fb5a 	bl	800df08 <__swsetup_r>
 800d854:	b1c0      	cbz	r0, 800d888 <_vfiprintf_r+0x78>
 800d856:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d858:	07dc      	lsls	r4, r3, #31
 800d85a:	d50e      	bpl.n	800d87a <_vfiprintf_r+0x6a>
 800d85c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d860:	b01d      	add	sp, #116	; 0x74
 800d862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d866:	4b7b      	ldr	r3, [pc, #492]	; (800da54 <_vfiprintf_r+0x244>)
 800d868:	429d      	cmp	r5, r3
 800d86a:	d101      	bne.n	800d870 <_vfiprintf_r+0x60>
 800d86c:	68b5      	ldr	r5, [r6, #8]
 800d86e:	e7df      	b.n	800d830 <_vfiprintf_r+0x20>
 800d870:	4b79      	ldr	r3, [pc, #484]	; (800da58 <_vfiprintf_r+0x248>)
 800d872:	429d      	cmp	r5, r3
 800d874:	bf08      	it	eq
 800d876:	68f5      	ldreq	r5, [r6, #12]
 800d878:	e7da      	b.n	800d830 <_vfiprintf_r+0x20>
 800d87a:	89ab      	ldrh	r3, [r5, #12]
 800d87c:	0598      	lsls	r0, r3, #22
 800d87e:	d4ed      	bmi.n	800d85c <_vfiprintf_r+0x4c>
 800d880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d882:	f7ff fe4d 	bl	800d520 <__retarget_lock_release_recursive>
 800d886:	e7e9      	b.n	800d85c <_vfiprintf_r+0x4c>
 800d888:	2300      	movs	r3, #0
 800d88a:	9309      	str	r3, [sp, #36]	; 0x24
 800d88c:	2320      	movs	r3, #32
 800d88e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d892:	f8cd 800c 	str.w	r8, [sp, #12]
 800d896:	2330      	movs	r3, #48	; 0x30
 800d898:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800da5c <_vfiprintf_r+0x24c>
 800d89c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8a0:	f04f 0901 	mov.w	r9, #1
 800d8a4:	4623      	mov	r3, r4
 800d8a6:	469a      	mov	sl, r3
 800d8a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8ac:	b10a      	cbz	r2, 800d8b2 <_vfiprintf_r+0xa2>
 800d8ae:	2a25      	cmp	r2, #37	; 0x25
 800d8b0:	d1f9      	bne.n	800d8a6 <_vfiprintf_r+0x96>
 800d8b2:	ebba 0b04 	subs.w	fp, sl, r4
 800d8b6:	d00b      	beq.n	800d8d0 <_vfiprintf_r+0xc0>
 800d8b8:	465b      	mov	r3, fp
 800d8ba:	4622      	mov	r2, r4
 800d8bc:	4629      	mov	r1, r5
 800d8be:	4630      	mov	r0, r6
 800d8c0:	f7ff ff93 	bl	800d7ea <__sfputs_r>
 800d8c4:	3001      	adds	r0, #1
 800d8c6:	f000 80aa 	beq.w	800da1e <_vfiprintf_r+0x20e>
 800d8ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8cc:	445a      	add	r2, fp
 800d8ce:	9209      	str	r2, [sp, #36]	; 0x24
 800d8d0:	f89a 3000 	ldrb.w	r3, [sl]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	f000 80a2 	beq.w	800da1e <_vfiprintf_r+0x20e>
 800d8da:	2300      	movs	r3, #0
 800d8dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d8e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8e4:	f10a 0a01 	add.w	sl, sl, #1
 800d8e8:	9304      	str	r3, [sp, #16]
 800d8ea:	9307      	str	r3, [sp, #28]
 800d8ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8f0:	931a      	str	r3, [sp, #104]	; 0x68
 800d8f2:	4654      	mov	r4, sl
 800d8f4:	2205      	movs	r2, #5
 800d8f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8fa:	4858      	ldr	r0, [pc, #352]	; (800da5c <_vfiprintf_r+0x24c>)
 800d8fc:	f7f2 fcf0 	bl	80002e0 <memchr>
 800d900:	9a04      	ldr	r2, [sp, #16]
 800d902:	b9d8      	cbnz	r0, 800d93c <_vfiprintf_r+0x12c>
 800d904:	06d1      	lsls	r1, r2, #27
 800d906:	bf44      	itt	mi
 800d908:	2320      	movmi	r3, #32
 800d90a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d90e:	0713      	lsls	r3, r2, #28
 800d910:	bf44      	itt	mi
 800d912:	232b      	movmi	r3, #43	; 0x2b
 800d914:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d918:	f89a 3000 	ldrb.w	r3, [sl]
 800d91c:	2b2a      	cmp	r3, #42	; 0x2a
 800d91e:	d015      	beq.n	800d94c <_vfiprintf_r+0x13c>
 800d920:	9a07      	ldr	r2, [sp, #28]
 800d922:	4654      	mov	r4, sl
 800d924:	2000      	movs	r0, #0
 800d926:	f04f 0c0a 	mov.w	ip, #10
 800d92a:	4621      	mov	r1, r4
 800d92c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d930:	3b30      	subs	r3, #48	; 0x30
 800d932:	2b09      	cmp	r3, #9
 800d934:	d94e      	bls.n	800d9d4 <_vfiprintf_r+0x1c4>
 800d936:	b1b0      	cbz	r0, 800d966 <_vfiprintf_r+0x156>
 800d938:	9207      	str	r2, [sp, #28]
 800d93a:	e014      	b.n	800d966 <_vfiprintf_r+0x156>
 800d93c:	eba0 0308 	sub.w	r3, r0, r8
 800d940:	fa09 f303 	lsl.w	r3, r9, r3
 800d944:	4313      	orrs	r3, r2
 800d946:	9304      	str	r3, [sp, #16]
 800d948:	46a2      	mov	sl, r4
 800d94a:	e7d2      	b.n	800d8f2 <_vfiprintf_r+0xe2>
 800d94c:	9b03      	ldr	r3, [sp, #12]
 800d94e:	1d19      	adds	r1, r3, #4
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	9103      	str	r1, [sp, #12]
 800d954:	2b00      	cmp	r3, #0
 800d956:	bfbb      	ittet	lt
 800d958:	425b      	neglt	r3, r3
 800d95a:	f042 0202 	orrlt.w	r2, r2, #2
 800d95e:	9307      	strge	r3, [sp, #28]
 800d960:	9307      	strlt	r3, [sp, #28]
 800d962:	bfb8      	it	lt
 800d964:	9204      	strlt	r2, [sp, #16]
 800d966:	7823      	ldrb	r3, [r4, #0]
 800d968:	2b2e      	cmp	r3, #46	; 0x2e
 800d96a:	d10c      	bne.n	800d986 <_vfiprintf_r+0x176>
 800d96c:	7863      	ldrb	r3, [r4, #1]
 800d96e:	2b2a      	cmp	r3, #42	; 0x2a
 800d970:	d135      	bne.n	800d9de <_vfiprintf_r+0x1ce>
 800d972:	9b03      	ldr	r3, [sp, #12]
 800d974:	1d1a      	adds	r2, r3, #4
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	9203      	str	r2, [sp, #12]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	bfb8      	it	lt
 800d97e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d982:	3402      	adds	r4, #2
 800d984:	9305      	str	r3, [sp, #20]
 800d986:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800da6c <_vfiprintf_r+0x25c>
 800d98a:	7821      	ldrb	r1, [r4, #0]
 800d98c:	2203      	movs	r2, #3
 800d98e:	4650      	mov	r0, sl
 800d990:	f7f2 fca6 	bl	80002e0 <memchr>
 800d994:	b140      	cbz	r0, 800d9a8 <_vfiprintf_r+0x198>
 800d996:	2340      	movs	r3, #64	; 0x40
 800d998:	eba0 000a 	sub.w	r0, r0, sl
 800d99c:	fa03 f000 	lsl.w	r0, r3, r0
 800d9a0:	9b04      	ldr	r3, [sp, #16]
 800d9a2:	4303      	orrs	r3, r0
 800d9a4:	3401      	adds	r4, #1
 800d9a6:	9304      	str	r3, [sp, #16]
 800d9a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9ac:	482c      	ldr	r0, [pc, #176]	; (800da60 <_vfiprintf_r+0x250>)
 800d9ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9b2:	2206      	movs	r2, #6
 800d9b4:	f7f2 fc94 	bl	80002e0 <memchr>
 800d9b8:	2800      	cmp	r0, #0
 800d9ba:	d03f      	beq.n	800da3c <_vfiprintf_r+0x22c>
 800d9bc:	4b29      	ldr	r3, [pc, #164]	; (800da64 <_vfiprintf_r+0x254>)
 800d9be:	bb1b      	cbnz	r3, 800da08 <_vfiprintf_r+0x1f8>
 800d9c0:	9b03      	ldr	r3, [sp, #12]
 800d9c2:	3307      	adds	r3, #7
 800d9c4:	f023 0307 	bic.w	r3, r3, #7
 800d9c8:	3308      	adds	r3, #8
 800d9ca:	9303      	str	r3, [sp, #12]
 800d9cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9ce:	443b      	add	r3, r7
 800d9d0:	9309      	str	r3, [sp, #36]	; 0x24
 800d9d2:	e767      	b.n	800d8a4 <_vfiprintf_r+0x94>
 800d9d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9d8:	460c      	mov	r4, r1
 800d9da:	2001      	movs	r0, #1
 800d9dc:	e7a5      	b.n	800d92a <_vfiprintf_r+0x11a>
 800d9de:	2300      	movs	r3, #0
 800d9e0:	3401      	adds	r4, #1
 800d9e2:	9305      	str	r3, [sp, #20]
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	f04f 0c0a 	mov.w	ip, #10
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9f0:	3a30      	subs	r2, #48	; 0x30
 800d9f2:	2a09      	cmp	r2, #9
 800d9f4:	d903      	bls.n	800d9fe <_vfiprintf_r+0x1ee>
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d0c5      	beq.n	800d986 <_vfiprintf_r+0x176>
 800d9fa:	9105      	str	r1, [sp, #20]
 800d9fc:	e7c3      	b.n	800d986 <_vfiprintf_r+0x176>
 800d9fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800da02:	4604      	mov	r4, r0
 800da04:	2301      	movs	r3, #1
 800da06:	e7f0      	b.n	800d9ea <_vfiprintf_r+0x1da>
 800da08:	ab03      	add	r3, sp, #12
 800da0a:	9300      	str	r3, [sp, #0]
 800da0c:	462a      	mov	r2, r5
 800da0e:	4b16      	ldr	r3, [pc, #88]	; (800da68 <_vfiprintf_r+0x258>)
 800da10:	a904      	add	r1, sp, #16
 800da12:	4630      	mov	r0, r6
 800da14:	f3af 8000 	nop.w
 800da18:	4607      	mov	r7, r0
 800da1a:	1c78      	adds	r0, r7, #1
 800da1c:	d1d6      	bne.n	800d9cc <_vfiprintf_r+0x1bc>
 800da1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da20:	07d9      	lsls	r1, r3, #31
 800da22:	d405      	bmi.n	800da30 <_vfiprintf_r+0x220>
 800da24:	89ab      	ldrh	r3, [r5, #12]
 800da26:	059a      	lsls	r2, r3, #22
 800da28:	d402      	bmi.n	800da30 <_vfiprintf_r+0x220>
 800da2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da2c:	f7ff fd78 	bl	800d520 <__retarget_lock_release_recursive>
 800da30:	89ab      	ldrh	r3, [r5, #12]
 800da32:	065b      	lsls	r3, r3, #25
 800da34:	f53f af12 	bmi.w	800d85c <_vfiprintf_r+0x4c>
 800da38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da3a:	e711      	b.n	800d860 <_vfiprintf_r+0x50>
 800da3c:	ab03      	add	r3, sp, #12
 800da3e:	9300      	str	r3, [sp, #0]
 800da40:	462a      	mov	r2, r5
 800da42:	4b09      	ldr	r3, [pc, #36]	; (800da68 <_vfiprintf_r+0x258>)
 800da44:	a904      	add	r1, sp, #16
 800da46:	4630      	mov	r0, r6
 800da48:	f000 f880 	bl	800db4c <_printf_i>
 800da4c:	e7e4      	b.n	800da18 <_vfiprintf_r+0x208>
 800da4e:	bf00      	nop
 800da50:	0800e304 	.word	0x0800e304
 800da54:	0800e324 	.word	0x0800e324
 800da58:	0800e2e4 	.word	0x0800e2e4
 800da5c:	0800e344 	.word	0x0800e344
 800da60:	0800e34e 	.word	0x0800e34e
 800da64:	00000000 	.word	0x00000000
 800da68:	0800d7eb 	.word	0x0800d7eb
 800da6c:	0800e34a 	.word	0x0800e34a

0800da70 <_printf_common>:
 800da70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da74:	4616      	mov	r6, r2
 800da76:	4699      	mov	r9, r3
 800da78:	688a      	ldr	r2, [r1, #8]
 800da7a:	690b      	ldr	r3, [r1, #16]
 800da7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da80:	4293      	cmp	r3, r2
 800da82:	bfb8      	it	lt
 800da84:	4613      	movlt	r3, r2
 800da86:	6033      	str	r3, [r6, #0]
 800da88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da8c:	4607      	mov	r7, r0
 800da8e:	460c      	mov	r4, r1
 800da90:	b10a      	cbz	r2, 800da96 <_printf_common+0x26>
 800da92:	3301      	adds	r3, #1
 800da94:	6033      	str	r3, [r6, #0]
 800da96:	6823      	ldr	r3, [r4, #0]
 800da98:	0699      	lsls	r1, r3, #26
 800da9a:	bf42      	ittt	mi
 800da9c:	6833      	ldrmi	r3, [r6, #0]
 800da9e:	3302      	addmi	r3, #2
 800daa0:	6033      	strmi	r3, [r6, #0]
 800daa2:	6825      	ldr	r5, [r4, #0]
 800daa4:	f015 0506 	ands.w	r5, r5, #6
 800daa8:	d106      	bne.n	800dab8 <_printf_common+0x48>
 800daaa:	f104 0a19 	add.w	sl, r4, #25
 800daae:	68e3      	ldr	r3, [r4, #12]
 800dab0:	6832      	ldr	r2, [r6, #0]
 800dab2:	1a9b      	subs	r3, r3, r2
 800dab4:	42ab      	cmp	r3, r5
 800dab6:	dc26      	bgt.n	800db06 <_printf_common+0x96>
 800dab8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dabc:	1e13      	subs	r3, r2, #0
 800dabe:	6822      	ldr	r2, [r4, #0]
 800dac0:	bf18      	it	ne
 800dac2:	2301      	movne	r3, #1
 800dac4:	0692      	lsls	r2, r2, #26
 800dac6:	d42b      	bmi.n	800db20 <_printf_common+0xb0>
 800dac8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dacc:	4649      	mov	r1, r9
 800dace:	4638      	mov	r0, r7
 800dad0:	47c0      	blx	r8
 800dad2:	3001      	adds	r0, #1
 800dad4:	d01e      	beq.n	800db14 <_printf_common+0xa4>
 800dad6:	6823      	ldr	r3, [r4, #0]
 800dad8:	68e5      	ldr	r5, [r4, #12]
 800dada:	6832      	ldr	r2, [r6, #0]
 800dadc:	f003 0306 	and.w	r3, r3, #6
 800dae0:	2b04      	cmp	r3, #4
 800dae2:	bf08      	it	eq
 800dae4:	1aad      	subeq	r5, r5, r2
 800dae6:	68a3      	ldr	r3, [r4, #8]
 800dae8:	6922      	ldr	r2, [r4, #16]
 800daea:	bf0c      	ite	eq
 800daec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800daf0:	2500      	movne	r5, #0
 800daf2:	4293      	cmp	r3, r2
 800daf4:	bfc4      	itt	gt
 800daf6:	1a9b      	subgt	r3, r3, r2
 800daf8:	18ed      	addgt	r5, r5, r3
 800dafa:	2600      	movs	r6, #0
 800dafc:	341a      	adds	r4, #26
 800dafe:	42b5      	cmp	r5, r6
 800db00:	d11a      	bne.n	800db38 <_printf_common+0xc8>
 800db02:	2000      	movs	r0, #0
 800db04:	e008      	b.n	800db18 <_printf_common+0xa8>
 800db06:	2301      	movs	r3, #1
 800db08:	4652      	mov	r2, sl
 800db0a:	4649      	mov	r1, r9
 800db0c:	4638      	mov	r0, r7
 800db0e:	47c0      	blx	r8
 800db10:	3001      	adds	r0, #1
 800db12:	d103      	bne.n	800db1c <_printf_common+0xac>
 800db14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db1c:	3501      	adds	r5, #1
 800db1e:	e7c6      	b.n	800daae <_printf_common+0x3e>
 800db20:	18e1      	adds	r1, r4, r3
 800db22:	1c5a      	adds	r2, r3, #1
 800db24:	2030      	movs	r0, #48	; 0x30
 800db26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800db2a:	4422      	add	r2, r4
 800db2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800db30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800db34:	3302      	adds	r3, #2
 800db36:	e7c7      	b.n	800dac8 <_printf_common+0x58>
 800db38:	2301      	movs	r3, #1
 800db3a:	4622      	mov	r2, r4
 800db3c:	4649      	mov	r1, r9
 800db3e:	4638      	mov	r0, r7
 800db40:	47c0      	blx	r8
 800db42:	3001      	adds	r0, #1
 800db44:	d0e6      	beq.n	800db14 <_printf_common+0xa4>
 800db46:	3601      	adds	r6, #1
 800db48:	e7d9      	b.n	800dafe <_printf_common+0x8e>
	...

0800db4c <_printf_i>:
 800db4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db50:	7e0f      	ldrb	r7, [r1, #24]
 800db52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db54:	2f78      	cmp	r7, #120	; 0x78
 800db56:	4691      	mov	r9, r2
 800db58:	4680      	mov	r8, r0
 800db5a:	460c      	mov	r4, r1
 800db5c:	469a      	mov	sl, r3
 800db5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800db62:	d807      	bhi.n	800db74 <_printf_i+0x28>
 800db64:	2f62      	cmp	r7, #98	; 0x62
 800db66:	d80a      	bhi.n	800db7e <_printf_i+0x32>
 800db68:	2f00      	cmp	r7, #0
 800db6a:	f000 80d8 	beq.w	800dd1e <_printf_i+0x1d2>
 800db6e:	2f58      	cmp	r7, #88	; 0x58
 800db70:	f000 80a3 	beq.w	800dcba <_printf_i+0x16e>
 800db74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db7c:	e03a      	b.n	800dbf4 <_printf_i+0xa8>
 800db7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db82:	2b15      	cmp	r3, #21
 800db84:	d8f6      	bhi.n	800db74 <_printf_i+0x28>
 800db86:	a101      	add	r1, pc, #4	; (adr r1, 800db8c <_printf_i+0x40>)
 800db88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db8c:	0800dbe5 	.word	0x0800dbe5
 800db90:	0800dbf9 	.word	0x0800dbf9
 800db94:	0800db75 	.word	0x0800db75
 800db98:	0800db75 	.word	0x0800db75
 800db9c:	0800db75 	.word	0x0800db75
 800dba0:	0800db75 	.word	0x0800db75
 800dba4:	0800dbf9 	.word	0x0800dbf9
 800dba8:	0800db75 	.word	0x0800db75
 800dbac:	0800db75 	.word	0x0800db75
 800dbb0:	0800db75 	.word	0x0800db75
 800dbb4:	0800db75 	.word	0x0800db75
 800dbb8:	0800dd05 	.word	0x0800dd05
 800dbbc:	0800dc29 	.word	0x0800dc29
 800dbc0:	0800dce7 	.word	0x0800dce7
 800dbc4:	0800db75 	.word	0x0800db75
 800dbc8:	0800db75 	.word	0x0800db75
 800dbcc:	0800dd27 	.word	0x0800dd27
 800dbd0:	0800db75 	.word	0x0800db75
 800dbd4:	0800dc29 	.word	0x0800dc29
 800dbd8:	0800db75 	.word	0x0800db75
 800dbdc:	0800db75 	.word	0x0800db75
 800dbe0:	0800dcef 	.word	0x0800dcef
 800dbe4:	682b      	ldr	r3, [r5, #0]
 800dbe6:	1d1a      	adds	r2, r3, #4
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	602a      	str	r2, [r5, #0]
 800dbec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dbf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	e0a3      	b.n	800dd40 <_printf_i+0x1f4>
 800dbf8:	6820      	ldr	r0, [r4, #0]
 800dbfa:	6829      	ldr	r1, [r5, #0]
 800dbfc:	0606      	lsls	r6, r0, #24
 800dbfe:	f101 0304 	add.w	r3, r1, #4
 800dc02:	d50a      	bpl.n	800dc1a <_printf_i+0xce>
 800dc04:	680e      	ldr	r6, [r1, #0]
 800dc06:	602b      	str	r3, [r5, #0]
 800dc08:	2e00      	cmp	r6, #0
 800dc0a:	da03      	bge.n	800dc14 <_printf_i+0xc8>
 800dc0c:	232d      	movs	r3, #45	; 0x2d
 800dc0e:	4276      	negs	r6, r6
 800dc10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc14:	485e      	ldr	r0, [pc, #376]	; (800dd90 <_printf_i+0x244>)
 800dc16:	230a      	movs	r3, #10
 800dc18:	e019      	b.n	800dc4e <_printf_i+0x102>
 800dc1a:	680e      	ldr	r6, [r1, #0]
 800dc1c:	602b      	str	r3, [r5, #0]
 800dc1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dc22:	bf18      	it	ne
 800dc24:	b236      	sxthne	r6, r6
 800dc26:	e7ef      	b.n	800dc08 <_printf_i+0xbc>
 800dc28:	682b      	ldr	r3, [r5, #0]
 800dc2a:	6820      	ldr	r0, [r4, #0]
 800dc2c:	1d19      	adds	r1, r3, #4
 800dc2e:	6029      	str	r1, [r5, #0]
 800dc30:	0601      	lsls	r1, r0, #24
 800dc32:	d501      	bpl.n	800dc38 <_printf_i+0xec>
 800dc34:	681e      	ldr	r6, [r3, #0]
 800dc36:	e002      	b.n	800dc3e <_printf_i+0xf2>
 800dc38:	0646      	lsls	r6, r0, #25
 800dc3a:	d5fb      	bpl.n	800dc34 <_printf_i+0xe8>
 800dc3c:	881e      	ldrh	r6, [r3, #0]
 800dc3e:	4854      	ldr	r0, [pc, #336]	; (800dd90 <_printf_i+0x244>)
 800dc40:	2f6f      	cmp	r7, #111	; 0x6f
 800dc42:	bf0c      	ite	eq
 800dc44:	2308      	moveq	r3, #8
 800dc46:	230a      	movne	r3, #10
 800dc48:	2100      	movs	r1, #0
 800dc4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dc4e:	6865      	ldr	r5, [r4, #4]
 800dc50:	60a5      	str	r5, [r4, #8]
 800dc52:	2d00      	cmp	r5, #0
 800dc54:	bfa2      	ittt	ge
 800dc56:	6821      	ldrge	r1, [r4, #0]
 800dc58:	f021 0104 	bicge.w	r1, r1, #4
 800dc5c:	6021      	strge	r1, [r4, #0]
 800dc5e:	b90e      	cbnz	r6, 800dc64 <_printf_i+0x118>
 800dc60:	2d00      	cmp	r5, #0
 800dc62:	d04d      	beq.n	800dd00 <_printf_i+0x1b4>
 800dc64:	4615      	mov	r5, r2
 800dc66:	fbb6 f1f3 	udiv	r1, r6, r3
 800dc6a:	fb03 6711 	mls	r7, r3, r1, r6
 800dc6e:	5dc7      	ldrb	r7, [r0, r7]
 800dc70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dc74:	4637      	mov	r7, r6
 800dc76:	42bb      	cmp	r3, r7
 800dc78:	460e      	mov	r6, r1
 800dc7a:	d9f4      	bls.n	800dc66 <_printf_i+0x11a>
 800dc7c:	2b08      	cmp	r3, #8
 800dc7e:	d10b      	bne.n	800dc98 <_printf_i+0x14c>
 800dc80:	6823      	ldr	r3, [r4, #0]
 800dc82:	07de      	lsls	r6, r3, #31
 800dc84:	d508      	bpl.n	800dc98 <_printf_i+0x14c>
 800dc86:	6923      	ldr	r3, [r4, #16]
 800dc88:	6861      	ldr	r1, [r4, #4]
 800dc8a:	4299      	cmp	r1, r3
 800dc8c:	bfde      	ittt	le
 800dc8e:	2330      	movle	r3, #48	; 0x30
 800dc90:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dc94:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800dc98:	1b52      	subs	r2, r2, r5
 800dc9a:	6122      	str	r2, [r4, #16]
 800dc9c:	f8cd a000 	str.w	sl, [sp]
 800dca0:	464b      	mov	r3, r9
 800dca2:	aa03      	add	r2, sp, #12
 800dca4:	4621      	mov	r1, r4
 800dca6:	4640      	mov	r0, r8
 800dca8:	f7ff fee2 	bl	800da70 <_printf_common>
 800dcac:	3001      	adds	r0, #1
 800dcae:	d14c      	bne.n	800dd4a <_printf_i+0x1fe>
 800dcb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dcb4:	b004      	add	sp, #16
 800dcb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcba:	4835      	ldr	r0, [pc, #212]	; (800dd90 <_printf_i+0x244>)
 800dcbc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dcc0:	6829      	ldr	r1, [r5, #0]
 800dcc2:	6823      	ldr	r3, [r4, #0]
 800dcc4:	f851 6b04 	ldr.w	r6, [r1], #4
 800dcc8:	6029      	str	r1, [r5, #0]
 800dcca:	061d      	lsls	r5, r3, #24
 800dccc:	d514      	bpl.n	800dcf8 <_printf_i+0x1ac>
 800dcce:	07df      	lsls	r7, r3, #31
 800dcd0:	bf44      	itt	mi
 800dcd2:	f043 0320 	orrmi.w	r3, r3, #32
 800dcd6:	6023      	strmi	r3, [r4, #0]
 800dcd8:	b91e      	cbnz	r6, 800dce2 <_printf_i+0x196>
 800dcda:	6823      	ldr	r3, [r4, #0]
 800dcdc:	f023 0320 	bic.w	r3, r3, #32
 800dce0:	6023      	str	r3, [r4, #0]
 800dce2:	2310      	movs	r3, #16
 800dce4:	e7b0      	b.n	800dc48 <_printf_i+0xfc>
 800dce6:	6823      	ldr	r3, [r4, #0]
 800dce8:	f043 0320 	orr.w	r3, r3, #32
 800dcec:	6023      	str	r3, [r4, #0]
 800dcee:	2378      	movs	r3, #120	; 0x78
 800dcf0:	4828      	ldr	r0, [pc, #160]	; (800dd94 <_printf_i+0x248>)
 800dcf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dcf6:	e7e3      	b.n	800dcc0 <_printf_i+0x174>
 800dcf8:	0659      	lsls	r1, r3, #25
 800dcfa:	bf48      	it	mi
 800dcfc:	b2b6      	uxthmi	r6, r6
 800dcfe:	e7e6      	b.n	800dcce <_printf_i+0x182>
 800dd00:	4615      	mov	r5, r2
 800dd02:	e7bb      	b.n	800dc7c <_printf_i+0x130>
 800dd04:	682b      	ldr	r3, [r5, #0]
 800dd06:	6826      	ldr	r6, [r4, #0]
 800dd08:	6961      	ldr	r1, [r4, #20]
 800dd0a:	1d18      	adds	r0, r3, #4
 800dd0c:	6028      	str	r0, [r5, #0]
 800dd0e:	0635      	lsls	r5, r6, #24
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	d501      	bpl.n	800dd18 <_printf_i+0x1cc>
 800dd14:	6019      	str	r1, [r3, #0]
 800dd16:	e002      	b.n	800dd1e <_printf_i+0x1d2>
 800dd18:	0670      	lsls	r0, r6, #25
 800dd1a:	d5fb      	bpl.n	800dd14 <_printf_i+0x1c8>
 800dd1c:	8019      	strh	r1, [r3, #0]
 800dd1e:	2300      	movs	r3, #0
 800dd20:	6123      	str	r3, [r4, #16]
 800dd22:	4615      	mov	r5, r2
 800dd24:	e7ba      	b.n	800dc9c <_printf_i+0x150>
 800dd26:	682b      	ldr	r3, [r5, #0]
 800dd28:	1d1a      	adds	r2, r3, #4
 800dd2a:	602a      	str	r2, [r5, #0]
 800dd2c:	681d      	ldr	r5, [r3, #0]
 800dd2e:	6862      	ldr	r2, [r4, #4]
 800dd30:	2100      	movs	r1, #0
 800dd32:	4628      	mov	r0, r5
 800dd34:	f7f2 fad4 	bl	80002e0 <memchr>
 800dd38:	b108      	cbz	r0, 800dd3e <_printf_i+0x1f2>
 800dd3a:	1b40      	subs	r0, r0, r5
 800dd3c:	6060      	str	r0, [r4, #4]
 800dd3e:	6863      	ldr	r3, [r4, #4]
 800dd40:	6123      	str	r3, [r4, #16]
 800dd42:	2300      	movs	r3, #0
 800dd44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd48:	e7a8      	b.n	800dc9c <_printf_i+0x150>
 800dd4a:	6923      	ldr	r3, [r4, #16]
 800dd4c:	462a      	mov	r2, r5
 800dd4e:	4649      	mov	r1, r9
 800dd50:	4640      	mov	r0, r8
 800dd52:	47d0      	blx	sl
 800dd54:	3001      	adds	r0, #1
 800dd56:	d0ab      	beq.n	800dcb0 <_printf_i+0x164>
 800dd58:	6823      	ldr	r3, [r4, #0]
 800dd5a:	079b      	lsls	r3, r3, #30
 800dd5c:	d413      	bmi.n	800dd86 <_printf_i+0x23a>
 800dd5e:	68e0      	ldr	r0, [r4, #12]
 800dd60:	9b03      	ldr	r3, [sp, #12]
 800dd62:	4298      	cmp	r0, r3
 800dd64:	bfb8      	it	lt
 800dd66:	4618      	movlt	r0, r3
 800dd68:	e7a4      	b.n	800dcb4 <_printf_i+0x168>
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	4632      	mov	r2, r6
 800dd6e:	4649      	mov	r1, r9
 800dd70:	4640      	mov	r0, r8
 800dd72:	47d0      	blx	sl
 800dd74:	3001      	adds	r0, #1
 800dd76:	d09b      	beq.n	800dcb0 <_printf_i+0x164>
 800dd78:	3501      	adds	r5, #1
 800dd7a:	68e3      	ldr	r3, [r4, #12]
 800dd7c:	9903      	ldr	r1, [sp, #12]
 800dd7e:	1a5b      	subs	r3, r3, r1
 800dd80:	42ab      	cmp	r3, r5
 800dd82:	dcf2      	bgt.n	800dd6a <_printf_i+0x21e>
 800dd84:	e7eb      	b.n	800dd5e <_printf_i+0x212>
 800dd86:	2500      	movs	r5, #0
 800dd88:	f104 0619 	add.w	r6, r4, #25
 800dd8c:	e7f5      	b.n	800dd7a <_printf_i+0x22e>
 800dd8e:	bf00      	nop
 800dd90:	0800e355 	.word	0x0800e355
 800dd94:	0800e366 	.word	0x0800e366

0800dd98 <_sbrk_r>:
 800dd98:	b538      	push	{r3, r4, r5, lr}
 800dd9a:	4d06      	ldr	r5, [pc, #24]	; (800ddb4 <_sbrk_r+0x1c>)
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	4604      	mov	r4, r0
 800dda0:	4608      	mov	r0, r1
 800dda2:	602b      	str	r3, [r5, #0]
 800dda4:	f7f2 ff66 	bl	8000c74 <_sbrk>
 800dda8:	1c43      	adds	r3, r0, #1
 800ddaa:	d102      	bne.n	800ddb2 <_sbrk_r+0x1a>
 800ddac:	682b      	ldr	r3, [r5, #0]
 800ddae:	b103      	cbz	r3, 800ddb2 <_sbrk_r+0x1a>
 800ddb0:	6023      	str	r3, [r4, #0]
 800ddb2:	bd38      	pop	{r3, r4, r5, pc}
 800ddb4:	24001588 	.word	0x24001588

0800ddb8 <__sread>:
 800ddb8:	b510      	push	{r4, lr}
 800ddba:	460c      	mov	r4, r1
 800ddbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddc0:	f000 f968 	bl	800e094 <_read_r>
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	bfab      	itete	ge
 800ddc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ddca:	89a3      	ldrhlt	r3, [r4, #12]
 800ddcc:	181b      	addge	r3, r3, r0
 800ddce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ddd2:	bfac      	ite	ge
 800ddd4:	6563      	strge	r3, [r4, #84]	; 0x54
 800ddd6:	81a3      	strhlt	r3, [r4, #12]
 800ddd8:	bd10      	pop	{r4, pc}

0800ddda <__swrite>:
 800ddda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddde:	461f      	mov	r7, r3
 800dde0:	898b      	ldrh	r3, [r1, #12]
 800dde2:	05db      	lsls	r3, r3, #23
 800dde4:	4605      	mov	r5, r0
 800dde6:	460c      	mov	r4, r1
 800dde8:	4616      	mov	r6, r2
 800ddea:	d505      	bpl.n	800ddf8 <__swrite+0x1e>
 800ddec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddf0:	2302      	movs	r3, #2
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	f000 f930 	bl	800e058 <_lseek_r>
 800ddf8:	89a3      	ldrh	r3, [r4, #12]
 800ddfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de02:	81a3      	strh	r3, [r4, #12]
 800de04:	4632      	mov	r2, r6
 800de06:	463b      	mov	r3, r7
 800de08:	4628      	mov	r0, r5
 800de0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de0e:	f000 b869 	b.w	800dee4 <_write_r>

0800de12 <__sseek>:
 800de12:	b510      	push	{r4, lr}
 800de14:	460c      	mov	r4, r1
 800de16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de1a:	f000 f91d 	bl	800e058 <_lseek_r>
 800de1e:	1c43      	adds	r3, r0, #1
 800de20:	89a3      	ldrh	r3, [r4, #12]
 800de22:	bf15      	itete	ne
 800de24:	6560      	strne	r0, [r4, #84]	; 0x54
 800de26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800de2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800de2e:	81a3      	strheq	r3, [r4, #12]
 800de30:	bf18      	it	ne
 800de32:	81a3      	strhne	r3, [r4, #12]
 800de34:	bd10      	pop	{r4, pc}

0800de36 <__sclose>:
 800de36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de3a:	f000 b8db 	b.w	800dff4 <_close_r>
	...

0800de40 <__swbuf_r>:
 800de40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de42:	460e      	mov	r6, r1
 800de44:	4614      	mov	r4, r2
 800de46:	4605      	mov	r5, r0
 800de48:	b118      	cbz	r0, 800de52 <__swbuf_r+0x12>
 800de4a:	6983      	ldr	r3, [r0, #24]
 800de4c:	b90b      	cbnz	r3, 800de52 <__swbuf_r+0x12>
 800de4e:	f7ff faa3 	bl	800d398 <__sinit>
 800de52:	4b21      	ldr	r3, [pc, #132]	; (800ded8 <__swbuf_r+0x98>)
 800de54:	429c      	cmp	r4, r3
 800de56:	d12b      	bne.n	800deb0 <__swbuf_r+0x70>
 800de58:	686c      	ldr	r4, [r5, #4]
 800de5a:	69a3      	ldr	r3, [r4, #24]
 800de5c:	60a3      	str	r3, [r4, #8]
 800de5e:	89a3      	ldrh	r3, [r4, #12]
 800de60:	071a      	lsls	r2, r3, #28
 800de62:	d52f      	bpl.n	800dec4 <__swbuf_r+0x84>
 800de64:	6923      	ldr	r3, [r4, #16]
 800de66:	b36b      	cbz	r3, 800dec4 <__swbuf_r+0x84>
 800de68:	6923      	ldr	r3, [r4, #16]
 800de6a:	6820      	ldr	r0, [r4, #0]
 800de6c:	1ac0      	subs	r0, r0, r3
 800de6e:	6963      	ldr	r3, [r4, #20]
 800de70:	b2f6      	uxtb	r6, r6
 800de72:	4283      	cmp	r3, r0
 800de74:	4637      	mov	r7, r6
 800de76:	dc04      	bgt.n	800de82 <__swbuf_r+0x42>
 800de78:	4621      	mov	r1, r4
 800de7a:	4628      	mov	r0, r5
 800de7c:	f7ff f9f8 	bl	800d270 <_fflush_r>
 800de80:	bb30      	cbnz	r0, 800ded0 <__swbuf_r+0x90>
 800de82:	68a3      	ldr	r3, [r4, #8]
 800de84:	3b01      	subs	r3, #1
 800de86:	60a3      	str	r3, [r4, #8]
 800de88:	6823      	ldr	r3, [r4, #0]
 800de8a:	1c5a      	adds	r2, r3, #1
 800de8c:	6022      	str	r2, [r4, #0]
 800de8e:	701e      	strb	r6, [r3, #0]
 800de90:	6963      	ldr	r3, [r4, #20]
 800de92:	3001      	adds	r0, #1
 800de94:	4283      	cmp	r3, r0
 800de96:	d004      	beq.n	800dea2 <__swbuf_r+0x62>
 800de98:	89a3      	ldrh	r3, [r4, #12]
 800de9a:	07db      	lsls	r3, r3, #31
 800de9c:	d506      	bpl.n	800deac <__swbuf_r+0x6c>
 800de9e:	2e0a      	cmp	r6, #10
 800dea0:	d104      	bne.n	800deac <__swbuf_r+0x6c>
 800dea2:	4621      	mov	r1, r4
 800dea4:	4628      	mov	r0, r5
 800dea6:	f7ff f9e3 	bl	800d270 <_fflush_r>
 800deaa:	b988      	cbnz	r0, 800ded0 <__swbuf_r+0x90>
 800deac:	4638      	mov	r0, r7
 800deae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800deb0:	4b0a      	ldr	r3, [pc, #40]	; (800dedc <__swbuf_r+0x9c>)
 800deb2:	429c      	cmp	r4, r3
 800deb4:	d101      	bne.n	800deba <__swbuf_r+0x7a>
 800deb6:	68ac      	ldr	r4, [r5, #8]
 800deb8:	e7cf      	b.n	800de5a <__swbuf_r+0x1a>
 800deba:	4b09      	ldr	r3, [pc, #36]	; (800dee0 <__swbuf_r+0xa0>)
 800debc:	429c      	cmp	r4, r3
 800debe:	bf08      	it	eq
 800dec0:	68ec      	ldreq	r4, [r5, #12]
 800dec2:	e7ca      	b.n	800de5a <__swbuf_r+0x1a>
 800dec4:	4621      	mov	r1, r4
 800dec6:	4628      	mov	r0, r5
 800dec8:	f000 f81e 	bl	800df08 <__swsetup_r>
 800decc:	2800      	cmp	r0, #0
 800dece:	d0cb      	beq.n	800de68 <__swbuf_r+0x28>
 800ded0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ded4:	e7ea      	b.n	800deac <__swbuf_r+0x6c>
 800ded6:	bf00      	nop
 800ded8:	0800e304 	.word	0x0800e304
 800dedc:	0800e324 	.word	0x0800e324
 800dee0:	0800e2e4 	.word	0x0800e2e4

0800dee4 <_write_r>:
 800dee4:	b538      	push	{r3, r4, r5, lr}
 800dee6:	4d07      	ldr	r5, [pc, #28]	; (800df04 <_write_r+0x20>)
 800dee8:	4604      	mov	r4, r0
 800deea:	4608      	mov	r0, r1
 800deec:	4611      	mov	r1, r2
 800deee:	2200      	movs	r2, #0
 800def0:	602a      	str	r2, [r5, #0]
 800def2:	461a      	mov	r2, r3
 800def4:	f7f2 fc1e 	bl	8000734 <_write>
 800def8:	1c43      	adds	r3, r0, #1
 800defa:	d102      	bne.n	800df02 <_write_r+0x1e>
 800defc:	682b      	ldr	r3, [r5, #0]
 800defe:	b103      	cbz	r3, 800df02 <_write_r+0x1e>
 800df00:	6023      	str	r3, [r4, #0]
 800df02:	bd38      	pop	{r3, r4, r5, pc}
 800df04:	24001588 	.word	0x24001588

0800df08 <__swsetup_r>:
 800df08:	4b32      	ldr	r3, [pc, #200]	; (800dfd4 <__swsetup_r+0xcc>)
 800df0a:	b570      	push	{r4, r5, r6, lr}
 800df0c:	681d      	ldr	r5, [r3, #0]
 800df0e:	4606      	mov	r6, r0
 800df10:	460c      	mov	r4, r1
 800df12:	b125      	cbz	r5, 800df1e <__swsetup_r+0x16>
 800df14:	69ab      	ldr	r3, [r5, #24]
 800df16:	b913      	cbnz	r3, 800df1e <__swsetup_r+0x16>
 800df18:	4628      	mov	r0, r5
 800df1a:	f7ff fa3d 	bl	800d398 <__sinit>
 800df1e:	4b2e      	ldr	r3, [pc, #184]	; (800dfd8 <__swsetup_r+0xd0>)
 800df20:	429c      	cmp	r4, r3
 800df22:	d10f      	bne.n	800df44 <__swsetup_r+0x3c>
 800df24:	686c      	ldr	r4, [r5, #4]
 800df26:	89a3      	ldrh	r3, [r4, #12]
 800df28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df2c:	0719      	lsls	r1, r3, #28
 800df2e:	d42c      	bmi.n	800df8a <__swsetup_r+0x82>
 800df30:	06dd      	lsls	r5, r3, #27
 800df32:	d411      	bmi.n	800df58 <__swsetup_r+0x50>
 800df34:	2309      	movs	r3, #9
 800df36:	6033      	str	r3, [r6, #0]
 800df38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800df3c:	81a3      	strh	r3, [r4, #12]
 800df3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df42:	e03e      	b.n	800dfc2 <__swsetup_r+0xba>
 800df44:	4b25      	ldr	r3, [pc, #148]	; (800dfdc <__swsetup_r+0xd4>)
 800df46:	429c      	cmp	r4, r3
 800df48:	d101      	bne.n	800df4e <__swsetup_r+0x46>
 800df4a:	68ac      	ldr	r4, [r5, #8]
 800df4c:	e7eb      	b.n	800df26 <__swsetup_r+0x1e>
 800df4e:	4b24      	ldr	r3, [pc, #144]	; (800dfe0 <__swsetup_r+0xd8>)
 800df50:	429c      	cmp	r4, r3
 800df52:	bf08      	it	eq
 800df54:	68ec      	ldreq	r4, [r5, #12]
 800df56:	e7e6      	b.n	800df26 <__swsetup_r+0x1e>
 800df58:	0758      	lsls	r0, r3, #29
 800df5a:	d512      	bpl.n	800df82 <__swsetup_r+0x7a>
 800df5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df5e:	b141      	cbz	r1, 800df72 <__swsetup_r+0x6a>
 800df60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df64:	4299      	cmp	r1, r3
 800df66:	d002      	beq.n	800df6e <__swsetup_r+0x66>
 800df68:	4630      	mov	r0, r6
 800df6a:	f7ff fb47 	bl	800d5fc <_free_r>
 800df6e:	2300      	movs	r3, #0
 800df70:	6363      	str	r3, [r4, #52]	; 0x34
 800df72:	89a3      	ldrh	r3, [r4, #12]
 800df74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800df78:	81a3      	strh	r3, [r4, #12]
 800df7a:	2300      	movs	r3, #0
 800df7c:	6063      	str	r3, [r4, #4]
 800df7e:	6923      	ldr	r3, [r4, #16]
 800df80:	6023      	str	r3, [r4, #0]
 800df82:	89a3      	ldrh	r3, [r4, #12]
 800df84:	f043 0308 	orr.w	r3, r3, #8
 800df88:	81a3      	strh	r3, [r4, #12]
 800df8a:	6923      	ldr	r3, [r4, #16]
 800df8c:	b94b      	cbnz	r3, 800dfa2 <__swsetup_r+0x9a>
 800df8e:	89a3      	ldrh	r3, [r4, #12]
 800df90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800df94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df98:	d003      	beq.n	800dfa2 <__swsetup_r+0x9a>
 800df9a:	4621      	mov	r1, r4
 800df9c:	4630      	mov	r0, r6
 800df9e:	f7ff fae5 	bl	800d56c <__smakebuf_r>
 800dfa2:	89a0      	ldrh	r0, [r4, #12]
 800dfa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfa8:	f010 0301 	ands.w	r3, r0, #1
 800dfac:	d00a      	beq.n	800dfc4 <__swsetup_r+0xbc>
 800dfae:	2300      	movs	r3, #0
 800dfb0:	60a3      	str	r3, [r4, #8]
 800dfb2:	6963      	ldr	r3, [r4, #20]
 800dfb4:	425b      	negs	r3, r3
 800dfb6:	61a3      	str	r3, [r4, #24]
 800dfb8:	6923      	ldr	r3, [r4, #16]
 800dfba:	b943      	cbnz	r3, 800dfce <__swsetup_r+0xc6>
 800dfbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dfc0:	d1ba      	bne.n	800df38 <__swsetup_r+0x30>
 800dfc2:	bd70      	pop	{r4, r5, r6, pc}
 800dfc4:	0781      	lsls	r1, r0, #30
 800dfc6:	bf58      	it	pl
 800dfc8:	6963      	ldrpl	r3, [r4, #20]
 800dfca:	60a3      	str	r3, [r4, #8]
 800dfcc:	e7f4      	b.n	800dfb8 <__swsetup_r+0xb0>
 800dfce:	2000      	movs	r0, #0
 800dfd0:	e7f7      	b.n	800dfc2 <__swsetup_r+0xba>
 800dfd2:	bf00      	nop
 800dfd4:	24000050 	.word	0x24000050
 800dfd8:	0800e304 	.word	0x0800e304
 800dfdc:	0800e324 	.word	0x0800e324
 800dfe0:	0800e2e4 	.word	0x0800e2e4

0800dfe4 <abort>:
 800dfe4:	b508      	push	{r3, lr}
 800dfe6:	2006      	movs	r0, #6
 800dfe8:	f000 f88e 	bl	800e108 <raise>
 800dfec:	2001      	movs	r0, #1
 800dfee:	f7f2 fe36 	bl	8000c5e <_exit>
	...

0800dff4 <_close_r>:
 800dff4:	b538      	push	{r3, r4, r5, lr}
 800dff6:	4d06      	ldr	r5, [pc, #24]	; (800e010 <_close_r+0x1c>)
 800dff8:	2300      	movs	r3, #0
 800dffa:	4604      	mov	r4, r0
 800dffc:	4608      	mov	r0, r1
 800dffe:	602b      	str	r3, [r5, #0]
 800e000:	f7f2 fb2c 	bl	800065c <_close>
 800e004:	1c43      	adds	r3, r0, #1
 800e006:	d102      	bne.n	800e00e <_close_r+0x1a>
 800e008:	682b      	ldr	r3, [r5, #0]
 800e00a:	b103      	cbz	r3, 800e00e <_close_r+0x1a>
 800e00c:	6023      	str	r3, [r4, #0]
 800e00e:	bd38      	pop	{r3, r4, r5, pc}
 800e010:	24001588 	.word	0x24001588

0800e014 <_fstat_r>:
 800e014:	b538      	push	{r3, r4, r5, lr}
 800e016:	4d07      	ldr	r5, [pc, #28]	; (800e034 <_fstat_r+0x20>)
 800e018:	2300      	movs	r3, #0
 800e01a:	4604      	mov	r4, r0
 800e01c:	4608      	mov	r0, r1
 800e01e:	4611      	mov	r1, r2
 800e020:	602b      	str	r3, [r5, #0]
 800e022:	f7f2 fb43 	bl	80006ac <_fstat>
 800e026:	1c43      	adds	r3, r0, #1
 800e028:	d102      	bne.n	800e030 <_fstat_r+0x1c>
 800e02a:	682b      	ldr	r3, [r5, #0]
 800e02c:	b103      	cbz	r3, 800e030 <_fstat_r+0x1c>
 800e02e:	6023      	str	r3, [r4, #0]
 800e030:	bd38      	pop	{r3, r4, r5, pc}
 800e032:	bf00      	nop
 800e034:	24001588 	.word	0x24001588

0800e038 <_isatty_r>:
 800e038:	b538      	push	{r3, r4, r5, lr}
 800e03a:	4d06      	ldr	r5, [pc, #24]	; (800e054 <_isatty_r+0x1c>)
 800e03c:	2300      	movs	r3, #0
 800e03e:	4604      	mov	r4, r0
 800e040:	4608      	mov	r0, r1
 800e042:	602b      	str	r3, [r5, #0]
 800e044:	f7f2 faf4 	bl	8000630 <_isatty>
 800e048:	1c43      	adds	r3, r0, #1
 800e04a:	d102      	bne.n	800e052 <_isatty_r+0x1a>
 800e04c:	682b      	ldr	r3, [r5, #0]
 800e04e:	b103      	cbz	r3, 800e052 <_isatty_r+0x1a>
 800e050:	6023      	str	r3, [r4, #0]
 800e052:	bd38      	pop	{r3, r4, r5, pc}
 800e054:	24001588 	.word	0x24001588

0800e058 <_lseek_r>:
 800e058:	b538      	push	{r3, r4, r5, lr}
 800e05a:	4d07      	ldr	r5, [pc, #28]	; (800e078 <_lseek_r+0x20>)
 800e05c:	4604      	mov	r4, r0
 800e05e:	4608      	mov	r0, r1
 800e060:	4611      	mov	r1, r2
 800e062:	2200      	movs	r2, #0
 800e064:	602a      	str	r2, [r5, #0]
 800e066:	461a      	mov	r2, r3
 800e068:	f7f2 fb0f 	bl	800068a <_lseek>
 800e06c:	1c43      	adds	r3, r0, #1
 800e06e:	d102      	bne.n	800e076 <_lseek_r+0x1e>
 800e070:	682b      	ldr	r3, [r5, #0]
 800e072:	b103      	cbz	r3, 800e076 <_lseek_r+0x1e>
 800e074:	6023      	str	r3, [r4, #0]
 800e076:	bd38      	pop	{r3, r4, r5, pc}
 800e078:	24001588 	.word	0x24001588

0800e07c <__malloc_lock>:
 800e07c:	4801      	ldr	r0, [pc, #4]	; (800e084 <__malloc_lock+0x8>)
 800e07e:	f7ff ba4e 	b.w	800d51e <__retarget_lock_acquire_recursive>
 800e082:	bf00      	nop
 800e084:	2400157c 	.word	0x2400157c

0800e088 <__malloc_unlock>:
 800e088:	4801      	ldr	r0, [pc, #4]	; (800e090 <__malloc_unlock+0x8>)
 800e08a:	f7ff ba49 	b.w	800d520 <__retarget_lock_release_recursive>
 800e08e:	bf00      	nop
 800e090:	2400157c 	.word	0x2400157c

0800e094 <_read_r>:
 800e094:	b538      	push	{r3, r4, r5, lr}
 800e096:	4d07      	ldr	r5, [pc, #28]	; (800e0b4 <_read_r+0x20>)
 800e098:	4604      	mov	r4, r0
 800e09a:	4608      	mov	r0, r1
 800e09c:	4611      	mov	r1, r2
 800e09e:	2200      	movs	r2, #0
 800e0a0:	602a      	str	r2, [r5, #0]
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	f7f2 fb1e 	bl	80006e4 <_read>
 800e0a8:	1c43      	adds	r3, r0, #1
 800e0aa:	d102      	bne.n	800e0b2 <_read_r+0x1e>
 800e0ac:	682b      	ldr	r3, [r5, #0]
 800e0ae:	b103      	cbz	r3, 800e0b2 <_read_r+0x1e>
 800e0b0:	6023      	str	r3, [r4, #0]
 800e0b2:	bd38      	pop	{r3, r4, r5, pc}
 800e0b4:	24001588 	.word	0x24001588

0800e0b8 <_raise_r>:
 800e0b8:	291f      	cmp	r1, #31
 800e0ba:	b538      	push	{r3, r4, r5, lr}
 800e0bc:	4604      	mov	r4, r0
 800e0be:	460d      	mov	r5, r1
 800e0c0:	d904      	bls.n	800e0cc <_raise_r+0x14>
 800e0c2:	2316      	movs	r3, #22
 800e0c4:	6003      	str	r3, [r0, #0]
 800e0c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e0ca:	bd38      	pop	{r3, r4, r5, pc}
 800e0cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e0ce:	b112      	cbz	r2, 800e0d6 <_raise_r+0x1e>
 800e0d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e0d4:	b94b      	cbnz	r3, 800e0ea <_raise_r+0x32>
 800e0d6:	4620      	mov	r0, r4
 800e0d8:	f000 f830 	bl	800e13c <_getpid_r>
 800e0dc:	462a      	mov	r2, r5
 800e0de:	4601      	mov	r1, r0
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0e6:	f000 b817 	b.w	800e118 <_kill_r>
 800e0ea:	2b01      	cmp	r3, #1
 800e0ec:	d00a      	beq.n	800e104 <_raise_r+0x4c>
 800e0ee:	1c59      	adds	r1, r3, #1
 800e0f0:	d103      	bne.n	800e0fa <_raise_r+0x42>
 800e0f2:	2316      	movs	r3, #22
 800e0f4:	6003      	str	r3, [r0, #0]
 800e0f6:	2001      	movs	r0, #1
 800e0f8:	e7e7      	b.n	800e0ca <_raise_r+0x12>
 800e0fa:	2400      	movs	r4, #0
 800e0fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e100:	4628      	mov	r0, r5
 800e102:	4798      	blx	r3
 800e104:	2000      	movs	r0, #0
 800e106:	e7e0      	b.n	800e0ca <_raise_r+0x12>

0800e108 <raise>:
 800e108:	4b02      	ldr	r3, [pc, #8]	; (800e114 <raise+0xc>)
 800e10a:	4601      	mov	r1, r0
 800e10c:	6818      	ldr	r0, [r3, #0]
 800e10e:	f7ff bfd3 	b.w	800e0b8 <_raise_r>
 800e112:	bf00      	nop
 800e114:	24000050 	.word	0x24000050

0800e118 <_kill_r>:
 800e118:	b538      	push	{r3, r4, r5, lr}
 800e11a:	4d07      	ldr	r5, [pc, #28]	; (800e138 <_kill_r+0x20>)
 800e11c:	2300      	movs	r3, #0
 800e11e:	4604      	mov	r4, r0
 800e120:	4608      	mov	r0, r1
 800e122:	4611      	mov	r1, r2
 800e124:	602b      	str	r3, [r5, #0]
 800e126:	f7f2 fd8a 	bl	8000c3e <_kill>
 800e12a:	1c43      	adds	r3, r0, #1
 800e12c:	d102      	bne.n	800e134 <_kill_r+0x1c>
 800e12e:	682b      	ldr	r3, [r5, #0]
 800e130:	b103      	cbz	r3, 800e134 <_kill_r+0x1c>
 800e132:	6023      	str	r3, [r4, #0]
 800e134:	bd38      	pop	{r3, r4, r5, pc}
 800e136:	bf00      	nop
 800e138:	24001588 	.word	0x24001588

0800e13c <_getpid_r>:
 800e13c:	f7f2 bd77 	b.w	8000c2e <_getpid>

0800e140 <_gettimeofday>:
 800e140:	4b02      	ldr	r3, [pc, #8]	; (800e14c <_gettimeofday+0xc>)
 800e142:	2258      	movs	r2, #88	; 0x58
 800e144:	601a      	str	r2, [r3, #0]
 800e146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e14a:	4770      	bx	lr
 800e14c:	24001588 	.word	0x24001588

0800e150 <_init>:
 800e150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e152:	bf00      	nop
 800e154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e156:	bc08      	pop	{r3}
 800e158:	469e      	mov	lr, r3
 800e15a:	4770      	bx	lr

0800e15c <_fini>:
 800e15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e15e:	bf00      	nop
 800e160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e162:	bc08      	pop	{r3}
 800e164:	469e      	mov	lr, r3
 800e166:	4770      	bx	lr
